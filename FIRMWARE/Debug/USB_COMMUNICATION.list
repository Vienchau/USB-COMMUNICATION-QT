
USB_COMMUNICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800ca68  0800ca68  0001ca68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb60  0800cb60  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb60  0800cb60  0001cb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb68  0800cb68  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb68  0800cb68  0001cb68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb6c  0800cb6c  0001cb6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800cb70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020174  2**0
                  CONTENTS
 10 .bss          000017d8  20000174  20000174  00020174  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  2000194c  2000194c  00020174  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001acc7  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004108  00000000  00000000  0003ae6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  0003ef78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001310  00000000  00000000  00040440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002573f  00000000  00000000  00041750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df41  00000000  00000000  00066e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0039  00000000  00000000  00084dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00154e09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e64  00000000  00000000  00154e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000174 	.word	0x20000174
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca4c 	.word	0x0800ca4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000178 	.word	0x20000178
 80001cc:	0800ca4c 	.word	0x0800ca4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f8a:	f001 ff6f 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000fa8:	f001 fdc4 	bl	8002b34 <HAL_GPIO_Init>

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f001 fb7a 	bl	80026c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 fb4c 	bl	8001668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f7ff ff94 	bl	8000efc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fd4:	f001 f90c 	bl	80021f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fd8:	f001 f956 	bl	8002288 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fdc:	f001 f9ae 	bl	800233c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000fe0:	f001 faca 	bl	8002578 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000fe4:	f009 fc1e 	bl	800a824 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  SerialInit();
 8000fe8:	f000 ff7a 	bl	8001ee0 <SerialInit>
  MotorInit();
 8000fec:	f000 fc1c 	bl	8001828 <MotorInit>
  tProcess = NONE;
 8000ff0:	4bb3      	ldr	r3, [pc, #716]	; (80012c0 <main+0x300>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(g_bDataAvailable == true)
 8000ff6:	4bb3      	ldr	r3, [pc, #716]	; (80012c4 <main+0x304>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d04d      	beq.n	800109a <main+0xda>
	  	  	      {
	  	  	        if(StrCompare(g_strCommand, (uint8_t*)"SPID", 4))
 8000ffe:	2204      	movs	r2, #4
 8001000:	49b1      	ldr	r1, [pc, #708]	; (80012c8 <main+0x308>)
 8001002:	48b2      	ldr	r0, [pc, #712]	; (80012cc <main+0x30c>)
 8001004:	f000 ff48 	bl	8001e98 <StrCompare>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <main+0x56>
	  	  	        {
	  	  	          tProcess = SPID;
 800100e:	4bac      	ldr	r3, [pc, #688]	; (80012c0 <main+0x300>)
 8001010:	2202      	movs	r2, #2
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e03e      	b.n	8001094 <main+0xd4>
	  	  	        }
	  	  	        else if(StrCompare(g_strCommand, (uint8_t*)"CTUN", 4))
 8001016:	2204      	movs	r2, #4
 8001018:	49ad      	ldr	r1, [pc, #692]	; (80012d0 <main+0x310>)
 800101a:	48ac      	ldr	r0, [pc, #688]	; (80012cc <main+0x30c>)
 800101c:	f000 ff3c 	bl	8001e98 <StrCompare>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <main+0x6e>
	  	  	        {
	  	  	          tProcess = CTUN_RES;
 8001026:	4ba6      	ldr	r3, [pc, #664]	; (80012c0 <main+0x300>)
 8001028:	2204      	movs	r2, #4
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e032      	b.n	8001094 <main+0xd4>
	  	  	        }
	  	  	        else if(StrCompare(g_strCommand, (uint8_t*)"GPID", 4))
 800102e:	2204      	movs	r2, #4
 8001030:	49a8      	ldr	r1, [pc, #672]	; (80012d4 <main+0x314>)
 8001032:	48a6      	ldr	r0, [pc, #664]	; (80012cc <main+0x30c>)
 8001034:	f000 ff30 	bl	8001e98 <StrCompare>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <main+0x86>
	  	  	        {
	  	  	          tProcess = GPID;
 800103e:	4ba0      	ldr	r3, [pc, #640]	; (80012c0 <main+0x300>)
 8001040:	2205      	movs	r2, #5
 8001042:	701a      	strb	r2, [r3, #0]
 8001044:	e026      	b.n	8001094 <main+0xd4>
	  	  	        }
	  	  	        else if(StrCompare(g_strCommand, (uint8_t*)"CSET", 4))
 8001046:	2204      	movs	r2, #4
 8001048:	49a3      	ldr	r1, [pc, #652]	; (80012d8 <main+0x318>)
 800104a:	48a0      	ldr	r0, [pc, #640]	; (80012cc <main+0x30c>)
 800104c:	f000 ff24 	bl	8001e98 <StrCompare>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <main+0x9e>
	  	  	        {
	  	  	          tProcess = CSET;
 8001056:	4b9a      	ldr	r3, [pc, #616]	; (80012c0 <main+0x300>)
 8001058:	2206      	movs	r2, #6
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e01a      	b.n	8001094 <main+0xd4>
	  	  	        }
	  	  	        else if(StrCompare(g_strCommand, (uint8_t*)"CRUN", 4))
 800105e:	2204      	movs	r2, #4
 8001060:	499e      	ldr	r1, [pc, #632]	; (80012dc <main+0x31c>)
 8001062:	489a      	ldr	r0, [pc, #616]	; (80012cc <main+0x30c>)
 8001064:	f000 ff18 	bl	8001e98 <StrCompare>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <main+0xb6>
	  	  	        {
	  	  	          tProcess = CRUN_RES;
 800106e:	4b94      	ldr	r3, [pc, #592]	; (80012c0 <main+0x300>)
 8001070:	2208      	movs	r2, #8
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	e00e      	b.n	8001094 <main+0xd4>
	  	  	        }
	  	  	        else if(StrCompare(g_strCommand, (uint8_t*)"GRMS", 4))
 8001076:	2204      	movs	r2, #4
 8001078:	4999      	ldr	r1, [pc, #612]	; (80012e0 <main+0x320>)
 800107a:	4894      	ldr	r0, [pc, #592]	; (80012cc <main+0x30c>)
 800107c:	f000 ff0c 	bl	8001e98 <StrCompare>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <main+0xce>
	  	  	        {
	  	  	          tProcess = GRMS;
 8001086:	4b8e      	ldr	r3, [pc, #568]	; (80012c0 <main+0x300>)
 8001088:	2209      	movs	r2, #9
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	e002      	b.n	8001094 <main+0xd4>
	  	  	        }
	  	  	        else
	  	  	        {
	  	  	          tProcess = NONE;
 800108e:	4b8c      	ldr	r3, [pc, #560]	; (80012c0 <main+0x300>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
	  	  	        }
	  	  	        g_bDataAvailable = false;
 8001094:	4b8b      	ldr	r3, [pc, #556]	; (80012c4 <main+0x304>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
	  	  	      }

	  	  	      switch(tProcess)
 800109a:	4b89      	ldr	r3, [pc, #548]	; (80012c0 <main+0x300>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	3b01      	subs	r3, #1
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d8a8      	bhi.n	8000ff6 <main+0x36>
 80010a4:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <main+0xec>)
 80010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	080010d1 	.word	0x080010d1
 80010b0:	080010d7 	.word	0x080010d7
 80010b4:	08000ff7 	.word	0x08000ff7
 80010b8:	080011e9 	.word	0x080011e9
 80010bc:	080011fb 	.word	0x080011fb
 80010c0:	08001315 	.word	0x08001315
 80010c4:	08001513 	.word	0x08001513
 80010c8:	080014e5 	.word	0x080014e5
 80010cc:	0800151b 	.word	0x0800151b
	  	  	      {
	  	  	        case NONE:
	  	  	          SerialAcceptReceive();
 80010d0:	f000 ff14 	bl	8001efc <SerialAcceptReceive>
	  	  	          break;
 80010d4:	e2b2      	b.n	800163c <main+0x67c>
	  	  	        case SPID:
	  	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80010d6:	4a83      	ldr	r2, [pc, #524]	; (80012e4 <main+0x324>)
 80010d8:	4983      	ldr	r1, [pc, #524]	; (80012e8 <main+0x328>)
 80010da:	487c      	ldr	r0, [pc, #496]	; (80012cc <main+0x30c>)
 80010dc:	f000 ff1c 	bl	8001f18 <SerialWriteComm>
	  	  	          g_nCmdPulse = 0;
 80010e0:	4b82      	ldr	r3, [pc, #520]	; (80012ec <main+0x32c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
	  	  	          PIDReset(&tPIDControl);
 80010e6:	4882      	ldr	r0, [pc, #520]	; (80012f0 <main+0x330>)
 80010e8:	f000 fe02 	bl	8001cf0 <PIDReset>
	  	  	          __HAL_TIM_SetCounter(&htim4, 32768);
 80010ec:	4b81      	ldr	r3, [pc, #516]	; (80012f4 <main+0x334>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
	  	  	          g_nIndex = 0;
 80010f6:	4b80      	ldr	r3, [pc, #512]	; (80012f8 <main+0x338>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	801a      	strh	r2, [r3, #0]

	  	  	          //get PID params
	  	  	          tPIDControl.dKp = (float)g_nData[0] + (float)g_nData[1]/10;
 80010fc:	4b79      	ldr	r3, [pc, #484]	; (80012e4 <main+0x324>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001108:	4b76      	ldr	r3, [pc, #472]	; (80012e4 <main+0x324>)
 800110a:	785b      	ldrb	r3, [r3, #1]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001114:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001118:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800111c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001120:	4b73      	ldr	r3, [pc, #460]	; (80012f0 <main+0x330>)
 8001122:	edc3 7a00 	vstr	s15, [r3]
	  	  	          tPIDControl.dKi = (float)g_nData[2] + (float)g_nData[3]/100;
 8001126:	4b6f      	ldr	r3, [pc, #444]	; (80012e4 <main+0x324>)
 8001128:	789b      	ldrb	r3, [r3, #2]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001132:	4b6c      	ldr	r3, [pc, #432]	; (80012e4 <main+0x324>)
 8001134:	78db      	ldrb	r3, [r3, #3]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800113e:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 80012fc <main+0x33c>
 8001142:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114a:	4b69      	ldr	r3, [pc, #420]	; (80012f0 <main+0x330>)
 800114c:	edc3 7a01 	vstr	s15, [r3, #4]
	  	  	          tPIDControl.dKd = ((float)g_nData[4] + (float)g_nData[5]/(pow((float)10,(float)g_nData[6])))/100;
 8001150:	4b64      	ldr	r3, [pc, #400]	; (80012e4 <main+0x324>)
 8001152:	791b      	ldrb	r3, [r3, #4]
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800115c:	ee17 0a90 	vmov	r0, s15
 8001160:	f7ff f9f2 	bl	8000548 <__aeabi_f2d>
 8001164:	4604      	mov	r4, r0
 8001166:	460d      	mov	r5, r1
 8001168:	4b5e      	ldr	r3, [pc, #376]	; (80012e4 <main+0x324>)
 800116a:	795b      	ldrb	r3, [r3, #5]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001174:	ee17 0a90 	vmov	r0, s15
 8001178:	f7ff f9e6 	bl	8000548 <__aeabi_f2d>
 800117c:	4680      	mov	r8, r0
 800117e:	4689      	mov	r9, r1
 8001180:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <main+0x324>)
 8001182:	799b      	ldrb	r3, [r3, #6]
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800118c:	ee17 0a90 	vmov	r0, s15
 8001190:	f7ff f9da 	bl	8000548 <__aeabi_f2d>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	ec43 2b11 	vmov	d1, r2, r3
 800119c:	ed9f 0b46 	vldr	d0, [pc, #280]	; 80012b8 <main+0x2f8>
 80011a0:	f00a fd3a 	bl	800bc18 <pow>
 80011a4:	ec53 2b10 	vmov	r2, r3, d0
 80011a8:	4640      	mov	r0, r8
 80011aa:	4649      	mov	r1, r9
 80011ac:	f7ff fb4e 	bl	800084c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7ff f868 	bl	800028c <__adddf3>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <main+0x340>)
 80011ca:	f7ff fb3f 	bl	800084c <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fcbf 	bl	8000b58 <__aeabi_d2f>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a44      	ldr	r2, [pc, #272]	; (80012f0 <main+0x330>)
 80011de:	6093      	str	r3, [r2, #8]

	  	  	          tProcess = NONE;
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <main+0x300>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
	  	  	          break;
 80011e6:	e229      	b.n	800163c <main+0x67c>
	  	  	        case CTUN_RES:
	  	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80011e8:	4a3e      	ldr	r2, [pc, #248]	; (80012e4 <main+0x324>)
 80011ea:	493f      	ldr	r1, [pc, #252]	; (80012e8 <main+0x328>)
 80011ec:	4837      	ldr	r0, [pc, #220]	; (80012cc <main+0x30c>)
 80011ee:	f000 fe93 	bl	8001f18 <SerialWriteComm>
	  	  	          tProcess = CTUN;
 80011f2:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <main+0x300>)
 80011f4:	2203      	movs	r2, #3
 80011f6:	701a      	strb	r2, [r3, #0]
	  	  	          break;
 80011f8:	e220      	b.n	800163c <main+0x67c>
	  	  	        case CTUN:
	  	  	          break;
	  	  	        case GPID:
	  	  	          for(int index = 0; index < (g_nIndex -1); index ++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	e046      	b.n	800128e <main+0x2ce>
	  	  	          {
	  	  	            sprintf((char*)g_strTxCommand, "%s", g_strCommand);
 8001200:	4a32      	ldr	r2, [pc, #200]	; (80012cc <main+0x30c>)
 8001202:	4940      	ldr	r1, [pc, #256]	; (8001304 <main+0x344>)
 8001204:	4840      	ldr	r0, [pc, #256]	; (8001308 <main+0x348>)
 8001206:	f00a f997 	bl	800b538 <siprintf>
	  	  	            memset(g_nTxOption, '\0', 3);
 800120a:	2203      	movs	r2, #3
 800120c:	2100      	movs	r1, #0
 800120e:	483f      	ldr	r0, [pc, #252]	; (800130c <main+0x34c>)
 8001210:	f00a f89a 	bl	800b348 <memset>
	  	  	            g_nTxData[6] = (tPIDControl.nSampleTuningPID[index]&0xFF00) >>8;
 8001214:	4a36      	ldr	r2, [pc, #216]	; (80012f0 <main+0x330>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3308      	adds	r3, #8
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	889b      	ldrh	r3, [r3, #4]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	b29b      	uxth	r3, r3
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <main+0x350>)
 8001228:	719a      	strb	r2, [r3, #6]
	  	  	            g_nTxData[7] = (tPIDControl.nSampleTuningPID[index]&0xFF);
 800122a:	4a31      	ldr	r2, [pc, #196]	; (80012f0 <main+0x330>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3308      	adds	r3, #8
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	889b      	ldrh	r3, [r3, #4]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b35      	ldr	r3, [pc, #212]	; (8001310 <main+0x350>)
 800123a:	71da      	strb	r2, [r3, #7]
	  	  	            g_nTxData[2] = (index&0xFF00) >>8;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	121b      	asrs	r3, r3, #8
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <main+0x350>)
 8001244:	709a      	strb	r2, [r3, #2]
	  	  	            g_nTxData[3] = (index&0xFF);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <main+0x350>)
 800124c:	70da      	strb	r2, [r3, #3]
	  	  	            g_nTxData[0] = 0;
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <main+0x350>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
	  	  	            g_nTxData[1] = 199;
 8001254:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <main+0x350>)
 8001256:	22c7      	movs	r2, #199	; 0xc7
 8001258:	705a      	strb	r2, [r3, #1]

	  	  	            SerialWriteComm(g_strTxCommand, g_nTxOption, g_nTxData);
 800125a:	4a2d      	ldr	r2, [pc, #180]	; (8001310 <main+0x350>)
 800125c:	492b      	ldr	r1, [pc, #172]	; (800130c <main+0x34c>)
 800125e:	482a      	ldr	r0, [pc, #168]	; (8001308 <main+0x348>)
 8001260:	f000 fe5a 	bl	8001f18 <SerialWriteComm>
	  	  	            memset(g_strTxCommand, '\0', 4);
 8001264:	2204      	movs	r2, #4
 8001266:	2100      	movs	r1, #0
 8001268:	4827      	ldr	r0, [pc, #156]	; (8001308 <main+0x348>)
 800126a:	f00a f86d 	bl	800b348 <memset>
	  	  	            memset(g_nTxOption, '\0', 3);
 800126e:	2203      	movs	r2, #3
 8001270:	2100      	movs	r1, #0
 8001272:	4826      	ldr	r0, [pc, #152]	; (800130c <main+0x34c>)
 8001274:	f00a f868 	bl	800b348 <memset>
	  	  	            memset(g_nTxData, '\0', 8);
 8001278:	2208      	movs	r2, #8
 800127a:	2100      	movs	r1, #0
 800127c:	4824      	ldr	r0, [pc, #144]	; (8001310 <main+0x350>)
 800127e:	f00a f863 	bl	800b348 <memset>


	  	  	            HAL_Delay(30);
 8001282:	201e      	movs	r0, #30
 8001284:	f001 fa8e 	bl	80027a4 <HAL_Delay>
	  	  	          for(int index = 0; index < (g_nIndex -1); index ++)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3301      	adds	r3, #1
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <main+0x338>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	3b01      	subs	r3, #1
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	429a      	cmp	r2, r3
 8001298:	dbb2      	blt.n	8001200 <main+0x240>
	  	  	          }
	  	  	          g_bDataAvailable = false;
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <main+0x304>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
	  	  	          SerialAcceptReceive();
 80012a0:	f000 fe2c 	bl	8001efc <SerialAcceptReceive>
	  	  	          memset(g_strCommand, '\0', 4);
 80012a4:	2204      	movs	r2, #4
 80012a6:	2100      	movs	r1, #0
 80012a8:	4808      	ldr	r0, [pc, #32]	; (80012cc <main+0x30c>)
 80012aa:	f00a f84d 	bl	800b348 <memset>
	  	  	          tProcess = NONE;
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <main+0x300>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
	  	  	          break;
 80012b4:	e1c2      	b.n	800163c <main+0x67c>
 80012b6:	bf00      	nop
 80012b8:	00000000 	.word	0x00000000
 80012bc:	40240000 	.word	0x40240000
 80012c0:	200001a0 	.word	0x200001a0
 80012c4:	20000b88 	.word	0x20000b88
 80012c8:	0800ca68 	.word	0x0800ca68
 80012cc:	20000b78 	.word	0x20000b78
 80012d0:	0800ca70 	.word	0x0800ca70
 80012d4:	0800ca78 	.word	0x0800ca78
 80012d8:	0800ca80 	.word	0x0800ca80
 80012dc:	0800ca88 	.word	0x0800ca88
 80012e0:	0800ca90 	.word	0x0800ca90
 80012e4:	20000b80 	.word	0x20000b80
 80012e8:	20000b7c 	.word	0x20000b7c
 80012ec:	20000b58 	.word	0x20000b58
 80012f0:	200001a4 	.word	0x200001a4
 80012f4:	20000c20 	.word	0x20000c20
 80012f8:	20000b5c 	.word	0x20000b5c
 80012fc:	42c80000 	.word	0x42c80000
 8001300:	40590000 	.word	0x40590000
 8001304:	0800ca98 	.word	0x0800ca98
 8001308:	20000190 	.word	0x20000190
 800130c:	20000194 	.word	0x20000194
 8001310:	20000198 	.word	0x20000198
	  	  	        case CSET:
	  	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 8001314:	4a82      	ldr	r2, [pc, #520]	; (8001520 <main+0x560>)
 8001316:	4983      	ldr	r1, [pc, #524]	; (8001524 <main+0x564>)
 8001318:	4883      	ldr	r0, [pc, #524]	; (8001528 <main+0x568>)
 800131a:	f000 fdfd 	bl	8001f18 <SerialWriteComm>

	  	  	          PIDReset(&tPIDControl);
 800131e:	4883      	ldr	r0, [pc, #524]	; (800152c <main+0x56c>)
 8001320:	f000 fce6 	bl	8001cf0 <PIDReset>
	  	  	          g_nActPulse = 0;
 8001324:	4b82      	ldr	r3, [pc, #520]	; (8001530 <main+0x570>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
	  	  	          g_nCmdPulse = 0 ;
 800132a:	4b82      	ldr	r3, [pc, #520]	; (8001534 <main+0x574>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]

	  	  	          //Get Pmax, Vmax, Amax
	  	  	          tProfile.dAccelMax = (float)(g_nData[2])*256 + (float)(g_nData[3]);
 8001330:	4b7b      	ldr	r3, [pc, #492]	; (8001520 <main+0x560>)
 8001332:	789b      	ldrb	r3, [r3, #2]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800133c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001538 <main+0x578>
 8001340:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001344:	4b76      	ldr	r3, [pc, #472]	; (8001520 <main+0x560>)
 8001346:	78db      	ldrb	r3, [r3, #3]
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001354:	4b79      	ldr	r3, [pc, #484]	; (800153c <main+0x57c>)
 8001356:	edc3 7a00 	vstr	s15, [r3]
	  	  	          tProfile.dVelMax = (float)(g_nData[4])*256 + (float)(g_nData[5]);
 800135a:	4b71      	ldr	r3, [pc, #452]	; (8001520 <main+0x560>)
 800135c:	791b      	ldrb	r3, [r3, #4]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001366:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001538 <main+0x578>
 800136a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800136e:	4b6c      	ldr	r3, [pc, #432]	; (8001520 <main+0x560>)
 8001370:	795b      	ldrb	r3, [r3, #5]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800137a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137e:	4b6f      	ldr	r3, [pc, #444]	; (800153c <main+0x57c>)
 8001380:	edc3 7a01 	vstr	s15, [r3, #4]
	  	  	          tProfile.dPosMax = (float)(g_nData[6])*256 + (float)(g_nData[7]);
 8001384:	4b66      	ldr	r3, [pc, #408]	; (8001520 <main+0x560>)
 8001386:	799b      	ldrb	r3, [r3, #6]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001390:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001538 <main+0x578>
 8001394:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001398:	4b61      	ldr	r3, [pc, #388]	; (8001520 <main+0x560>)
 800139a:	79db      	ldrb	r3, [r3, #7]
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a8:	4b64      	ldr	r3, [pc, #400]	; (800153c <main+0x57c>)
 80013aa:	edc3 7a02 	vstr	s15, [r3, #8]
	  	  	          //Calculate params for trapezoidal speed
	  	  	          tProfile.dA1 = 0.5f * tProfile.dAccelMax;
 80013ae:	4b63      	ldr	r3, [pc, #396]	; (800153c <main+0x57c>)
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013bc:	4b5f      	ldr	r3, [pc, #380]	; (800153c <main+0x57c>)
 80013be:	edc3 7a03 	vstr	s15, [r3, #12]
	  	  	          tProfile.dA2 = tProfile.dVelMax;
 80013c2:	4b5e      	ldr	r3, [pc, #376]	; (800153c <main+0x57c>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4a5d      	ldr	r2, [pc, #372]	; (800153c <main+0x57c>)
 80013c8:	6113      	str	r3, [r2, #16]
	  	  	          tProfile.dB2 = -0.5f * tProfile.dVelMax * tProfile.dVelMax / tProfile.dAccelMax;
 80013ca:	4b5c      	ldr	r3, [pc, #368]	; (800153c <main+0x57c>)
 80013cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80013d0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80013d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013d8:	4b58      	ldr	r3, [pc, #352]	; (800153c <main+0x57c>)
 80013da:	edd3 7a01 	vldr	s15, [r3, #4]
 80013de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013e2:	4b56      	ldr	r3, [pc, #344]	; (800153c <main+0x57c>)
 80013e4:	ed93 7a00 	vldr	s14, [r3]
 80013e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <main+0x57c>)
 80013ee:	edc3 7a05 	vstr	s15, [r3, #20]
	  	  	          tProfile.dA3 = -0.5f * tProfile.dAccelMax;
 80013f2:	4b52      	ldr	r3, [pc, #328]	; (800153c <main+0x57c>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80013fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001400:	4b4e      	ldr	r3, [pc, #312]	; (800153c <main+0x57c>)
 8001402:	edc3 7a06 	vstr	s15, [r3, #24]
	  	  	          tProfile.dB3 = tProfile.dPosMax * tProfile.dAccelMax / tProfile.dVelMax + tProfile.dVelMax;
 8001406:	4b4d      	ldr	r3, [pc, #308]	; (800153c <main+0x57c>)
 8001408:	ed93 7a02 	vldr	s14, [r3, #8]
 800140c:	4b4b      	ldr	r3, [pc, #300]	; (800153c <main+0x57c>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <main+0x57c>)
 8001418:	edd3 7a01 	vldr	s15, [r3, #4]
 800141c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001420:	4b46      	ldr	r3, [pc, #280]	; (800153c <main+0x57c>)
 8001422:	edd3 7a01 	vldr	s15, [r3, #4]
 8001426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142a:	4b44      	ldr	r3, [pc, #272]	; (800153c <main+0x57c>)
 800142c:	edc3 7a07 	vstr	s15, [r3, #28]
	  	  	          tProfile.dC3 = -0.5f * tProfile.dPosMax*tProfile.dPosMax*tProfile.dAccelMax/ (tProfile.dVelMax * tProfile.dVelMax) - 0.5f *tProfile.dVelMax * tProfile.dVelMax/tProfile.dAccelMax;
 8001430:	4b42      	ldr	r3, [pc, #264]	; (800153c <main+0x57c>)
 8001432:	edd3 7a02 	vldr	s15, [r3, #8]
 8001436:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800143a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800143e:	4b3f      	ldr	r3, [pc, #252]	; (800153c <main+0x57c>)
 8001440:	edd3 7a02 	vldr	s15, [r3, #8]
 8001444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001448:	4b3c      	ldr	r3, [pc, #240]	; (800153c <main+0x57c>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001452:	4b3a      	ldr	r3, [pc, #232]	; (800153c <main+0x57c>)
 8001454:	ed93 7a01 	vldr	s14, [r3, #4]
 8001458:	4b38      	ldr	r3, [pc, #224]	; (800153c <main+0x57c>)
 800145a:	edd3 7a01 	vldr	s15, [r3, #4]
 800145e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001466:	4b35      	ldr	r3, [pc, #212]	; (800153c <main+0x57c>)
 8001468:	edd3 7a01 	vldr	s15, [r3, #4]
 800146c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001470:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001474:	4b31      	ldr	r3, [pc, #196]	; (800153c <main+0x57c>)
 8001476:	edd3 7a01 	vldr	s15, [r3, #4]
 800147a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <main+0x57c>)
 8001480:	edd3 6a00 	vldr	s13, [r3]
 8001484:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	4b2b      	ldr	r3, [pc, #172]	; (800153c <main+0x57c>)
 800148e:	edc3 7a08 	vstr	s15, [r3, #32]


	  	  	          tProfile.dMidStep1 = tProfile.dVelMax / tProfile.dAccelMax;
 8001492:	4b2a      	ldr	r3, [pc, #168]	; (800153c <main+0x57c>)
 8001494:	edd3 6a01 	vldr	s13, [r3, #4]
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <main+0x57c>)
 800149a:	ed93 7a00 	vldr	s14, [r3]
 800149e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <main+0x57c>)
 80014a4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	  	  	          tProfile.dMidStep2 = tProfile.dPosMax / tProfile.dVelMax;
 80014a8:	4b24      	ldr	r3, [pc, #144]	; (800153c <main+0x57c>)
 80014aa:	edd3 6a02 	vldr	s13, [r3, #8]
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <main+0x57c>)
 80014b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80014b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b8:	4b20      	ldr	r3, [pc, #128]	; (800153c <main+0x57c>)
 80014ba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	  	  	          tProfile.dMidStep3 = tProfile.dMidStep1 + tProfile.dMidStep2;
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <main+0x57c>)
 80014c0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <main+0x57c>)
 80014c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80014ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <main+0x57c>)
 80014d0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	  	  	          tProfile.nTime = 0;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <main+0x57c>)
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	631a      	str	r2, [r3, #48]	; 0x30
	  	  	          tProcess = NONE;
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <main+0x580>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
	  	  	          //memset(g_strCommand, '\0', 4);
	  	  	          break;
 80014e2:	e0ab      	b.n	800163c <main+0x67c>

	  	  	        case CRUN_RES:
	  	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <main+0x560>)
 80014e6:	490f      	ldr	r1, [pc, #60]	; (8001524 <main+0x564>)
 80014e8:	480f      	ldr	r0, [pc, #60]	; (8001528 <main+0x568>)
 80014ea:	f000 fd15 	bl	8001f18 <SerialWriteComm>
	  	  	          g_nCmdPulse = 0;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <main+0x574>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
	  	  	          PIDReset(&tPIDControl);
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <main+0x56c>)
 80014f6:	f000 fbfb 	bl	8001cf0 <PIDReset>
	  	  	          __HAL_TIM_SetCounter(&htim4, 32768);
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <main+0x584>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
	  	  	          g_nIndex = 0 ;
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <main+0x588>)
 8001506:	2200      	movs	r2, #0
 8001508:	801a      	strh	r2, [r3, #0]
	  	  	          tProcess = CRUN;
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <main+0x580>)
 800150c:	2207      	movs	r2, #7
 800150e:	701a      	strb	r2, [r3, #0]
	  	  	          //memset(g_strCommand, '\0', 4);
	  	  	          break;
 8001510:	e094      	b.n	800163c <main+0x67c>
	  	  	        case CRUN:
	  	  	          g_bDataAvailable = false;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <main+0x58c>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
	  	  	          //memset(g_strCommand, '\0', 4);
	  	  	          break;
 8001518:	e090      	b.n	800163c <main+0x67c>
	  	  	        case GRMS:
	  	  	          for(int index = 0 ; index < (g_nIndex - 1); index ++)
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	e07e      	b.n	800161e <main+0x65e>
 8001520:	20000b80 	.word	0x20000b80
 8001524:	20000b7c 	.word	0x20000b7c
 8001528:	20000b78 	.word	0x20000b78
 800152c:	200001a4 	.word	0x200001a4
 8001530:	20000b54 	.word	0x20000b54
 8001534:	20000b58 	.word	0x20000b58
 8001538:	43800000 	.word	0x43800000
 800153c:	20000b18 	.word	0x20000b18
 8001540:	200001a0 	.word	0x200001a0
 8001544:	20000c20 	.word	0x20000c20
 8001548:	20000b5c 	.word	0x20000b5c
 800154c:	20000b88 	.word	0x20000b88
	  	  	          {
	  	  	            sprintf((char*)g_strTxCommand, "%s", g_strCommand);
 8001550:	4a3b      	ldr	r2, [pc, #236]	; (8001640 <main+0x680>)
 8001552:	493c      	ldr	r1, [pc, #240]	; (8001644 <main+0x684>)
 8001554:	483c      	ldr	r0, [pc, #240]	; (8001648 <main+0x688>)
 8001556:	f009 ffef 	bl	800b538 <siprintf>
	  	  	            memset(g_nTxOption, '\0', 3);
 800155a:	2203      	movs	r2, #3
 800155c:	2100      	movs	r1, #0
 800155e:	483b      	ldr	r0, [pc, #236]	; (800164c <main+0x68c>)
 8001560:	f009 fef2 	bl	800b348 <memset>
	  	  	            g_nTxData[6] = (tPIDControl.nActPosSample[index]&0xFF00) >>8;
 8001564:	4a3a      	ldr	r2, [pc, #232]	; (8001650 <main+0x690>)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	33d0      	adds	r3, #208	; 0xd0
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	889b      	ldrh	r3, [r3, #4]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	b29b      	uxth	r3, r3
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4b37      	ldr	r3, [pc, #220]	; (8001654 <main+0x694>)
 8001578:	719a      	strb	r2, [r3, #6]
	  	  	            g_nTxData[7] = (tPIDControl.nActPosSample[index]&0xFF);
 800157a:	4a35      	ldr	r2, [pc, #212]	; (8001650 <main+0x690>)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	33d0      	adds	r3, #208	; 0xd0
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	889b      	ldrh	r3, [r3, #4]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b32      	ldr	r3, [pc, #200]	; (8001654 <main+0x694>)
 800158a:	71da      	strb	r2, [r3, #7]
	  	  	            g_nTxData[4] = ((uint16_t)g_dPIDError&0xFF00)>>8;
 800158c:	4b32      	ldr	r3, [pc, #200]	; (8001658 <main+0x698>)
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001596:	ee17 3a90 	vmov	r3, s15
 800159a:	b29b      	uxth	r3, r3
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	b29b      	uxth	r3, r3
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <main+0x694>)
 80015a4:	711a      	strb	r2, [r3, #4]
	  	  	            g_nTxData[5] = ((uint16_t)g_dPIDError&0xFF);
 80015a6:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <main+0x698>)
 80015a8:	edd3 7a00 	vldr	s15, [r3]
 80015ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015b0:	ee17 3a90 	vmov	r3, s15
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <main+0x694>)
 80015ba:	715a      	strb	r2, [r3, #5]
	  	  	            g_nTxData[2] = (index&0xFF00) >>8;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	121b      	asrs	r3, r3, #8
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <main+0x694>)
 80015c4:	709a      	strb	r2, [r3, #2]
	  	  	            g_nTxData[3] = (index&0xFF);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <main+0x694>)
 80015cc:	70da      	strb	r2, [r3, #3]
	  	  	            g_nTxData[0] = ((g_nIndex -2)&0xFF00)>>8;
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <main+0x69c>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	3b02      	subs	r3, #2
 80015d4:	121b      	asrs	r3, r3, #8
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <main+0x694>)
 80015da:	701a      	strb	r2, [r3, #0]
	  	  	            g_nTxData[1] = ((g_nIndex -2)&0xFF);
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <main+0x69c>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	3b02      	subs	r3, #2
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <main+0x694>)
 80015e8:	705a      	strb	r2, [r3, #1]

	  	  	            SerialWriteComm(g_strTxCommand, g_nTxOption, g_nTxData);
 80015ea:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <main+0x694>)
 80015ec:	4917      	ldr	r1, [pc, #92]	; (800164c <main+0x68c>)
 80015ee:	4816      	ldr	r0, [pc, #88]	; (8001648 <main+0x688>)
 80015f0:	f000 fc92 	bl	8001f18 <SerialWriteComm>
	  	  	            memset(g_strTxCommand, '\0', 4);
 80015f4:	2204      	movs	r2, #4
 80015f6:	2100      	movs	r1, #0
 80015f8:	4813      	ldr	r0, [pc, #76]	; (8001648 <main+0x688>)
 80015fa:	f009 fea5 	bl	800b348 <memset>
	  	  	            memset(g_nTxOption, '\0', 3);
 80015fe:	2203      	movs	r2, #3
 8001600:	2100      	movs	r1, #0
 8001602:	4812      	ldr	r0, [pc, #72]	; (800164c <main+0x68c>)
 8001604:	f009 fea0 	bl	800b348 <memset>
	  	  	            memset(g_nTxData, '\0', 8);
 8001608:	2208      	movs	r2, #8
 800160a:	2100      	movs	r1, #0
 800160c:	4811      	ldr	r0, [pc, #68]	; (8001654 <main+0x694>)
 800160e:	f009 fe9b 	bl	800b348 <memset>

	  	  	            HAL_Delay(30);
 8001612:	201e      	movs	r0, #30
 8001614:	f001 f8c6 	bl	80027a4 <HAL_Delay>
	  	  	          for(int index = 0 ; index < (g_nIndex - 1); index ++)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <main+0x69c>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	3b01      	subs	r3, #1
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	db92      	blt.n	8001550 <main+0x590>
	  	  	          }
	  	  	          g_bDataAvailable = false;
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <main+0x6a0>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
	  	  	          SerialAcceptReceive();
 8001630:	f000 fc64 	bl	8001efc <SerialAcceptReceive>
	  	  	          tProcess = NONE;
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <main+0x6a4>)
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
	  	  	          break;
 800163a:	bf00      	nop
	  if(g_bDataAvailable == true)
 800163c:	e4db      	b.n	8000ff6 <main+0x36>
 800163e:	bf00      	nop
 8001640:	20000b78 	.word	0x20000b78
 8001644:	0800ca98 	.word	0x0800ca98
 8001648:	20000190 	.word	0x20000190
 800164c:	20000194 	.word	0x20000194
 8001650:	200001a4 	.word	0x200001a4
 8001654:	20000198 	.word	0x20000198
 8001658:	20000b60 	.word	0x20000b60
 800165c:	20000b5c 	.word	0x20000b5c
 8001660:	20000b88 	.word	0x20000b88
 8001664:	200001a0 	.word	0x200001a0

08001668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b094      	sub	sp, #80	; 0x50
 800166c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166e:	f107 0320 	add.w	r3, r7, #32
 8001672:	2230      	movs	r2, #48	; 0x30
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f009 fe66 	bl	800b348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <SystemClock_Config+0xc8>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	4a26      	ldr	r2, [pc, #152]	; (8001730 <SystemClock_Config+0xc8>)
 8001696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169a:	6413      	str	r3, [r2, #64]	; 0x40
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <SystemClock_Config+0xc8>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <SystemClock_Config+0xcc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a20      	ldr	r2, [pc, #128]	; (8001734 <SystemClock_Config+0xcc>)
 80016b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <SystemClock_Config+0xcc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c4:	2301      	movs	r3, #1
 80016c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ce:	2302      	movs	r3, #2
 80016d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016d8:	2304      	movs	r3, #4
 80016da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016dc:	2348      	movs	r3, #72	; 0x48
 80016de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016e4:	2303      	movs	r3, #3
 80016e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e8:	f107 0320 	add.w	r3, r7, #32
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 fe53 	bl	8004398 <HAL_RCC_OscConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016f8:	f000 f85e 	bl	80017b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fc:	230f      	movs	r3, #15
 80016fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001700:	2302      	movs	r3, #2
 8001702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	2102      	movs	r1, #2
 8001718:	4618      	mov	r0, r3
 800171a:	f003 f8b5 	bl	8004888 <HAL_RCC_ClockConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001724:	f000 f848 	bl	80017b8 <Error_Handler>
  }
}
 8001728:	bf00      	nop
 800172a:	3750      	adds	r7, #80	; 0x50
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000

08001738 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == htim2.Instance)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d128      	bne.n	800179e <HAL_TIM_PeriodElapsedCallback+0x66>
  {
    switch(tProcess)
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	3b01      	subs	r3, #1
 8001752:	2b08      	cmp	r3, #8
 8001754:	d826      	bhi.n	80017a4 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001756:	a201      	add	r2, pc, #4	; (adr r2, 800175c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	080017a3 	.word	0x080017a3
 8001760:	080017a3 	.word	0x080017a3
 8001764:	08001781 	.word	0x08001781
 8001768:	080017a3 	.word	0x080017a3
 800176c:	080017a3 	.word	0x080017a3
 8001770:	080017a3 	.word	0x080017a3
 8001774:	08001799 	.word	0x08001799
 8001778:	080017a3 	.word	0x080017a3
 800177c:	080017a3 	.word	0x080017a3
      case SPID:
        break;
      case CTUN_RES:
        break;
      case CTUN:
        if(g_nIndex <= 200)
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	2bc8      	cmp	r3, #200	; 0xc8
 8001786:	d803      	bhi.n	8001790 <HAL_TIM_PeriodElapsedCallback+0x58>
        {
          MotorTuning(25);
 8001788:	2019      	movs	r0, #25
 800178a:	f000 fa39 	bl	8001c00 <MotorTuning>
        }
        else
        {
          tProcess = NONE;
        }
        break;
 800178e:	e009      	b.n	80017a4 <HAL_TIM_PeriodElapsedCallback+0x6c>
          tProcess = NONE;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
        break;
 8001796:	e005      	b.n	80017a4 <HAL_TIM_PeriodElapsedCallback+0x6c>
      case CSET:
        break;
	  case CRUN_RES:
		break;
      case CRUN:
        MotorMovePos();
 8001798:	f000 f8ce 	bl	8001938 <MotorMovePos>
        break;
 800179c:	e002      	b.n	80017a4 <HAL_TIM_PeriodElapsedCallback+0x6c>
      case GRMS:
		break;
    }
  }
 800179e:	bf00      	nop
 80017a0:	e000      	b.n	80017a4 <HAL_TIM_PeriodElapsedCallback+0x6c>
        break;
 80017a2:	bf00      	nop
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000b90 	.word	0x20000b90
 80017b0:	200001a0 	.word	0x200001a0
 80017b4:	20000b5c 	.word	0x20000b5c

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <Error_Handler+0x8>
	...

080017c4 <MotorSetDir>:
uint32_t g_nCmdPulse;
uint16_t g_nIndex =0 ;

//set motor's direction
void MotorSetDir(int8_t nDir)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
    switch(nDir)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <MotorSetDir+0x18>
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d007      	beq.n	80017ea <MotorSetDir+0x26>
            break;
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
            break;
        default:
            break;
 80017da:	e00d      	b.n	80017f8 <MotorSetDir+0x34>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <MotorSetDir+0x3c>)
 80017e4:	f001 fb42 	bl	8002e6c <HAL_GPIO_WritePin>
            break;
 80017e8:	e006      	b.n	80017f8 <MotorSetDir+0x34>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017f0:	4803      	ldr	r0, [pc, #12]	; (8001800 <MotorSetDir+0x3c>)
 80017f2:	f001 fb3b 	bl	8002e6c <HAL_GPIO_WritePin>
            break;
 80017f6:	bf00      	nop
    }
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40020400 	.word	0x40020400

08001804 <MotorSetDuty>:

//duty cycle of motor
void MotorSetDuty(uint16_t nDuty)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, nDuty);
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <MotorSetDuty+0x20>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	88fa      	ldrh	r2, [r7, #6]
 8001814:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000bd8 	.word	0x20000bd8

08001828 <MotorInit>:

//init params for timer interrupt...
void MotorInit(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim2);
 800182c:	480f      	ldr	r0, [pc, #60]	; (800186c <MotorInit+0x44>)
 800182e:	f003 fa9b 	bl	8004d68 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001832:	2100      	movs	r1, #0
 8001834:	480e      	ldr	r0, [pc, #56]	; (8001870 <MotorInit+0x48>)
 8001836:	f003 fb57 	bl	8004ee8 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 800183a:	2100      	movs	r1, #0
 800183c:	480d      	ldr	r0, [pc, #52]	; (8001874 <MotorInit+0x4c>)
 800183e:	f003 fcc1 	bl	80051c4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8001842:	2104      	movs	r1, #4
 8001844:	480b      	ldr	r0, [pc, #44]	; (8001874 <MotorInit+0x4c>)
 8001846:	f003 fcbd 	bl	80051c4 <HAL_TIM_Encoder_Start>

    PIDReset(&tPIDControl);
 800184a:	480b      	ldr	r0, [pc, #44]	; (8001878 <MotorInit+0x50>)
 800184c:	f000 fa50 	bl	8001cf0 <PIDReset>
    PIDInit(&tPIDControl, 1., 0., 0.00);
 8001850:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800187c <MotorInit+0x54>
 8001854:	eddf 0a09 	vldr	s1, [pc, #36]	; 800187c <MotorInit+0x54>
 8001858:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800185c:	4806      	ldr	r0, [pc, #24]	; (8001878 <MotorInit+0x50>)
 800185e:	f000 fa5f 	bl	8001d20 <PIDInit>
    MotorSetDir(0);
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff ffae 	bl	80017c4 <MotorSetDir>
    //MotorSetDuty(0);
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000b90 	.word	0x20000b90
 8001870:	20000bd8 	.word	0x20000bd8
 8001874:	20000c20 	.word	0x20000c20
 8001878:	200001a4 	.word	0x200001a4
 800187c:	00000000 	.word	0x00000000

08001880 <ConvertDegToPulse>:

uint16_t ConvertDegToPulse(uint16_t nDeg)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
    float dPulse = nDeg * 4 * 330 / 360;
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	4a0c      	ldr	r2, [pc, #48]	; (80018c8 <ConvertDegToPulse+0x48>)
 8001896:	fb82 1203 	smull	r1, r2, r2, r3
 800189a:	441a      	add	r2, r3
 800189c:	1212      	asrs	r2, r2, #8
 800189e:	17db      	asrs	r3, r3, #31
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	ee07 3a90 	vmov	s15, r3
 80018a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018aa:	edc7 7a03 	vstr	s15, [r7, #12]

    return (uint16_t) dPulse;
 80018ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80018b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b6:	ee17 3a90 	vmov	r3, s15
 80018ba:	b29b      	uxth	r3, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	b60b60b7 	.word	0xb60b60b7

080018cc <ConvertPulseToDeg>:

uint16_t ConvertPulseToDeg(uint16_t nPulse)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]
    float dDeg = nPulse * 360 / 4 / 330;
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	225a      	movs	r2, #90	; 0x5a
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <ConvertPulseToDeg+0x44>)
 80018e0:	fb82 1203 	smull	r1, r2, r2, r3
 80018e4:	11d2      	asrs	r2, r2, #7
 80018e6:	17db      	asrs	r3, r3, #31
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f2:	edc7 7a03 	vstr	s15, [r7, #12]
    return (uint16_t) dDeg;
 80018f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80018fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fe:	ee17 3a90 	vmov	r3, s15
 8001902:	b29b      	uxth	r3, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	634c0635 	.word	0x634c0635

08001914 <MotorGetPulse>:

void MotorGetPulse(uint32_t *nPulse)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    *nPulse = __HAL_TIM_GetCounter(&htim4);
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <MotorGetPulse+0x20>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	601a      	str	r2, [r3, #0]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000c20 	.word	0x20000c20

08001938 <MotorMovePos>:

void MotorMovePos()
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
    uint32_t nPulse;
    MotorGetPulse(&nPulse);
 800193e:	463b      	mov	r3, r7
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ffe7 	bl	8001914 <MotorGetPulse>
    g_nActPulse = nPulse - 32768;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800194c:	4aa2      	ldr	r2, [pc, #648]	; (8001bd8 <MotorMovePos+0x2a0>)
 800194e:	6013      	str	r3, [r2, #0]
    float dPosTemp = 0;
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	607b      	str	r3, [r7, #4]

    //Profile trapezoidal Speed
    if(tProfile.nTime <= tProfile.dMidStep1)
 8001956:	4ba1      	ldr	r3, [pc, #644]	; (8001bdc <MotorMovePos+0x2a4>)
 8001958:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800195c:	4b9f      	ldr	r3, [pc, #636]	; (8001bdc <MotorMovePos+0x2a4>)
 800195e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	d820      	bhi.n	80019ae <MotorMovePos+0x76>
    {
        dPosTemp = (int32_t)(tProfile.dA1 * tProfile.nTime * tProfile.nTime);
 800196c:	4b9b      	ldr	r3, [pc, #620]	; (8001bdc <MotorMovePos+0x2a4>)
 800196e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001972:	4b9a      	ldr	r3, [pc, #616]	; (8001bdc <MotorMovePos+0x2a4>)
 8001974:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197c:	4b97      	ldr	r3, [pc, #604]	; (8001bdc <MotorMovePos+0x2a4>)
 800197e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800198a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198e:	edc7 7a01 	vstr	s15, [r7, #4]
        g_dCmdVel = 2 * tProfile.dA1 * tProfile.nTime;
 8001992:	4b92      	ldr	r3, [pc, #584]	; (8001bdc <MotorMovePos+0x2a4>)
 8001994:	edd3 7a03 	vldr	s15, [r3, #12]
 8001998:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800199c:	4b8f      	ldr	r3, [pc, #572]	; (8001bdc <MotorMovePos+0x2a4>)
 800199e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a6:	4b8e      	ldr	r3, [pc, #568]	; (8001be0 <MotorMovePos+0x2a8>)
 80019a8:	edc3 7a00 	vstr	s15, [r3]
 80019ac:	e065      	b.n	8001a7a <MotorMovePos+0x142>
    }
    else if(tProfile.nTime <= tProfile.dMidStep2)
 80019ae:	4b8b      	ldr	r3, [pc, #556]	; (8001bdc <MotorMovePos+0x2a4>)
 80019b0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019b4:	4b89      	ldr	r3, [pc, #548]	; (8001bdc <MotorMovePos+0x2a4>)
 80019b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	d817      	bhi.n	80019f4 <MotorMovePos+0xbc>
    {
        dPosTemp = (int32_t)(tProfile.dA2 * tProfile.nTime + tProfile.dB2);
 80019c4:	4b85      	ldr	r3, [pc, #532]	; (8001bdc <MotorMovePos+0x2a4>)
 80019c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80019ca:	4b84      	ldr	r3, [pc, #528]	; (8001bdc <MotorMovePos+0x2a4>)
 80019cc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d4:	4b81      	ldr	r3, [pc, #516]	; (8001bdc <MotorMovePos+0x2a4>)
 80019d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80019da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e6:	edc7 7a01 	vstr	s15, [r7, #4]
        g_dCmdVel = tProfile.dA2;
 80019ea:	4b7c      	ldr	r3, [pc, #496]	; (8001bdc <MotorMovePos+0x2a4>)
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	4a7c      	ldr	r2, [pc, #496]	; (8001be0 <MotorMovePos+0x2a8>)
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e042      	b.n	8001a7a <MotorMovePos+0x142>
    }
    else if(tProfile.nTime <= tProfile.dMidStep3)
 80019f4:	4b79      	ldr	r3, [pc, #484]	; (8001bdc <MotorMovePos+0x2a4>)
 80019f6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019fa:	4b78      	ldr	r3, [pc, #480]	; (8001bdc <MotorMovePos+0x2a4>)
 80019fc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a08:	d834      	bhi.n	8001a74 <MotorMovePos+0x13c>
    {
        dPosTemp = (int32_t)(tProfile.dA3 * tProfile.nTime * tProfile.nTime + tProfile.dB3 * tProfile.nTime + tProfile.dC3);
 8001a0a:	4b74      	ldr	r3, [pc, #464]	; (8001bdc <MotorMovePos+0x2a4>)
 8001a0c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001a10:	4b72      	ldr	r3, [pc, #456]	; (8001bdc <MotorMovePos+0x2a4>)
 8001a12:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a1a:	4b70      	ldr	r3, [pc, #448]	; (8001bdc <MotorMovePos+0x2a4>)
 8001a1c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a24:	4b6d      	ldr	r3, [pc, #436]	; (8001bdc <MotorMovePos+0x2a4>)
 8001a26:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a2a:	4b6c      	ldr	r3, [pc, #432]	; (8001bdc <MotorMovePos+0x2a4>)
 8001a2c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a38:	4b68      	ldr	r3, [pc, #416]	; (8001bdc <MotorMovePos+0x2a4>)
 8001a3a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4a:	edc7 7a01 	vstr	s15, [r7, #4]
        g_dCmdVel = 2*tProfile.dA3 * tProfile.nTime + tProfile.dB3;
 8001a4e:	4b63      	ldr	r3, [pc, #396]	; (8001bdc <MotorMovePos+0x2a4>)
 8001a50:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a54:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a58:	4b60      	ldr	r3, [pc, #384]	; (8001bdc <MotorMovePos+0x2a4>)
 8001a5a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a62:	4b5e      	ldr	r3, [pc, #376]	; (8001bdc <MotorMovePos+0x2a4>)
 8001a64:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6c:	4b5c      	ldr	r3, [pc, #368]	; (8001be0 <MotorMovePos+0x2a8>)
 8001a6e:	edc3 7a00 	vstr	s15, [r3]
 8001a72:	e002      	b.n	8001a7a <MotorMovePos+0x142>
    }
    else
    {
        dPosTemp = tProfile.dPosMax;
 8001a74:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <MotorMovePos+0x2a4>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	607b      	str	r3, [r7, #4]
    }

    //Control PID
    g_nCmdPulse = ConvertDegToPulse(dPosTemp);
 8001a7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a82:	ee17 3a90 	vmov	r3, s15
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fef9 	bl	8001880 <ConvertDegToPulse>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b54      	ldr	r3, [pc, #336]	; (8001be4 <MotorMovePos+0x2ac>)
 8001a94:	601a      	str	r2, [r3, #0]
    g_nDutyCycle = (int16_t)PIDCompute(&tPIDControl, g_nCmdPulse, g_nActPulse, 0.01f);
 8001a96:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <MotorMovePos+0x2ac>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa2:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <MotorMovePos+0x2a0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	ee07 3a10 	vmov	s14, r3
 8001aaa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001aae:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8001be8 <MotorMovePos+0x2b0>
 8001ab2:	eef0 0a47 	vmov.f32	s1, s14
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	484c      	ldr	r0, [pc, #304]	; (8001bec <MotorMovePos+0x2b4>)
 8001abc:	f000 f952 	bl	8001d64 <PIDCompute>
 8001ac0:	eef0 7a40 	vmov.f32	s15, s0
 8001ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac8:	ee17 3a90 	vmov	r3, s15
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <MotorMovePos+0x2b8>)
 8001ad2:	601a      	str	r2, [r3, #0]
    if(g_nDutyCycle >= 0)
 8001ad4:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <MotorMovePos+0x2b8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0c      	blt.n	8001af6 <MotorMovePos+0x1be>
    {
        MotorSetDir(1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f7ff fe71 	bl	80017c4 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001ae2:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <MotorMovePos+0x2b8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bfb8      	it	lt
 8001aea:	425b      	neglt	r3, r3
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fe88 	bl	8001804 <MotorSetDuty>
 8001af4:	e00f      	b.n	8001b16 <MotorMovePos+0x1de>
    }
    else if(g_nDutyCycle < 0)
 8001af6:	4b3e      	ldr	r3, [pc, #248]	; (8001bf0 <MotorMovePos+0x2b8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	da0b      	bge.n	8001b16 <MotorMovePos+0x1de>
    {
        MotorSetDir(0);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fe60 	bl	80017c4 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <MotorMovePos+0x2b8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bfb8      	it	lt
 8001b0c:	425b      	neglt	r3, r3
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fe77 	bl	8001804 <MotorSetDuty>
    }

    if (tProfile.nTime > tProfile.dMidStep3)
 8001b16:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <MotorMovePos+0x2a4>)
 8001b18:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <MotorMovePos+0x2a4>)
 8001b1e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001b22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	dd1f      	ble.n	8001b6c <MotorMovePos+0x234>
    {
        __HAL_TIM_SetCounter(&htim4, 32768);
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <MotorMovePos+0x2bc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
        dPosTemp = 0;
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
        g_nDutyCycle = 0;
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <MotorMovePos+0x2b8>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
        g_dCmdVel = 0;
 8001b42:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <MotorMovePos+0x2a8>)
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
        tProfile.nTime = 0;
 8001b4a:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <MotorMovePos+0x2a4>)
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
        tProcess = NONE;
 8001b52:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <MotorMovePos+0x2c0>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
        MotorSetDuty(abs(g_nDutyCycle));
 8001b58:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <MotorMovePos+0x2b8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bfb8      	it	lt
 8001b60:	425b      	neglt	r3, r3
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fe4d 	bl	8001804 <MotorSetDuty>
 8001b6a:	e017      	b.n	8001b9c <MotorMovePos+0x264>
    }
    else
    {
        tPIDControl.nActPosSample[g_nIndex] = ConvertPulseToDeg(g_nActPulse);
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MotorMovePos+0x2a0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <MotorMovePos+0x2c4>)
 8001b74:	8812      	ldrh	r2, [r2, #0]
 8001b76:	4614      	mov	r4, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fea7 	bl	80018cc <ConvertPulseToDeg>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4619      	mov	r1, r3
 8001b82:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <MotorMovePos+0x2b4>)
 8001b84:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	809a      	strh	r2, [r3, #4]
        g_nIndex ++;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MotorMovePos+0x2c4>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <MotorMovePos+0x2c4>)
 8001b9a:	801a      	strh	r2, [r3, #0]
    }

    tProfile.nTime += 0.01;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <MotorMovePos+0x2a4>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcd1 	bl	8000548 <__aeabi_f2d>
 8001ba6:	a30a      	add	r3, pc, #40	; (adr r3, 8001bd0 <MotorMovePos+0x298>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe fb6e 	bl	800028c <__adddf3>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7fe ffce 	bl	8000b58 <__aeabi_d2f>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <MotorMovePos+0x2a4>)
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	47ae147b 	.word	0x47ae147b
 8001bd4:	3f847ae1 	.word	0x3f847ae1
 8001bd8:	20000b54 	.word	0x20000b54
 8001bdc:	20000b18 	.word	0x20000b18
 8001be0:	20000b50 	.word	0x20000b50
 8001be4:	20000b58 	.word	0x20000b58
 8001be8:	3c23d70a 	.word	0x3c23d70a
 8001bec:	200001a4 	.word	0x200001a4
 8001bf0:	20000b4c 	.word	0x20000b4c
 8001bf4:	20000c20 	.word	0x20000c20
 8001bf8:	200001a0 	.word	0x200001a0
 8001bfc:	20000b5c 	.word	0x20000b5c

08001c00 <MotorTuning>:

void MotorTuning(uint16_t nPos)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
    uint32_t nPulse;
    MotorGetPulse(&nPulse);
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fe80 	bl	8001914 <MotorGetPulse>
    g_nActPulse = nPulse - 32768;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001c1a:	4a2f      	ldr	r2, [pc, #188]	; (8001cd8 <MotorTuning+0xd8>)
 8001c1c:	6013      	str	r3, [r2, #0]

    g_nCmdPulse = ConvertDegToPulse(nPos);
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fe2d 	bl	8001880 <ConvertDegToPulse>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <MotorTuning+0xdc>)
 8001c2c:	601a      	str	r2, [r3, #0]
    g_nDutyCycle = (int16_t)PIDCompute(&tPIDControl, g_nCmdPulse, g_nActPulse, 0.01f);
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <MotorTuning+0xdc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <MotorTuning+0xd8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	ee07 3a10 	vmov	s14, r3
 8001c42:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001c46:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001ce0 <MotorTuning+0xe0>
 8001c4a:	eef0 0a47 	vmov.f32	s1, s14
 8001c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c52:	4824      	ldr	r0, [pc, #144]	; (8001ce4 <MotorTuning+0xe4>)
 8001c54:	f000 f886 	bl	8001d64 <PIDCompute>
 8001c58:	eef0 7a40 	vmov.f32	s15, s0
 8001c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c60:	ee17 3a90 	vmov	r3, s15
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <MotorTuning+0xe8>)
 8001c6a:	601a      	str	r2, [r3, #0]
    if(g_nDutyCycle >= 0)
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <MotorTuning+0xe8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	db0c      	blt.n	8001c8e <MotorTuning+0x8e>
    {
        MotorSetDir(1);
 8001c74:	2001      	movs	r0, #1
 8001c76:	f7ff fda5 	bl	80017c4 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <MotorTuning+0xe8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bfb8      	it	lt
 8001c82:	425b      	neglt	r3, r3
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fdbc 	bl	8001804 <MotorSetDuty>
 8001c8c:	e00f      	b.n	8001cae <MotorTuning+0xae>
    }
    else if(g_nDutyCycle < 0)
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <MotorTuning+0xe8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	da0b      	bge.n	8001cae <MotorTuning+0xae>
    {
        MotorSetDir(0);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff fd94 	bl	80017c4 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <MotorTuning+0xe8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bfb8      	it	lt
 8001ca4:	425b      	neglt	r3, r3
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fdab 	bl	8001804 <MotorSetDuty>
    }

    //Store Data

    tPIDControl.nSampleTuningPID[g_nIndex] = g_nActPulse;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <MotorTuning+0xd8>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MotorTuning+0xec>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	b291      	uxth	r1, r2
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <MotorTuning+0xe4>)
 8001cba:	3308      	adds	r3, #8
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	809a      	strh	r2, [r3, #4]
    g_nIndex++;
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MotorTuning+0xec>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <MotorTuning+0xec>)
 8001cce:	801a      	strh	r2, [r3, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000b54 	.word	0x20000b54
 8001cdc:	20000b58 	.word	0x20000b58
 8001ce0:	3c23d70a 	.word	0x3c23d70a
 8001ce4:	200001a4 	.word	0x200001a4
 8001ce8:	20000b4c 	.word	0x20000b4c
 8001cec:	20000b5c 	.word	0x20000b5c

08001cf0 <PIDReset>:

float g_dPIDError = 0;

//reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
    g_dPIDError = 0;
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <PIDReset+0x2c>)
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	20000b60 	.word	0x20000b60

08001d20 <PIDInit>:

//init PID
void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d2c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d30:	ed87 1a00 	vstr	s2, [r7]
    PIDReset(PID_Ctrl);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f7ff ffdb 	bl	8001cf0 <PIDReset>
    PID_Ctrl->dKp = dKp;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	601a      	str	r2, [r3, #0]
    PID_Ctrl->dKi = dKi;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	605a      	str	r2, [r3, #4]
    PID_Ctrl->dKd = dKd;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	609a      	str	r2, [r3, #8]
    __HAL_TIM_SetCounter(&htim4, 32768);
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <PIDInit+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000c20 	.word	0x20000c20

08001d64 <PIDCompute>:
    PID_Ctrl->dKd = dKd;
}

//Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float dCmdValue, float dActValue, float dTs)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d70:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d74:	ed87 1a00 	vstr	s2, [r7]
    float dPIDResult;
    g_dPIDError = dCmdValue - dActValue;
 8001d78:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d84:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <PIDCompute+0xe0>)
 8001d86:	edc3 7a00 	vstr	s15, [r3]
    float dP = 0, dI = 0, dD = 0;
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

    dP = PID_Ctrl -> dKp *g_dPIDError;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	ed93 7a00 	vldr	s14, [r3]
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <PIDCompute+0xe0>)
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dac:	edc7 7a07 	vstr	s15, [r7, #28]
    PID_Ctrl -> dIntergral += g_dPIDError;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	ed93 7a04 	vldr	s14, [r3, #16]
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <PIDCompute+0xe0>)
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	edc3 7a04 	vstr	s15, [r3, #16]
    dI = PID_Ctrl->dKi * dTs/2 * PID_Ctrl->dIntergral;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dcc:	edd7 7a00 	vldr	s15, [r7]
 8001dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001dd8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	edd3 7a04 	vldr	s15, [r3, #16]
 8001de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de6:	edc7 7a06 	vstr	s15, [r7, #24]
    dD = PID_Ctrl->dKd * (g_dPIDError - PID_Ctrl->dErrorTerm) /dTs;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	ed93 7a02 	vldr	s14, [r3, #8]
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <PIDCompute+0xe0>)
 8001df2:	edd3 6a00 	vldr	s13, [r3]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dfc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e00:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e04:	ed97 7a00 	vldr	s14, [r7]
 8001e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e0c:	edc7 7a05 	vstr	s15, [r7, #20]
    dPIDResult = dP + dI + dD;
 8001e10:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e14:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e24:	edc7 7a04 	vstr	s15, [r7, #16]
    PID_Ctrl->dErrorTerm = g_dPIDError;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <PIDCompute+0xe0>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	60da      	str	r2, [r3, #12]

    return dPIDResult;
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	ee07 3a90 	vmov	s15, r3
}
 8001e36:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3a:	3724      	adds	r7, #36	; 0x24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	20000b60 	.word	0x20000b60

08001e48 <subString>:
uint8_t ACK[] = {0x06U};
uint8_t SYN[] = {0x16U};

//cut the string
uint8_t *subString(uint8_t *pBuff, int nPos, int nIndex)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
    uint8_t *t = &pBuff[nPos];
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4413      	add	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
    pBuff[nPos -1] = '\0';
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
    for(int i = nIndex; i <(strlen((char*)t) + 1); i++)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e007      	b.n	8001e7e <subString+0x36>
    {
        t[i] = '\0';
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
    for(int i = nIndex; i <(strlen((char*)t) + 1); i++)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	6938      	ldr	r0, [r7, #16]
 8001e80:	f7fe f9a6 	bl	80001d0 <strlen>
 8001e84:	4603      	mov	r3, r0
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d8ef      	bhi.n	8001e6e <subString+0x26>
    }
    return t;
 8001e8e:	693b      	ldr	r3, [r7, #16]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <StrCompare>:


//Compare 2 string
bool StrCompare(uint8_t *pBuff, uint8_t *pSample, uint8_t nSize)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < nSize; i++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	e00e      	b.n	8001eca <StrCompare+0x32>
    {
        if(pBuff[i] != pSample[i])
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	440b      	add	r3, r1
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <StrCompare+0x2c>
        {
            return false;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e007      	b.n	8001ed4 <StrCompare+0x3c>
    for (int i = 0; i < nSize; i++)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbec      	blt.n	8001eac <StrCompare+0x14>
        }
    }
    return true;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <SerialInit>:


//receive data
void SerialInit(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)g_nRxBuff, MAX_LEN);
 8001ee4:	2212      	movs	r2, #18
 8001ee6:	4903      	ldr	r1, [pc, #12]	; (8001ef4 <SerialInit+0x14>)
 8001ee8:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <SerialInit+0x18>)
 8001eea:	f004 f932 	bl	8006152 <HAL_UART_Receive_IT>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000b64 	.word	0x20000b64
 8001ef8:	20000c68 	.word	0x20000c68

08001efc <SerialAcceptReceive>:

//receive data
void SerialAcceptReceive(void)
{	HAL_UART_Receive_IT(&huart1, (uint8_t*)g_nRxBuff, MAX_LEN);
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	2212      	movs	r2, #18
 8001f02:	4903      	ldr	r1, [pc, #12]	; (8001f10 <SerialAcceptReceive+0x14>)
 8001f04:	4803      	ldr	r0, [pc, #12]	; (8001f14 <SerialAcceptReceive+0x18>)
 8001f06:	f004 f924 	bl	8006152 <HAL_UART_Receive_IT>
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000b64 	.word	0x20000b64
 8001f14:	20000c68 	.word	0x20000c68

08001f18 <SerialWriteComm>:

//send data to GUI
void SerialWriteComm(uint8_t *pStrCmd, uint8_t *pOpt, uint8_t *pData)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
    uint8_t *pBuff;
    pBuff = (uint8_t *)malloc(18);
 8001f24:	2012      	movs	r0, #18
 8001f26:	f009 f9f1 	bl	800b30c <malloc>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	617b      	str	r3, [r7, #20]
    uint8_t nIndex = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	74fb      	strb	r3, [r7, #19]

    memcpy(pBuff + nIndex, STX, 1);
 8001f32:	7cfb      	ldrb	r3, [r7, #19]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <SerialWriteComm+0xa4>)
 8001f3a:	7812      	ldrb	r2, [r2, #0]
 8001f3c:	701a      	strb	r2, [r3, #0]
    nIndex += 1;
 8001f3e:	7cfb      	ldrb	r3, [r7, #19]
 8001f40:	3301      	adds	r3, #1
 8001f42:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pStrCmd, 4);
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4413      	add	r3, r2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	601a      	str	r2, [r3, #0]
    nIndex += 4;
 8001f50:	7cfb      	ldrb	r3, [r7, #19]
 8001f52:	3304      	adds	r3, #4
 8001f54:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pOpt, 3);
 8001f56:	7cfb      	ldrb	r3, [r7, #19]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f009 f9e3 	bl	800b32c <memcpy>
    nIndex += 3;
 8001f66:	7cfb      	ldrb	r3, [r7, #19]
 8001f68:	3303      	adds	r3, #3
 8001f6a:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pData, 8);
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4413      	add	r3, r2
 8001f72:	2208      	movs	r2, #8
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f009 f9d8 	bl	800b32c <memcpy>
    nIndex += 8;
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	3308      	adds	r3, #8
 8001f80:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, ACK, 1);
 8001f82:	7cfb      	ldrb	r3, [r7, #19]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4413      	add	r3, r2
 8001f88:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <SerialWriteComm+0xa8>)
 8001f8a:	7812      	ldrb	r2, [r2, #0]
 8001f8c:	701a      	strb	r2, [r3, #0]
    nIndex += 1;
 8001f8e:	7cfb      	ldrb	r3, [r7, #19]
 8001f90:	3301      	adds	r3, #1
 8001f92:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, ETX, 1);
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <SerialWriteComm+0xac>)
 8001f9c:	7812      	ldrb	r2, [r2, #0]
 8001f9e:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart1, pBuff, MAX_LEN, 1000);
 8001fa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa4:	2212      	movs	r2, #18
 8001fa6:	6979      	ldr	r1, [r7, #20]
 8001fa8:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <SerialWriteComm+0xb0>)
 8001faa:	f004 f840 	bl	800602e <HAL_UART_Transmit>

    free(pBuff);
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f009 f9b4 	bl	800b31c <free>

}
 8001fb4:	bf00      	nop
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	20000004 	.word	0x20000004
 8001fc8:	20000c68 	.word	0x20000c68

08001fcc <SerialParse>:

//parse data to Command, Option, Data
void SerialParse(uint8_t *pBuff)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
    if((pBuff[0] == STX[0] && (pBuff[17] == ETX[0])))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	781a      	ldrb	r2, [r3, #0]
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <SerialParse+0x68>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d125      	bne.n	800202c <SerialParse+0x60>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3311      	adds	r3, #17
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <SerialParse+0x6c>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d11e      	bne.n	800202c <SerialParse+0x60>
  {
    memcpy(g_strCommand, subString(g_nRxBuff, 1,4), 4);
 8001fee:	2204      	movs	r2, #4
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4812      	ldr	r0, [pc, #72]	; (800203c <SerialParse+0x70>)
 8001ff4:	f7ff ff28 	bl	8001e48 <subString>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <SerialParse+0x74>)
 8002000:	601a      	str	r2, [r3, #0]
    memcpy(g_nOption, subString(g_nRxBuff, 5,3), 3);
 8002002:	2203      	movs	r2, #3
 8002004:	2105      	movs	r1, #5
 8002006:	480d      	ldr	r0, [pc, #52]	; (800203c <SerialParse+0x70>)
 8002008:	f7ff ff1e 	bl	8001e48 <subString>
 800200c:	4602      	mov	r2, r0
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <SerialParse+0x78>)
 8002010:	8811      	ldrh	r1, [r2, #0]
 8002012:	7892      	ldrb	r2, [r2, #2]
 8002014:	8019      	strh	r1, [r3, #0]
 8002016:	709a      	strb	r2, [r3, #2]
    memcpy(g_nData, subString(g_nRxBuff, 8,8), 8);
 8002018:	2208      	movs	r2, #8
 800201a:	2108      	movs	r1, #8
 800201c:	4807      	ldr	r0, [pc, #28]	; (800203c <SerialParse+0x70>)
 800201e:	f7ff ff13 	bl	8001e48 <subString>
 8002022:	4602      	mov	r2, r0
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <SerialParse+0x7c>)
 8002026:	6810      	ldr	r0, [r2, #0]
 8002028:	6851      	ldr	r1, [r2, #4]
 800202a:	c303      	stmia	r3!, {r0, r1}
  }
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004
 800203c:	20000b64 	.word	0x20000b64
 8002040:	20000b78 	.word	0x20000b78
 8002044:	20000b7c 	.word	0x20000b7c
 8002048:	20000b80 	.word	0x20000b80

0800204c <HAL_UART_RxCpltCallback>:

//interupt uart RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
    if(huart ->Instance == huart1.Instance)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_UART_RxCpltCallback+0x28>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d105      	bne.n	800206c <HAL_UART_RxCpltCallback+0x20>
  {
    g_bDataAvailable = true;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_UART_RxCpltCallback+0x2c>)
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
    SerialParse(g_nRxBuff);
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <HAL_UART_RxCpltCallback+0x30>)
 8002068:	f7ff ffb0 	bl	8001fcc <SerialParse>
  }
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000c68 	.word	0x20000c68
 8002078:	20000b88 	.word	0x20000b88
 800207c:	20000b64 	.word	0x20000b64

08002080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_MspInit+0x4c>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <HAL_MspInit+0x4c>)
 8002090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_MspInit+0x4c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_MspInit+0x4c>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_MspInit+0x4c>)
 80020ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_MspInit+0x4c>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800

080020d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <NMI_Handler+0x4>

080020d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020da:	e7fe      	b.n	80020da <HardFault_Handler+0x4>

080020dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <MemManage_Handler+0x4>

080020e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <BusFault_Handler+0x4>

080020e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <UsageFault_Handler+0x4>

080020ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800211c:	f000 fb22 	bl	8002764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}

08002124 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <TIM2_IRQHandler+0x10>)
 800212a:	f003 f8d9 	bl	80052e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000b90 	.word	0x20000b90

08002138 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <USART1_IRQHandler+0x10>)
 800213e:	f004 f839 	bl	80061b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000c68 	.word	0x20000c68

0800214c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <OTG_FS_IRQHandler+0x10>)
 8002152:	f000 fff4 	bl	800313e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20001210 	.word	0x20001210

08002160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <_sbrk+0x5c>)
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <_sbrk+0x60>)
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <_sbrk+0x64>)
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <_sbrk+0x68>)
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	429a      	cmp	r2, r3
 800218e:	d207      	bcs.n	80021a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002190:	f009 f892 	bl	800b2b8 <__errno>
 8002194:	4603      	mov	r3, r0
 8002196:	220c      	movs	r2, #12
 8002198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800219e:	e009      	b.n	80021b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <_sbrk+0x64>)
 80021b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20020000 	.word	0x20020000
 80021c0:	00000400 	.word	0x00000400
 80021c4:	20000b8c 	.word	0x20000b8c
 80021c8:	20001950 	.word	0x20001950

080021cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f6:	f107 0308 	add.w	r3, r7, #8
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002204:	463b      	mov	r3, r7
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <MX_TIM2_Init+0x94>)
 800220e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002212:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <MX_TIM2_Init+0x94>)
 8002216:	2263      	movs	r2, #99	; 0x63
 8002218:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <MX_TIM2_Init+0x94>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <MX_TIM2_Init+0x94>)
 8002222:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002226:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <MX_TIM2_Init+0x94>)
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <MX_TIM2_Init+0x94>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002234:	4813      	ldr	r0, [pc, #76]	; (8002284 <MX_TIM2_Init+0x94>)
 8002236:	f002 fd47 	bl	8004cc8 <HAL_TIM_Base_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002240:	f7ff faba 	bl	80017b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800224a:	f107 0308 	add.w	r3, r7, #8
 800224e:	4619      	mov	r1, r3
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <MX_TIM2_Init+0x94>)
 8002252:	f003 fa0f 	bl	8005674 <HAL_TIM_ConfigClockSource>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800225c:	f7ff faac 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002268:	463b      	mov	r3, r7
 800226a:	4619      	mov	r1, r3
 800226c:	4805      	ldr	r0, [pc, #20]	; (8002284 <MX_TIM2_Init+0x94>)
 800226e:	f003 fe01 	bl	8005e74 <HAL_TIMEx_MasterConfigSynchronization>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002278:	f7ff fa9e 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800227c:	bf00      	nop
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000b90 	.word	0x20000b90

08002288 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228e:	f107 0320 	add.w	r3, r7, #32
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	615a      	str	r2, [r3, #20]
 80022a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <MX_TIM3_Init+0xac>)
 80022ac:	4a22      	ldr	r2, [pc, #136]	; (8002338 <MX_TIM3_Init+0xb0>)
 80022ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <MX_TIM3_Init+0xac>)
 80022b2:	2209      	movs	r2, #9
 80022b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <MX_TIM3_Init+0xac>)
 80022b8:	2260      	movs	r2, #96	; 0x60
 80022ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <MX_TIM3_Init+0xac>)
 80022be:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80022c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <MX_TIM3_Init+0xac>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <MX_TIM3_Init+0xac>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022d0:	4818      	ldr	r0, [pc, #96]	; (8002334 <MX_TIM3_Init+0xac>)
 80022d2:	f002 fdb9 	bl	8004e48 <HAL_TIM_PWM_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80022dc:	f7ff fa6c 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022e8:	f107 0320 	add.w	r3, r7, #32
 80022ec:	4619      	mov	r1, r3
 80022ee:	4811      	ldr	r0, [pc, #68]	; (8002334 <MX_TIM3_Init+0xac>)
 80022f0:	f003 fdc0 	bl	8005e74 <HAL_TIMEx_MasterConfigSynchronization>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80022fa:	f7ff fa5d 	bl	80017b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fe:	2360      	movs	r3, #96	; 0x60
 8002300:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	2200      	movs	r2, #0
 8002312:	4619      	mov	r1, r3
 8002314:	4807      	ldr	r0, [pc, #28]	; (8002334 <MX_TIM3_Init+0xac>)
 8002316:	f003 f8eb 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002320:	f7ff fa4a 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002324:	4803      	ldr	r0, [pc, #12]	; (8002334 <MX_TIM3_Init+0xac>)
 8002326:	f000 f8ed 	bl	8002504 <HAL_TIM_MspPostInit>

}
 800232a:	bf00      	nop
 800232c:	3728      	adds	r7, #40	; 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000bd8 	.word	0x20000bd8
 8002338:	40000400 	.word	0x40000400

0800233c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	; 0x30
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002342:	f107 030c 	add.w	r3, r7, #12
 8002346:	2224      	movs	r2, #36	; 0x24
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f008 fffc 	bl	800b348 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <MX_TIM4_Init+0xa0>)
 800235a:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <MX_TIM4_Init+0xa4>)
 800235c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800235e:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <MX_TIM4_Init+0xa0>)
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <MX_TIM4_Init+0xa0>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <MX_TIM4_Init+0xa0>)
 800236c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002370:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002372:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <MX_TIM4_Init+0xa0>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <MX_TIM4_Init+0xa0>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800237e:	2303      	movs	r3, #3
 8002380:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002386:	2301      	movs	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002396:	2301      	movs	r3, #1
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800239a:	2300      	movs	r3, #0
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	4619      	mov	r1, r3
 80023a8:	480c      	ldr	r0, [pc, #48]	; (80023dc <MX_TIM4_Init+0xa0>)
 80023aa:	f002 fe65 	bl	8005078 <HAL_TIM_Encoder_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80023b4:	f7ff fa00 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	4619      	mov	r1, r3
 80023c4:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_TIM4_Init+0xa0>)
 80023c6:	f003 fd55 	bl	8005e74 <HAL_TIMEx_MasterConfigSynchronization>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80023d0:	f7ff f9f2 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80023d4:	bf00      	nop
 80023d6:	3730      	adds	r7, #48	; 0x30
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000c20 	.word	0x20000c20
 80023e0:	40000800 	.word	0x40000800

080023e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f4:	d115      	bne.n	8002422 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <HAL_TIM_Base_MspInit+0x48>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <HAL_TIM_Base_MspInit+0x48>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_TIM_Base_MspInit+0x48>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	201c      	movs	r0, #28
 8002418:	f000 fac3 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800241c:	201c      	movs	r0, #28
 800241e:	f000 fadc 	bl	80029da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800

08002430 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0b      	ldr	r2, [pc, #44]	; (800246c <HAL_TIM_PWM_MspInit+0x3c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10d      	bne.n	800245e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_TIM_PWM_MspInit+0x40>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_TIM_PWM_MspInit+0x40>)
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <HAL_TIM_PWM_MspInit+0x40>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40000400 	.word	0x40000400
 8002470:	40023800 	.word	0x40023800

08002474 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a19      	ldr	r2, [pc, #100]	; (80024f8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12c      	bne.n	80024f0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <HAL_TIM_Encoder_MspInit+0x88>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a17      	ldr	r2, [pc, #92]	; (80024fc <HAL_TIM_Encoder_MspInit+0x88>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <HAL_TIM_Encoder_MspInit+0x88>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_TIM_Encoder_MspInit+0x88>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_TIM_Encoder_MspInit+0x88>)
 80024bc:	f043 0308 	orr.w	r3, r3, #8
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_TIM_Encoder_MspInit+0x88>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80024ce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80024d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024e0:	2302      	movs	r3, #2
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <HAL_TIM_Encoder_MspInit+0x8c>)
 80024ec:	f000 fb22 	bl	8002b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80024f0:	bf00      	nop
 80024f2:	3728      	adds	r7, #40	; 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40000800 	.word	0x40000800
 80024fc:	40023800 	.word	0x40023800
 8002500:	40020c00 	.word	0x40020c00

08002504 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a12      	ldr	r2, [pc, #72]	; (800256c <HAL_TIM_MspPostInit+0x68>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d11d      	bne.n	8002562 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_TIM_MspPostInit+0x6c>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a10      	ldr	r2, [pc, #64]	; (8002570 <HAL_TIM_MspPostInit+0x6c>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_TIM_MspPostInit+0x6c>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002542:	2340      	movs	r3, #64	; 0x40
 8002544:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002552:	2302      	movs	r3, #2
 8002554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	4619      	mov	r1, r3
 800255c:	4805      	ldr	r0, [pc, #20]	; (8002574 <HAL_TIM_MspPostInit+0x70>)
 800255e:	f000 fae9 	bl	8002b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002562:	bf00      	nop
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40000400 	.word	0x40000400
 8002570:	40023800 	.word	0x40023800
 8002574:	40020000 	.word	0x40020000

08002578 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <MX_USART1_UART_Init+0x4c>)
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <MX_USART1_UART_Init+0x50>)
 8002580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <MX_USART1_UART_Init+0x4c>)
 8002584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <MX_USART1_UART_Init+0x4c>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <MX_USART1_UART_Init+0x4c>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <MX_USART1_UART_Init+0x4c>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <MX_USART1_UART_Init+0x4c>)
 800259e:	220c      	movs	r2, #12
 80025a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <MX_USART1_UART_Init+0x4c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <MX_USART1_UART_Init+0x4c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_USART1_UART_Init+0x4c>)
 80025b0:	f003 fcf0 	bl	8005f94 <HAL_UART_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025ba:	f7ff f8fd 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000c68 	.word	0x20000c68
 80025c8:	40011000 	.word	0x40011000

080025cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1d      	ldr	r2, [pc, #116]	; (8002660 <HAL_UART_MspInit+0x94>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d133      	bne.n	8002656 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <HAL_UART_MspInit+0x98>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <HAL_UART_MspInit+0x98>)
 80025f8:	f043 0310 	orr.w	r3, r3, #16
 80025fc:	6453      	str	r3, [r2, #68]	; 0x44
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_UART_MspInit+0x98>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_UART_MspInit+0x98>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4a14      	ldr	r2, [pc, #80]	; (8002664 <HAL_UART_MspInit+0x98>)
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_UART_MspInit+0x98>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002626:	23c0      	movs	r3, #192	; 0xc0
 8002628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002632:	2303      	movs	r3, #3
 8002634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002636:	2307      	movs	r3, #7
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	4619      	mov	r1, r3
 8002640:	4809      	ldr	r0, [pc, #36]	; (8002668 <HAL_UART_MspInit+0x9c>)
 8002642:	f000 fa77 	bl	8002b34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	2025      	movs	r0, #37	; 0x25
 800264c:	f000 f9a9 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002650:	2025      	movs	r0, #37	; 0x25
 8002652:	f000 f9c2 	bl	80029da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002656:	bf00      	nop
 8002658:	3728      	adds	r7, #40	; 0x28
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40011000 	.word	0x40011000
 8002664:	40023800 	.word	0x40023800
 8002668:	40020400 	.word	0x40020400

0800266c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800266c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002670:	480d      	ldr	r0, [pc, #52]	; (80026a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002672:	490e      	ldr	r1, [pc, #56]	; (80026ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002674:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002678:	e002      	b.n	8002680 <LoopCopyDataInit>

0800267a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800267c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267e:	3304      	adds	r3, #4

08002680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002684:	d3f9      	bcc.n	800267a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002686:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002688:	4c0b      	ldr	r4, [pc, #44]	; (80026b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800268c:	e001      	b.n	8002692 <LoopFillZerobss>

0800268e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002690:	3204      	adds	r2, #4

08002692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002694:	d3fb      	bcc.n	800268e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002696:	f7ff fd99 	bl	80021cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800269a:	f008 fe13 	bl	800b2c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800269e:	f7fe fc8f 	bl	8000fc0 <main>
  bx  lr    
 80026a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ac:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80026b0:	0800cb70 	.word	0x0800cb70
  ldr r2, =_sbss
 80026b4:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 80026b8:	2000194c 	.word	0x2000194c

080026bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC_IRQHandler>
	...

080026c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <HAL_Init+0x40>)
 80026ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <HAL_Init+0x40>)
 80026d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <HAL_Init+0x40>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a07      	ldr	r2, [pc, #28]	; (8002700 <HAL_Init+0x40>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e8:	2003      	movs	r0, #3
 80026ea:	f000 f94f 	bl	800298c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ee:	200f      	movs	r0, #15
 80026f0:	f000 f808 	bl	8002704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026f4:	f7ff fcc4 	bl	8002080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023c00 	.word	0x40023c00

08002704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_InitTick+0x54>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_InitTick+0x58>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800271a:	fbb3 f3f1 	udiv	r3, r3, r1
 800271e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f967 	bl	80029f6 <HAL_SYSTICK_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e00e      	b.n	8002750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b0f      	cmp	r3, #15
 8002736:	d80a      	bhi.n	800274e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002738:	2200      	movs	r2, #0
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002740:	f000 f92f 	bl	80029a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002744:	4a06      	ldr	r2, [pc, #24]	; (8002760 <HAL_InitTick+0x5c>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e000      	b.n	8002750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	2000000c 	.word	0x2000000c
 800275c:	20000014 	.word	0x20000014
 8002760:	20000010 	.word	0x20000010

08002764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_IncTick+0x20>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_IncTick+0x24>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4413      	add	r3, r2
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <HAL_IncTick+0x24>)
 8002776:	6013      	str	r3, [r2, #0]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000014 	.word	0x20000014
 8002788:	20000cac 	.word	0x20000cac

0800278c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return uwTick;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_GetTick+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000cac 	.word	0x20000cac

080027a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff ffee 	bl	800278c <HAL_GetTick>
 80027b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027bc:	d005      	beq.n	80027ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_Delay+0x44>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ca:	bf00      	nop
 80027cc:	f7ff ffde 	bl	800278c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d8f7      	bhi.n	80027cc <HAL_Delay+0x28>
  {
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000014 	.word	0x20000014

080027ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281e:	4a04      	ldr	r2, [pc, #16]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	60d3      	str	r3, [r2, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <__NVIC_GetPriorityGrouping+0x18>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	f003 0307 	and.w	r3, r3, #7
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db0b      	blt.n	800287a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	4907      	ldr	r1, [pc, #28]	; (8002888 <__NVIC_EnableIRQ+0x38>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2001      	movs	r0, #1
 8002872:	fa00 f202 	lsl.w	r2, r0, r2
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000e100 	.word	0xe000e100

0800288c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db0a      	blt.n	80028b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	490c      	ldr	r1, [pc, #48]	; (80028d8 <__NVIC_SetPriority+0x4c>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	440b      	add	r3, r1
 80028b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b4:	e00a      	b.n	80028cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4908      	ldr	r1, [pc, #32]	; (80028dc <__NVIC_SetPriority+0x50>)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3b04      	subs	r3, #4
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	761a      	strb	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f1c3 0307 	rsb	r3, r3, #7
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf28      	it	cs
 80028fe:	2304      	movcs	r3, #4
 8002900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3304      	adds	r3, #4
 8002906:	2b06      	cmp	r3, #6
 8002908:	d902      	bls.n	8002910 <NVIC_EncodePriority+0x30>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3b03      	subs	r3, #3
 800290e:	e000      	b.n	8002912 <NVIC_EncodePriority+0x32>
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43d9      	mvns	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	4313      	orrs	r3, r2
         );
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002958:	d301      	bcc.n	800295e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295a:	2301      	movs	r3, #1
 800295c:	e00f      	b.n	800297e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295e:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <SysTick_Config+0x40>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002966:	210f      	movs	r1, #15
 8002968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800296c:	f7ff ff8e 	bl	800288c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <SysTick_Config+0x40>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002976:	4b04      	ldr	r3, [pc, #16]	; (8002988 <SysTick_Config+0x40>)
 8002978:	2207      	movs	r2, #7
 800297a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	e000e010 	.word	0xe000e010

0800298c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ff29 	bl	80027ec <__NVIC_SetPriorityGrouping>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b4:	f7ff ff3e 	bl	8002834 <__NVIC_GetPriorityGrouping>
 80029b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	6978      	ldr	r0, [r7, #20]
 80029c0:	f7ff ff8e 	bl	80028e0 <NVIC_EncodePriority>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff5d 	bl	800288c <__NVIC_SetPriority>
}
 80029d2:	bf00      	nop
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff31 	bl	8002850 <__NVIC_EnableIRQ>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ffa2 	bl	8002948 <SysTick_Config>
 8002a04:	4603      	mov	r3, r0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff feb6 	bl	800278c <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d008      	beq.n	8002a40 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2280      	movs	r2, #128	; 0x80
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e052      	b.n	8002ae6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0216 	bic.w	r2, r2, #22
 8002a4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a5e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d103      	bne.n	8002a70 <HAL_DMA_Abort+0x62>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0208 	bic.w	r2, r2, #8
 8002a7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a90:	e013      	b.n	8002aba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a92:	f7ff fe7b 	bl	800278c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d90c      	bls.n	8002aba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e015      	b.n	8002ae6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e4      	bne.n	8002a92 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	223f      	movs	r2, #63	; 0x3f
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d004      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e00c      	b.n	8002b26 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2205      	movs	r2, #5
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	e16b      	b.n	8002e28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b50:	2201      	movs	r2, #1
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	f040 815a 	bne.w	8002e22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d005      	beq.n	8002b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d130      	bne.n	8002be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	2203      	movs	r2, #3
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 0201 	and.w	r2, r3, #1
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d017      	beq.n	8002c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d123      	bne.n	8002c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	08da      	lsrs	r2, r3, #3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3208      	adds	r2, #8
 8002c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	220f      	movs	r2, #15
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	08da      	lsrs	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3208      	adds	r2, #8
 8002c72:	69b9      	ldr	r1, [r7, #24]
 8002c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	2203      	movs	r2, #3
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0203 	and.w	r2, r3, #3
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80b4 	beq.w	8002e22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	4b60      	ldr	r3, [pc, #384]	; (8002e40 <HAL_GPIO_Init+0x30c>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	4a5f      	ldr	r2, [pc, #380]	; (8002e40 <HAL_GPIO_Init+0x30c>)
 8002cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cca:	4b5d      	ldr	r3, [pc, #372]	; (8002e40 <HAL_GPIO_Init+0x30c>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cd6:	4a5b      	ldr	r2, [pc, #364]	; (8002e44 <HAL_GPIO_Init+0x310>)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	3302      	adds	r3, #2
 8002cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	220f      	movs	r2, #15
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a52      	ldr	r2, [pc, #328]	; (8002e48 <HAL_GPIO_Init+0x314>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d02b      	beq.n	8002d5a <HAL_GPIO_Init+0x226>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a51      	ldr	r2, [pc, #324]	; (8002e4c <HAL_GPIO_Init+0x318>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d025      	beq.n	8002d56 <HAL_GPIO_Init+0x222>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a50      	ldr	r2, [pc, #320]	; (8002e50 <HAL_GPIO_Init+0x31c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01f      	beq.n	8002d52 <HAL_GPIO_Init+0x21e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a4f      	ldr	r2, [pc, #316]	; (8002e54 <HAL_GPIO_Init+0x320>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d019      	beq.n	8002d4e <HAL_GPIO_Init+0x21a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a4e      	ldr	r2, [pc, #312]	; (8002e58 <HAL_GPIO_Init+0x324>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_GPIO_Init+0x216>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4d      	ldr	r2, [pc, #308]	; (8002e5c <HAL_GPIO_Init+0x328>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00d      	beq.n	8002d46 <HAL_GPIO_Init+0x212>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4c      	ldr	r2, [pc, #304]	; (8002e60 <HAL_GPIO_Init+0x32c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <HAL_GPIO_Init+0x20e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4b      	ldr	r2, [pc, #300]	; (8002e64 <HAL_GPIO_Init+0x330>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d101      	bne.n	8002d3e <HAL_GPIO_Init+0x20a>
 8002d3a:	2307      	movs	r3, #7
 8002d3c:	e00e      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	e00c      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d42:	2306      	movs	r3, #6
 8002d44:	e00a      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d46:	2305      	movs	r3, #5
 8002d48:	e008      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	e006      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e004      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e002      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	f002 0203 	and.w	r2, r2, #3
 8002d62:	0092      	lsls	r2, r2, #2
 8002d64:	4093      	lsls	r3, r2
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d6c:	4935      	ldr	r1, [pc, #212]	; (8002e44 <HAL_GPIO_Init+0x310>)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	089b      	lsrs	r3, r3, #2
 8002d72:	3302      	adds	r3, #2
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_GPIO_Init+0x334>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d9e:	4a32      	ldr	r2, [pc, #200]	; (8002e68 <HAL_GPIO_Init+0x334>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da4:	4b30      	ldr	r3, [pc, #192]	; (8002e68 <HAL_GPIO_Init+0x334>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc8:	4a27      	ldr	r2, [pc, #156]	; (8002e68 <HAL_GPIO_Init+0x334>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dce:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <HAL_GPIO_Init+0x334>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002df2:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <HAL_GPIO_Init+0x334>)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df8:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <HAL_GPIO_Init+0x334>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e1c:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <HAL_GPIO_Init+0x334>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3301      	adds	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	2b0f      	cmp	r3, #15
 8002e2c:	f67f ae90 	bls.w	8002b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	3724      	adds	r7, #36	; 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40013800 	.word	0x40013800
 8002e48:	40020000 	.word	0x40020000
 8002e4c:	40020400 	.word	0x40020400
 8002e50:	40020800 	.word	0x40020800
 8002e54:	40020c00 	.word	0x40020c00
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40021400 	.word	0x40021400
 8002e60:	40021800 	.word	0x40021800
 8002e64:	40021c00 	.word	0x40021c00
 8002e68:	40013c00 	.word	0x40013c00

08002e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e7c:	787b      	ldrb	r3, [r7, #1]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e88:	e003      	b.n	8002e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e8a:	887b      	ldrh	r3, [r7, #2]
 8002e8c:	041a      	lsls	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	619a      	str	r2, [r3, #24]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea0:	b08f      	sub	sp, #60	; 0x3c
 8002ea2:	af0a      	add	r7, sp, #40	; 0x28
 8002ea4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e10f      	b.n	80030d0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f007 fee0 	bl	800ac90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f004 f9dd 	bl	80072ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	687e      	ldr	r6, [r7, #4]
 8002efc:	466d      	mov	r5, sp
 8002efe:	f106 0410 	add.w	r4, r6, #16
 8002f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f12:	1d33      	adds	r3, r6, #4
 8002f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f16:	6838      	ldr	r0, [r7, #0]
 8002f18:	f004 f8b4 	bl	8007084 <USB_CoreInit>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0d0      	b.n	80030d0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f004 f9cb 	bl	80072d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
 8002f3e:	e04a      	b.n	8002fd6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	333d      	adds	r3, #61	; 0x3d
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	333c      	adds	r3, #60	; 0x3c
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	b298      	uxth	r0, r3
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	3344      	adds	r3, #68	; 0x44
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3340      	adds	r3, #64	; 0x40
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3348      	adds	r3, #72	; 0x48
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	334c      	adds	r3, #76	; 0x4c
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	3354      	adds	r3, #84	; 0x54
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d3af      	bcc.n	8002f40 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]
 8002fe4:	e044      	b.n	8003070 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800300e:	7bfa      	ldrb	r2, [r7, #15]
 8003010:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003012:	7bfa      	ldrb	r2, [r7, #15]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	3301      	adds	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	429a      	cmp	r2, r3
 8003078:	d3b5      	bcc.n	8002fe6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	687e      	ldr	r6, [r7, #4]
 8003082:	466d      	mov	r5, sp
 8003084:	f106 0410 	add.w	r4, r6, #16
 8003088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800308c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003090:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003094:	e885 0003 	stmia.w	r5, {r0, r1}
 8003098:	1d33      	adds	r3, r6, #4
 800309a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800309c:	6838      	ldr	r0, [r7, #0]
 800309e:	f004 f963 	bl	8007368 <USB_DevInit>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e00d      	b.n	80030d0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f005 fab2 	bl	8008632 <USB_DevDisconnect>

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_PCD_Start+0x1c>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e020      	b.n	8003136 <HAL_PCD_Start+0x5e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	2b01      	cmp	r3, #1
 8003102:	d109      	bne.n	8003118 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003108:	2b01      	cmp	r3, #1
 800310a:	d005      	beq.n	8003118 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f004 f8b5 	bl	800728c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f005 fa62 	bl	80085f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800313e:	b590      	push	{r4, r7, lr}
 8003140:	b08d      	sub	sp, #52	; 0x34
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f005 fb20 	bl	800879a <USB_GetMode>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	f040 848a 	bne.w	8003a76 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f005 fa84 	bl	8008674 <USB_ReadInterrupts>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8480 	beq.w	8003a74 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	0a1b      	lsrs	r3, r3, #8
 800317e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f005 fa71 	bl	8008674 <USB_ReadInterrupts>
 8003192:	4603      	mov	r3, r0
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b02      	cmp	r3, #2
 800319a:	d107      	bne.n	80031ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f002 0202 	and.w	r2, r2, #2
 80031aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f005 fa5f 	bl	8008674 <USB_ReadInterrupts>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d161      	bne.n	8003284 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0210 	bic.w	r2, r2, #16
 80031ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	f003 020f 	and.w	r2, r3, #15
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	3304      	adds	r3, #4
 80031ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	0c5b      	lsrs	r3, r3, #17
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d124      	bne.n	8003246 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d035      	beq.n	8003274 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003216:	b29b      	uxth	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	6a38      	ldr	r0, [r7, #32]
 800321c:	f005 f896 	bl	800834c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800322c:	441a      	add	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	6a1a      	ldr	r2, [r3, #32]
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800323e:	441a      	add	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	621a      	str	r2, [r3, #32]
 8003244:	e016      	b.n	8003274 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	0c5b      	lsrs	r3, r3, #17
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	2b06      	cmp	r3, #6
 8003250:	d110      	bne.n	8003274 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003258:	2208      	movs	r2, #8
 800325a:	4619      	mov	r1, r3
 800325c:	6a38      	ldr	r0, [r7, #32]
 800325e:	f005 f875 	bl	800834c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	6a1a      	ldr	r2, [r3, #32]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800326e:	441a      	add	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0210 	orr.w	r2, r2, #16
 8003282:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f005 f9f3 	bl	8008674 <USB_ReadInterrupts>
 800328e:	4603      	mov	r3, r0
 8003290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003294:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003298:	f040 80a7 	bne.w	80033ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f005 f9f8 	bl	800869a <USB_ReadDevAllOutEpInterrupt>
 80032aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032ac:	e099      	b.n	80033e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 808e 	beq.w	80033d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f005 fa1c 	bl	8008702 <USB_ReadDevOutEPInterrupt>
 80032ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00c      	beq.n	80032f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e2:	461a      	mov	r2, r3
 80032e4:	2301      	movs	r3, #1
 80032e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fec2 	bl	8004074 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00c      	beq.n	8003314 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	4413      	add	r3, r2
 8003302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003306:	461a      	mov	r2, r3
 8003308:	2308      	movs	r3, #8
 800330a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800330c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 ff98 	bl	8004244 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332a:	461a      	mov	r2, r3
 800332c:	2310      	movs	r3, #16
 800332e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d030      	beq.n	800339c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b80      	cmp	r3, #128	; 0x80
 8003344:	d109      	bne.n	800335a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003354:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003358:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4413      	add	r3, r2
 800336c:	3304      	adds	r3, #4
 800336e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	78db      	ldrb	r3, [r3, #3]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d108      	bne.n	800338a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2200      	movs	r2, #0
 800337c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	b2db      	uxtb	r3, r3
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f007 fd89 	bl	800ae9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003396:	461a      	mov	r2, r3
 8003398:	2302      	movs	r3, #2
 800339a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b2:	461a      	mov	r2, r3
 80033b4:	2320      	movs	r3, #32
 80033b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ce:	461a      	mov	r2, r3
 80033d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	3301      	adds	r3, #1
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f47f af62 	bne.w	80032ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f005 f940 	bl	8008674 <USB_ReadInterrupts>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033fe:	f040 80db 	bne.w	80035b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f005 f961 	bl	80086ce <USB_ReadDevAllInEpInterrupt>
 800340c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003412:	e0cd      	b.n	80035b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 80c2 	beq.w	80035a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f005 f987 	bl	800873e <USB_ReadDevInEPInterrupt>
 8003430:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d057      	beq.n	80034ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	2201      	movs	r2, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	43db      	mvns	r3, r3
 8003456:	69f9      	ldr	r1, [r7, #28]
 8003458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800345c:	4013      	ands	r3, r2
 800345e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346c:	461a      	mov	r2, r3
 800346e:	2301      	movs	r3, #1
 8003470:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d132      	bne.n	80034e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	334c      	adds	r3, #76	; 0x4c
 800348a:	6819      	ldr	r1, [r3, #0]
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003490:	4613      	mov	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4403      	add	r3, r0
 800349a:	3348      	adds	r3, #72	; 0x48
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4419      	add	r1, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4403      	add	r3, r0
 80034ae:	334c      	adds	r3, #76	; 0x4c
 80034b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d113      	bne.n	80034e0 <HAL_PCD_IRQHandler+0x3a2>
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3354      	adds	r3, #84	; 0x54
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d108      	bne.n	80034e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034d8:	461a      	mov	r2, r3
 80034da:	2101      	movs	r1, #1
 80034dc:	f005 f98e 	bl	80087fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f007 fc53 	bl	800ad92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003502:	461a      	mov	r2, r3
 8003504:	2308      	movs	r3, #8
 8003506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351e:	461a      	mov	r2, r3
 8003520:	2310      	movs	r3, #16
 8003522:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353a:	461a      	mov	r2, r3
 800353c:	2340      	movs	r3, #64	; 0x40
 800353e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d023      	beq.n	8003592 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800354a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800354c:	6a38      	ldr	r0, [r7, #32]
 800354e:	f004 f86f 	bl	8007630 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	3338      	adds	r3, #56	; 0x38
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	3304      	adds	r3, #4
 8003564:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	78db      	ldrb	r3, [r3, #3]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d108      	bne.n	8003580 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2200      	movs	r2, #0
 8003572:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	b2db      	uxtb	r3, r3
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f007 fca0 	bl	800aec0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	461a      	mov	r2, r3
 800358e:	2302      	movs	r3, #2
 8003590:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800359c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fcdb 	bl	8003f5a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	3301      	adds	r3, #1
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f47f af2e 	bne.w	8003414 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f005 f859 	bl	8008674 <USB_ReadInterrupts>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035cc:	d122      	bne.n	8003614 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d108      	bne.n	80035fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035f4:	2100      	movs	r1, #0
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fec2 	bl	8004380 <HAL_PCDEx_LPM_Callback>
 80035fc:	e002      	b.n	8003604 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f007 fc3e 	bl	800ae80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003612:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f005 f82b 	bl	8008674 <USB_ReadInterrupts>
 800361e:	4603      	mov	r3, r0
 8003620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003628:	d112      	bne.n	8003650 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b01      	cmp	r3, #1
 8003638:	d102      	bne.n	8003640 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f007 fbfa 	bl	800ae34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800364e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f005 f80d 	bl	8008674 <USB_ReadInterrupts>
 800365a:	4603      	mov	r3, r0
 800365c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003664:	f040 80b7 	bne.w	80037d6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2110      	movs	r1, #16
 8003682:	4618      	mov	r0, r3
 8003684:	f003 ffd4 	bl	8007630 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003688:	2300      	movs	r3, #0
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800368c:	e046      	b.n	800371c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800369a:	461a      	mov	r2, r3
 800369c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b2:	0151      	lsls	r1, r2, #5
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	440a      	add	r2, r1
 80036b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ce:	461a      	mov	r2, r3
 80036d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036e6:	0151      	lsls	r1, r2, #5
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	440a      	add	r2, r1
 80036ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003706:	0151      	lsls	r1, r2, #5
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	440a      	add	r2, r1
 800370c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003710:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003714:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	3301      	adds	r3, #1
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003722:	429a      	cmp	r2, r3
 8003724:	d3b3      	bcc.n	800368e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003734:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003738:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	2b00      	cmp	r3, #0
 8003740:	d016      	beq.n	8003770 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003752:	f043 030b 	orr.w	r3, r3, #11
 8003756:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003768:	f043 030b 	orr.w	r3, r3, #11
 800376c:	6453      	str	r3, [r2, #68]	; 0x44
 800376e:	e015      	b.n	800379c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800377e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003782:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003786:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003796:	f043 030b 	orr.w	r3, r3, #11
 800379a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037c0:	461a      	mov	r2, r3
 80037c2:	f005 f81b 	bl	80087fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f004 ff4a 	bl	8008674 <USB_ReadInterrupts>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ea:	d124      	bne.n	8003836 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f004 ffe0 	bl	80087b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f003 ff95 	bl	800772a <USB_GetDevSpeed>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681c      	ldr	r4, [r3, #0]
 800380c:	f001 fa28 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8003810:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	4620      	mov	r0, r4
 800381c:	f003 fc94 	bl	8007148 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f007 fade 	bl	800ade2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003834:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f004 ff1a 	bl	8008674 <USB_ReadInterrupts>
 8003840:	4603      	mov	r3, r0
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b08      	cmp	r3, #8
 8003848:	d10a      	bne.n	8003860 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f007 fabb 	bl	800adc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f002 0208 	and.w	r2, r2, #8
 800385e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f004 ff05 	bl	8008674 <USB_ReadInterrupts>
 800386a:	4603      	mov	r3, r0
 800386c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003870:	2b80      	cmp	r3, #128	; 0x80
 8003872:	d122      	bne.n	80038ba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003880:	2301      	movs	r3, #1
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
 8003884:	e014      	b.n	80038b0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388a:	4613      	mov	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d105      	bne.n	80038aa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	4619      	mov	r1, r3
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fb27 	bl	8003ef8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	3301      	adds	r3, #1
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d3e5      	bcc.n	8003886 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f004 fed8 	bl	8008674 <USB_ReadInterrupts>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ce:	d13b      	bne.n	8003948 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038d0:	2301      	movs	r3, #1
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
 80038d4:	e02b      	b.n	800392e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ea:	4613      	mov	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	3340      	adds	r3, #64	; 0x40
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d115      	bne.n	8003928 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80038fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038fe:	2b00      	cmp	r3, #0
 8003900:	da12      	bge.n	8003928 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	333f      	adds	r3, #63	; 0x3f
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800391e:	b2db      	uxtb	r3, r3
 8003920:	4619      	mov	r1, r3
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fae8 	bl	8003ef8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	3301      	adds	r3, #1
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003934:	429a      	cmp	r2, r3
 8003936:	d3ce      	bcc.n	80038d6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003946:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f004 fe91 	bl	8008674 <USB_ReadInterrupts>
 8003952:	4603      	mov	r3, r0
 8003954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003958:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800395c:	d155      	bne.n	8003a0a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800395e:	2301      	movs	r3, #1
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
 8003962:	e045      	b.n	80039f0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d12e      	bne.n	80039ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800398c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800398e:	2b00      	cmp	r3, #0
 8003990:	da2b      	bge.n	80039ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800399e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d121      	bne.n	80039ea <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039aa:	4613      	mov	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039e6:	6053      	str	r3, [r2, #4]
            break;
 80039e8:	e007      	b.n	80039fa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	3301      	adds	r3, #1
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d3b4      	bcc.n	8003964 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 fe30 	bl	8008674 <USB_ReadInterrupts>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1e:	d10a      	bne.n	8003a36 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f007 fa5f 	bl	800aee4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f004 fe1a 	bl	8008674 <USB_ReadInterrupts>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d115      	bne.n	8003a76 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f007 fa4f 	bl	800af00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	e000      	b.n	8003a76 <HAL_PCD_IRQHandler+0x938>
      return;
 8003a74:	bf00      	nop
    }
  }
}
 8003a76:	3734      	adds	r7, #52	; 0x34
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd90      	pop	{r4, r7, pc}

08003a7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_PCD_SetAddress+0x1a>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e013      	b.n	8003abe <HAL_PCD_SetAddress+0x42>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	4611      	mov	r1, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f004 fd78 	bl	80085a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	4608      	mov	r0, r1
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	70fb      	strb	r3, [r7, #3]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	803b      	strh	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	da0f      	bge.n	8003b0c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	f003 020f 	and.w	r2, r3, #15
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	3338      	adds	r3, #56	; 0x38
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4413      	add	r3, r2
 8003b00:	3304      	adds	r3, #4
 8003b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	705a      	strb	r2, [r3, #1]
 8003b0a:	e00f      	b.n	8003b2c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	f003 020f 	and.w	r2, r3, #15
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	4413      	add	r3, r2
 8003b22:	3304      	adds	r3, #4
 8003b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b38:	883a      	ldrh	r2, [r7, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	78ba      	ldrb	r2, [r7, #2]
 8003b42:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	785b      	ldrb	r3, [r3, #1]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b56:	78bb      	ldrb	r3, [r7, #2]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d102      	bne.n	8003b62 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_PCD_EP_Open+0xaa>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e00e      	b.n	8003b8e <HAL_PCD_EP_Open+0xc8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68f9      	ldr	r1, [r7, #12]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f003 fdf8 	bl	8007774 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003b8c:	7afb      	ldrb	r3, [r7, #11]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	da0f      	bge.n	8003bca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	f003 020f 	and.w	r2, r3, #15
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	3338      	adds	r3, #56	; 0x38
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	705a      	strb	r2, [r3, #1]
 8003bc8:	e00f      	b.n	8003bea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	f003 020f 	and.w	r2, r3, #15
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4413      	add	r3, r2
 8003be0:	3304      	adds	r3, #4
 8003be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_PCD_EP_Close+0x6e>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e00e      	b.n	8003c22 <HAL_PCD_EP_Close+0x8c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68f9      	ldr	r1, [r7, #12]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f003 fe36 	bl	8007884 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b086      	sub	sp, #24
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	460b      	mov	r3, r1
 8003c38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c3a:	7afb      	ldrb	r3, [r7, #11]
 8003c3c:	f003 020f 	and.w	r2, r3, #15
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	3304      	adds	r3, #4
 8003c52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2200      	movs	r2, #0
 8003c64:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c6c:	7afb      	ldrb	r3, [r7, #11]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d102      	bne.n	8003c86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c86:	7afb      	ldrb	r3, [r7, #11]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d109      	bne.n	8003ca4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	6979      	ldr	r1, [r7, #20]
 8003c9e:	f004 f915 	bl	8007ecc <USB_EP0StartXfer>
 8003ca2:	e008      	b.n	8003cb6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6979      	ldr	r1, [r7, #20]
 8003cb2:	f003 fec3 	bl	8007a3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	f003 020f 	and.w	r2, r3, #15
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	f003 020f 	and.w	r2, r3, #15
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	3338      	adds	r3, #56	; 0x38
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	3304      	adds	r3, #4
 8003d16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2200      	movs	r2, #0
 8003d28:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d30:	7afb      	ldrb	r3, [r7, #11]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d102      	bne.n	8003d4a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d4a:	7afb      	ldrb	r3, [r7, #11]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	6979      	ldr	r1, [r7, #20]
 8003d62:	f004 f8b3 	bl	8007ecc <USB_EP0StartXfer>
 8003d66:	e008      	b.n	8003d7a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	6979      	ldr	r1, [r7, #20]
 8003d76:	f003 fe61 	bl	8007a3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	f003 020f 	and.w	r2, r3, #15
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d901      	bls.n	8003da2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e050      	b.n	8003e44 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003da2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	da0f      	bge.n	8003dca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	f003 020f 	and.w	r2, r3, #15
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	3338      	adds	r3, #56	; 0x38
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	705a      	strb	r2, [r3, #1]
 8003dc8:	e00d      	b.n	8003de6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	4413      	add	r3, r2
 8003ddc:	3304      	adds	r3, #4
 8003dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_PCD_EP_SetStall+0x82>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e01e      	b.n	8003e44 <HAL_PCD_EP_SetStall+0xc0>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f004 faf1 	bl	80083fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	b2d9      	uxtb	r1, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e34:	461a      	mov	r2, r3
 8003e36:	f004 fce1 	bl	80087fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	f003 020f 	and.w	r2, r3, #15
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d901      	bls.n	8003e6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e042      	b.n	8003ef0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	da0f      	bge.n	8003e92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	f003 020f 	and.w	r2, r3, #15
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	3338      	adds	r3, #56	; 0x38
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	3304      	adds	r3, #4
 8003e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	705a      	strb	r2, [r3, #1]
 8003e90:	e00f      	b.n	8003eb2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	f003 020f 	and.w	r2, r3, #15
 8003e98:	4613      	mov	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_PCD_EP_ClrStall+0x86>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e00e      	b.n	8003ef0 <HAL_PCD_EP_ClrStall+0xa4>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f004 faf9 	bl	80084d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	da0c      	bge.n	8003f26 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	f003 020f 	and.w	r2, r3, #15
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	3338      	adds	r3, #56	; 0x38
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	4413      	add	r3, r2
 8003f20:	3304      	adds	r3, #4
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e00c      	b.n	8003f40 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 020f 	and.w	r2, r3, #15
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68f9      	ldr	r1, [r7, #12]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f004 f918 	bl	800817c <USB_EPStopXfer>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f50:	7afb      	ldrb	r3, [r7, #11]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b08a      	sub	sp, #40	; 0x28
 8003f5e:	af02      	add	r7, sp, #8
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	3338      	adds	r3, #56	; 0x38
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3304      	adds	r3, #4
 8003f80:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1a      	ldr	r2, [r3, #32]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d901      	bls.n	8003f92 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06c      	b.n	800406c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d902      	bls.n	8003fae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3303      	adds	r3, #3
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fb6:	e02b      	b.n	8004010 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d902      	bls.n	8003fd4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	3303      	adds	r3, #3
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6919      	ldr	r1, [r3, #16]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	6978      	ldr	r0, [r7, #20]
 8003ff4:	f004 f96c 	bl	80082d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	441a      	add	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1a      	ldr	r2, [r3, #32]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	441a      	add	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	b29b      	uxth	r3, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	429a      	cmp	r2, r3
 8004024:	d809      	bhi.n	800403a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1a      	ldr	r2, [r3, #32]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800402e:	429a      	cmp	r2, r3
 8004030:	d203      	bcs.n	800403a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1be      	bne.n	8003fb8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	429a      	cmp	r2, r3
 8004044:	d811      	bhi.n	800406a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	2201      	movs	r2, #1
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	43db      	mvns	r3, r3
 8004060:	6939      	ldr	r1, [r7, #16]
 8004062:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004066:	4013      	ands	r3, r2
 8004068:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	333c      	adds	r3, #60	; 0x3c
 800408c:	3304      	adds	r3, #4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d17b      	bne.n	80041a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d015      	beq.n	80040e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	4a61      	ldr	r2, [pc, #388]	; (800423c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	f240 80b9 	bls.w	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80b3 	beq.w	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d6:	461a      	mov	r2, r3
 80040d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040dc:	6093      	str	r3, [r2, #8]
 80040de:	e0a7      	b.n	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f6:	461a      	mov	r2, r3
 80040f8:	2320      	movs	r3, #32
 80040fa:	6093      	str	r3, [r2, #8]
 80040fc:	e098      	b.n	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	f040 8093 	bne.w	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	4a4b      	ldr	r2, [pc, #300]	; (800423c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d90f      	bls.n	8004132 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004128:	461a      	mov	r2, r3
 800412a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412e:	6093      	str	r3, [r2, #8]
 8004130:	e07e      	b.n	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	4413      	add	r3, r2
 8004144:	3304      	adds	r3, #4
 8004146:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	0159      	lsls	r1, r3, #5
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	440b      	add	r3, r1
 8004154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415e:	1ad2      	subs	r2, r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d114      	bne.n	8004194 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800417c:	461a      	mov	r2, r3
 800417e:	2101      	movs	r1, #1
 8004180:	f004 fb3c 	bl	80087fc <USB_EP0_OutStart>
 8004184:	e006      	b.n	8004194 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	441a      	add	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f006 fdde 	bl	800ad5c <HAL_PCD_DataOutStageCallback>
 80041a0:	e046      	b.n	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	4a26      	ldr	r2, [pc, #152]	; (8004240 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d124      	bne.n	80041f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	461a      	mov	r2, r3
 80041c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c6:	6093      	str	r3, [r2, #8]
 80041c8:	e032      	b.n	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e0:	461a      	mov	r2, r3
 80041e2:	2320      	movs	r3, #32
 80041e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	4619      	mov	r1, r3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f006 fdb5 	bl	800ad5c <HAL_PCD_DataOutStageCallback>
 80041f2:	e01d      	b.n	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d114      	bne.n	8004224 <PCD_EP_OutXfrComplete_int+0x1b0>
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d108      	bne.n	8004224 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800421c:	461a      	mov	r2, r3
 800421e:	2100      	movs	r1, #0
 8004220:	f004 faec 	bl	80087fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	4619      	mov	r1, r3
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f006 fd96 	bl	800ad5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	4f54300a 	.word	0x4f54300a
 8004240:	4f54310a 	.word	0x4f54310a

08004244 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	333c      	adds	r3, #60	; 0x3c
 800425c:	3304      	adds	r3, #4
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4a15      	ldr	r2, [pc, #84]	; (80042cc <PCD_EP_OutSetupPacket_int+0x88>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d90e      	bls.n	8004298 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	461a      	mov	r2, r3
 8004292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004296:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f006 fd4d 	bl	800ad38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <PCD_EP_OutSetupPacket_int+0x88>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d90c      	bls.n	80042c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d108      	bne.n	80042c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042b8:	461a      	mov	r2, r3
 80042ba:	2101      	movs	r1, #1
 80042bc:	f004 fa9e 	bl	80087fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	4f54300a 	.word	0x4f54300a

080042d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
 80042dc:	4613      	mov	r3, r2
 80042de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d107      	bne.n	80042fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042ee:	883b      	ldrh	r3, [r7, #0]
 80042f0:	0419      	lsls	r1, r3, #16
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
 80042fc:	e028      	b.n	8004350 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	4413      	add	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800430c:	2300      	movs	r3, #0
 800430e:	73fb      	strb	r3, [r7, #15]
 8004310:	e00d      	b.n	800432e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	3340      	adds	r3, #64	; 0x40
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	4413      	add	r3, r2
 8004326:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	3301      	adds	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	3b01      	subs	r3, #1
 8004334:	429a      	cmp	r2, r3
 8004336:	d3ec      	bcc.n	8004312 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004338:	883b      	ldrh	r3, [r7, #0]
 800433a:	0418      	lsls	r0, r3, #16
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6819      	ldr	r1, [r3, #0]
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	3b01      	subs	r3, #1
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	4302      	orrs	r2, r0
 8004348:	3340      	adds	r3, #64	; 0x40
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	460b      	mov	r3, r1
 8004368:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	887a      	ldrh	r2, [r7, #2]
 8004370:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e267      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d075      	beq.n	80044a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b6:	4b88      	ldr	r3, [pc, #544]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d00c      	beq.n	80043dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c2:	4b85      	ldr	r3, [pc, #532]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d112      	bne.n	80043f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ce:	4b82      	ldr	r3, [pc, #520]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043da:	d10b      	bne.n	80043f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043dc:	4b7e      	ldr	r3, [pc, #504]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d05b      	beq.n	80044a0 <HAL_RCC_OscConfig+0x108>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d157      	bne.n	80044a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e242      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d106      	bne.n	800440c <HAL_RCC_OscConfig+0x74>
 80043fe:	4b76      	ldr	r3, [pc, #472]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a75      	ldr	r2, [pc, #468]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e01d      	b.n	8004448 <HAL_RCC_OscConfig+0xb0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004414:	d10c      	bne.n	8004430 <HAL_RCC_OscConfig+0x98>
 8004416:	4b70      	ldr	r3, [pc, #448]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a6f      	ldr	r2, [pc, #444]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 800441c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b6d      	ldr	r3, [pc, #436]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a6c      	ldr	r2, [pc, #432]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e00b      	b.n	8004448 <HAL_RCC_OscConfig+0xb0>
 8004430:	4b69      	ldr	r3, [pc, #420]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a68      	ldr	r2, [pc, #416]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b66      	ldr	r3, [pc, #408]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a65      	ldr	r2, [pc, #404]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fe f99c 	bl	800278c <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004458:	f7fe f998 	bl	800278c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e207      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446a:	4b5b      	ldr	r3, [pc, #364]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0xc0>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fe f988 	bl	800278c <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004480:	f7fe f984 	bl	800278c <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	; 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e1f3      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004492:	4b51      	ldr	r3, [pc, #324]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0xe8>
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d063      	beq.n	8004576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ae:	4b4a      	ldr	r3, [pc, #296]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ba:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d11c      	bne.n	8004500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c6:	4b44      	ldr	r3, [pc, #272]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d116      	bne.n	8004500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d2:	4b41      	ldr	r3, [pc, #260]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_RCC_OscConfig+0x152>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d001      	beq.n	80044ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e1c7      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ea:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4937      	ldr	r1, [pc, #220]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fe:	e03a      	b.n	8004576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d020      	beq.n	800454a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004508:	4b34      	ldr	r3, [pc, #208]	; (80045dc <HAL_RCC_OscConfig+0x244>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fe f93d 	bl	800278c <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004516:	f7fe f939 	bl	800278c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e1a8      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004528:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004534:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4925      	ldr	r1, [pc, #148]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]
 8004548:	e015      	b.n	8004576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <HAL_RCC_OscConfig+0x244>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fe f91c 	bl	800278c <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004558:	f7fe f918 	bl	800278c <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e187      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d036      	beq.n	80045f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458a:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <HAL_RCC_OscConfig+0x248>)
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fe f8fc 	bl	800278c <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004598:	f7fe f8f8 	bl	800278c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e167      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_OscConfig+0x240>)
 80045ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x200>
 80045b6:	e01b      	b.n	80045f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_RCC_OscConfig+0x248>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045be:	f7fe f8e5 	bl	800278c <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c4:	e00e      	b.n	80045e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c6:	f7fe f8e1 	bl	800278c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d907      	bls.n	80045e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e150      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
 80045d8:	40023800 	.word	0x40023800
 80045dc:	42470000 	.word	0x42470000
 80045e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e4:	4b88      	ldr	r3, [pc, #544]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80045e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ea      	bne.n	80045c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8097 	beq.w	800472c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004602:	4b81      	ldr	r3, [pc, #516]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10f      	bne.n	800462e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	4b7d      	ldr	r3, [pc, #500]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4a7c      	ldr	r2, [pc, #496]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461c:	6413      	str	r3, [r2, #64]	; 0x40
 800461e:	4b7a      	ldr	r3, [pc, #488]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462e:	4b77      	ldr	r3, [pc, #476]	; (800480c <HAL_RCC_OscConfig+0x474>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d118      	bne.n	800466c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463a:	4b74      	ldr	r3, [pc, #464]	; (800480c <HAL_RCC_OscConfig+0x474>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a73      	ldr	r2, [pc, #460]	; (800480c <HAL_RCC_OscConfig+0x474>)
 8004640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004646:	f7fe f8a1 	bl	800278c <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464e:	f7fe f89d 	bl	800278c <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e10c      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004660:	4b6a      	ldr	r3, [pc, #424]	; (800480c <HAL_RCC_OscConfig+0x474>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x2ea>
 8004674:	4b64      	ldr	r3, [pc, #400]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a63      	ldr	r2, [pc, #396]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
 8004680:	e01c      	b.n	80046bc <HAL_RCC_OscConfig+0x324>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b05      	cmp	r3, #5
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x30c>
 800468a:	4b5f      	ldr	r3, [pc, #380]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4a5e      	ldr	r2, [pc, #376]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004690:	f043 0304 	orr.w	r3, r3, #4
 8004694:	6713      	str	r3, [r2, #112]	; 0x70
 8004696:	4b5c      	ldr	r3, [pc, #368]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	4a5b      	ldr	r2, [pc, #364]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	6713      	str	r3, [r2, #112]	; 0x70
 80046a2:	e00b      	b.n	80046bc <HAL_RCC_OscConfig+0x324>
 80046a4:	4b58      	ldr	r3, [pc, #352]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	4a57      	ldr	r2, [pc, #348]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	6713      	str	r3, [r2, #112]	; 0x70
 80046b0:	4b55      	ldr	r3, [pc, #340]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4a54      	ldr	r2, [pc, #336]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80046b6:	f023 0304 	bic.w	r3, r3, #4
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fe f862 	bl	800278c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f7fe f85e 	bl	800278c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0cb      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e2:	4b49      	ldr	r3, [pc, #292]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0ee      	beq.n	80046cc <HAL_RCC_OscConfig+0x334>
 80046ee:	e014      	b.n	800471a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f0:	f7fe f84c 	bl	800278c <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f6:	e00a      	b.n	800470e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f8:	f7fe f848 	bl	800278c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	f241 3288 	movw	r2, #5000	; 0x1388
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e0b5      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470e:	4b3e      	ldr	r3, [pc, #248]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1ee      	bne.n	80046f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004720:	4b39      	ldr	r3, [pc, #228]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	4a38      	ldr	r2, [pc, #224]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80a1 	beq.w	8004878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004736:	4b34      	ldr	r3, [pc, #208]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b08      	cmp	r3, #8
 8004740:	d05c      	beq.n	80047fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d141      	bne.n	80047ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	4b31      	ldr	r3, [pc, #196]	; (8004810 <HAL_RCC_OscConfig+0x478>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fe f81c 	bl	800278c <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004758:	f7fe f818 	bl	800278c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e087      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	4b27      	ldr	r3, [pc, #156]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	019b      	lsls	r3, r3, #6
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	085b      	lsrs	r3, r3, #1
 800478e:	3b01      	subs	r3, #1
 8004790:	041b      	lsls	r3, r3, #16
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	491b      	ldr	r1, [pc, #108]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a0:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <HAL_RCC_OscConfig+0x478>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a6:	f7fd fff1 	bl	800278c <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ae:	f7fd ffed 	bl	800278c <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e05c      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c0:	4b11      	ldr	r3, [pc, #68]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x416>
 80047cc:	e054      	b.n	8004878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ce:	4b10      	ldr	r3, [pc, #64]	; (8004810 <HAL_RCC_OscConfig+0x478>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fd ffda 	bl	800278c <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fd ffd6 	bl	800278c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e045      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_RCC_OscConfig+0x470>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x444>
 80047fa:	e03d      	b.n	8004878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d107      	bne.n	8004814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e038      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
 8004808:	40023800 	.word	0x40023800
 800480c:	40007000 	.word	0x40007000
 8004810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004814:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_RCC_OscConfig+0x4ec>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d028      	beq.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d121      	bne.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d11a      	bne.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004844:	4013      	ands	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800484a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800484c:	4293      	cmp	r3, r2
 800484e:	d111      	bne.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	3b01      	subs	r3, #1
 800485e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d107      	bne.n	8004874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d001      	beq.n	8004878 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800

08004888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0cc      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800489c:	4b68      	ldr	r3, [pc, #416]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d90c      	bls.n	80048c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b65      	ldr	r3, [pc, #404]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	4b63      	ldr	r3, [pc, #396]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0b8      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d020      	beq.n	8004912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048dc:	4b59      	ldr	r3, [pc, #356]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4a58      	ldr	r2, [pc, #352]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f4:	4b53      	ldr	r3, [pc, #332]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a52      	ldr	r2, [pc, #328]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004900:	4b50      	ldr	r3, [pc, #320]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	494d      	ldr	r1, [pc, #308]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d044      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d107      	bne.n	8004936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	4b47      	ldr	r3, [pc, #284]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d119      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e07f      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b02      	cmp	r3, #2
 800493c:	d003      	beq.n	8004946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004942:	2b03      	cmp	r3, #3
 8004944:	d107      	bne.n	8004956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004946:	4b3f      	ldr	r3, [pc, #252]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e06f      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004956:	4b3b      	ldr	r3, [pc, #236]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e067      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f023 0203 	bic.w	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4934      	ldr	r1, [pc, #208]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	4313      	orrs	r3, r2
 8004976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004978:	f7fd ff08 	bl	800278c <HAL_GetTick>
 800497c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	e00a      	b.n	8004996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004980:	f7fd ff04 	bl	800278c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f241 3288 	movw	r2, #5000	; 0x1388
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e04f      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 020c 	and.w	r2, r3, #12
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d1eb      	bne.n	8004980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049a8:	4b25      	ldr	r3, [pc, #148]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d20c      	bcs.n	80049d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b6:	4b22      	ldr	r3, [pc, #136]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e032      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049dc:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4916      	ldr	r1, [pc, #88]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	490e      	ldr	r1, [pc, #56]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a0e:	f000 f821 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004a12:	4602      	mov	r2, r0
 8004a14:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	091b      	lsrs	r3, r3, #4
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	490a      	ldr	r1, [pc, #40]	; (8004a48 <HAL_RCC_ClockConfig+0x1c0>)
 8004a20:	5ccb      	ldrb	r3, [r1, r3]
 8004a22:	fa22 f303 	lsr.w	r3, r2, r3
 8004a26:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a2a:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fd fe68 	bl	8002704 <HAL_InitTick>

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40023c00 	.word	0x40023c00
 8004a44:	40023800 	.word	0x40023800
 8004a48:	0800cae4 	.word	0x0800cae4
 8004a4c:	2000000c 	.word	0x2000000c
 8004a50:	20000010 	.word	0x20000010

08004a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a58:	b094      	sub	sp, #80	; 0x50
 8004a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a60:	2300      	movs	r3, #0
 8004a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a64:	2300      	movs	r3, #0
 8004a66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a6c:	4b79      	ldr	r3, [pc, #484]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 030c 	and.w	r3, r3, #12
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d00d      	beq.n	8004a94 <HAL_RCC_GetSysClockFreq+0x40>
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	f200 80e1 	bhi.w	8004c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0x34>
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d003      	beq.n	8004a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a86:	e0db      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a88:	4b73      	ldr	r3, [pc, #460]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a8c:	e0db      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a8e:	4b73      	ldr	r3, [pc, #460]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8004a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a92:	e0d8      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a94:	4b6f      	ldr	r3, [pc, #444]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a9e:	4b6d      	ldr	r3, [pc, #436]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d063      	beq.n	8004b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aaa:	4b6a      	ldr	r3, [pc, #424]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	099b      	lsrs	r3, r3, #6
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abc:	633b      	str	r3, [r7, #48]	; 0x30
 8004abe:	2300      	movs	r3, #0
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ac6:	4622      	mov	r2, r4
 8004ac8:	462b      	mov	r3, r5
 8004aca:	f04f 0000 	mov.w	r0, #0
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	0159      	lsls	r1, r3, #5
 8004ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad8:	0150      	lsls	r0, r2, #5
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4621      	mov	r1, r4
 8004ae0:	1a51      	subs	r1, r2, r1
 8004ae2:	6139      	str	r1, [r7, #16]
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af8:	4659      	mov	r1, fp
 8004afa:	018b      	lsls	r3, r1, #6
 8004afc:	4651      	mov	r1, sl
 8004afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b02:	4651      	mov	r1, sl
 8004b04:	018a      	lsls	r2, r1, #6
 8004b06:	4651      	mov	r1, sl
 8004b08:	ebb2 0801 	subs.w	r8, r2, r1
 8004b0c:	4659      	mov	r1, fp
 8004b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b26:	4690      	mov	r8, r2
 8004b28:	4699      	mov	r9, r3
 8004b2a:	4623      	mov	r3, r4
 8004b2c:	eb18 0303 	adds.w	r3, r8, r3
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	462b      	mov	r3, r5
 8004b34:	eb49 0303 	adc.w	r3, r9, r3
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b46:	4629      	mov	r1, r5
 8004b48:	024b      	lsls	r3, r1, #9
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b50:	4621      	mov	r1, r4
 8004b52:	024a      	lsls	r2, r1, #9
 8004b54:	4610      	mov	r0, r2
 8004b56:	4619      	mov	r1, r3
 8004b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b64:	f7fc f848 	bl	8000bf8 <__aeabi_uldivmod>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b70:	e058      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b72:	4b38      	ldr	r3, [pc, #224]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	099b      	lsrs	r3, r3, #6
 8004b78:	2200      	movs	r2, #0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b82:	623b      	str	r3, [r7, #32]
 8004b84:	2300      	movs	r3, #0
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
 8004b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	f04f 0000 	mov.w	r0, #0
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	0159      	lsls	r1, r3, #5
 8004b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b9e:	0150      	lsls	r0, r2, #5
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004baa:	4649      	mov	r1, r9
 8004bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8004bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	00eb      	lsls	r3, r5, #3
 8004bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bda:	00e2      	lsls	r2, r4, #3
 8004bdc:	4614      	mov	r4, r2
 8004bde:	461d      	mov	r5, r3
 8004be0:	4643      	mov	r3, r8
 8004be2:	18e3      	adds	r3, r4, r3
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	464b      	mov	r3, r9
 8004be8:	eb45 0303 	adc.w	r3, r5, r3
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	028b      	lsls	r3, r1, #10
 8004bfe:	4621      	mov	r1, r4
 8004c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c04:	4621      	mov	r1, r4
 8004c06:	028a      	lsls	r2, r1, #10
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c0e:	2200      	movs	r2, #0
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	61fa      	str	r2, [r7, #28]
 8004c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c18:	f7fb ffee 	bl	8000bf8 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4613      	mov	r3, r2
 8004c22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c24:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	0c1b      	lsrs	r3, r3, #16
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	3301      	adds	r3, #1
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3750      	adds	r7, #80	; 0x50
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800
 8004c58:	00f42400 	.word	0x00f42400
 8004c5c:	007a1200 	.word	0x007a1200

08004c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c64:	4b03      	ldr	r3, [pc, #12]	; (8004c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c66:	681b      	ldr	r3, [r3, #0]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	2000000c 	.word	0x2000000c

08004c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c7c:	f7ff fff0 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004c80:	4602      	mov	r2, r0
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	0a9b      	lsrs	r3, r3, #10
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	4903      	ldr	r1, [pc, #12]	; (8004c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c8e:	5ccb      	ldrb	r3, [r1, r3]
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	0800caf4 	.word	0x0800caf4

08004ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ca4:	f7ff ffdc 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	0b5b      	lsrs	r3, r3, #13
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	4903      	ldr	r1, [pc, #12]	; (8004cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	0800caf4 	.word	0x0800caf4

08004cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e041      	b.n	8004d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fd fb78 	bl	80023e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f000 fda4 	bl	8005854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d001      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e04e      	b.n	8004e1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a23      	ldr	r2, [pc, #140]	; (8004e2c <HAL_TIM_Base_Start_IT+0xc4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d022      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004daa:	d01d      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <HAL_TIM_Base_Start_IT+0xc8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d018      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1e      	ldr	r2, [pc, #120]	; (8004e34 <HAL_TIM_Base_Start_IT+0xcc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d013      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1c      	ldr	r2, [pc, #112]	; (8004e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00e      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1b      	ldr	r2, [pc, #108]	; (8004e3c <HAL_TIM_Base_Start_IT+0xd4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d009      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a19      	ldr	r2, [pc, #100]	; (8004e40 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x80>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a18      	ldr	r2, [pc, #96]	; (8004e44 <HAL_TIM_Base_Start_IT+0xdc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d111      	bne.n	8004e0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b06      	cmp	r3, #6
 8004df8:	d010      	beq.n	8004e1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0a:	e007      	b.n	8004e1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800
 8004e38:	40000c00 	.word	0x40000c00
 8004e3c:	40010400 	.word	0x40010400
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40001800 	.word	0x40001800

08004e48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e041      	b.n	8004ede <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fd fade 	bl	8002430 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	4610      	mov	r0, r2
 8004e88:	f000 fce4 	bl	8005854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <HAL_TIM_PWM_Start+0x24>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	bf14      	ite	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	2300      	moveq	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	e022      	b.n	8004f52 <HAL_TIM_PWM_Start+0x6a>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d109      	bne.n	8004f26 <HAL_TIM_PWM_Start+0x3e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	bf14      	ite	ne
 8004f1e:	2301      	movne	r3, #1
 8004f20:	2300      	moveq	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	e015      	b.n	8004f52 <HAL_TIM_PWM_Start+0x6a>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d109      	bne.n	8004f40 <HAL_TIM_PWM_Start+0x58>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	bf14      	ite	ne
 8004f38:	2301      	movne	r3, #1
 8004f3a:	2300      	moveq	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e008      	b.n	8004f52 <HAL_TIM_PWM_Start+0x6a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	bf14      	ite	ne
 8004f4c:	2301      	movne	r3, #1
 8004f4e:	2300      	moveq	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e07c      	b.n	8005054 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d104      	bne.n	8004f6a <HAL_TIM_PWM_Start+0x82>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f68:	e013      	b.n	8004f92 <HAL_TIM_PWM_Start+0xaa>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d104      	bne.n	8004f7a <HAL_TIM_PWM_Start+0x92>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f78:	e00b      	b.n	8004f92 <HAL_TIM_PWM_Start+0xaa>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_PWM_Start+0xa2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f88:	e003      	b.n	8004f92 <HAL_TIM_PWM_Start+0xaa>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2201      	movs	r2, #1
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 ff44 	bl	8005e28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a2d      	ldr	r2, [pc, #180]	; (800505c <HAL_TIM_PWM_Start+0x174>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <HAL_TIM_PWM_Start+0xcc>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a2c      	ldr	r2, [pc, #176]	; (8005060 <HAL_TIM_PWM_Start+0x178>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d101      	bne.n	8004fb8 <HAL_TIM_PWM_Start+0xd0>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <HAL_TIM_PWM_Start+0xd2>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a22      	ldr	r2, [pc, #136]	; (800505c <HAL_TIM_PWM_Start+0x174>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d022      	beq.n	800501e <HAL_TIM_PWM_Start+0x136>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe0:	d01d      	beq.n	800501e <HAL_TIM_PWM_Start+0x136>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1f      	ldr	r2, [pc, #124]	; (8005064 <HAL_TIM_PWM_Start+0x17c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d018      	beq.n	800501e <HAL_TIM_PWM_Start+0x136>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1d      	ldr	r2, [pc, #116]	; (8005068 <HAL_TIM_PWM_Start+0x180>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <HAL_TIM_PWM_Start+0x136>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1c      	ldr	r2, [pc, #112]	; (800506c <HAL_TIM_PWM_Start+0x184>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00e      	beq.n	800501e <HAL_TIM_PWM_Start+0x136>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a16      	ldr	r2, [pc, #88]	; (8005060 <HAL_TIM_PWM_Start+0x178>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d009      	beq.n	800501e <HAL_TIM_PWM_Start+0x136>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a18      	ldr	r2, [pc, #96]	; (8005070 <HAL_TIM_PWM_Start+0x188>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d004      	beq.n	800501e <HAL_TIM_PWM_Start+0x136>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a16      	ldr	r2, [pc, #88]	; (8005074 <HAL_TIM_PWM_Start+0x18c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d111      	bne.n	8005042 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b06      	cmp	r3, #6
 800502e:	d010      	beq.n	8005052 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005040:	e007      	b.n	8005052 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0201 	orr.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40010000 	.word	0x40010000
 8005060:	40010400 	.word	0x40010400
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800
 800506c:	40000c00 	.word	0x40000c00
 8005070:	40014000 	.word	0x40014000
 8005074:	40001800 	.word	0x40001800

08005078 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e097      	b.n	80051bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d106      	bne.n	80050a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7fd f9e7 	bl	8002474 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2202      	movs	r2, #2
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050bc:	f023 0307 	bic.w	r3, r3, #7
 80050c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f000 fbc1 	bl	8005854 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	4313      	orrs	r3, r2
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005118:	f023 030c 	bic.w	r3, r3, #12
 800511c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005128:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	4313      	orrs	r3, r2
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	011a      	lsls	r2, r3, #4
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	031b      	lsls	r3, r3, #12
 8005148:	4313      	orrs	r3, r2
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005156:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800515e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	4313      	orrs	r3, r2
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d110      	bne.n	8005216 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d102      	bne.n	8005200 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80051fa:	7b7b      	ldrb	r3, [r7, #13]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d001      	beq.n	8005204 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e069      	b.n	80052d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005214:	e031      	b.n	800527a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b04      	cmp	r3, #4
 800521a:	d110      	bne.n	800523e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800521c:	7bbb      	ldrb	r3, [r7, #14]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d102      	bne.n	8005228 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005222:	7b3b      	ldrb	r3, [r7, #12]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d001      	beq.n	800522c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e055      	b.n	80052d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800523c:	e01d      	b.n	800527a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d108      	bne.n	8005256 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005244:	7bbb      	ldrb	r3, [r7, #14]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d105      	bne.n	8005256 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800524a:	7b7b      	ldrb	r3, [r7, #13]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d102      	bne.n	8005256 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005250:	7b3b      	ldrb	r3, [r7, #12]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d001      	beq.n	800525a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e03e      	b.n	80052d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2202      	movs	r2, #2
 8005276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_TIM_Encoder_Start+0xc4>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b04      	cmp	r3, #4
 8005284:	d008      	beq.n	8005298 <HAL_TIM_Encoder_Start+0xd4>
 8005286:	e00f      	b.n	80052a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2201      	movs	r2, #1
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fdc9 	bl	8005e28 <TIM_CCxChannelCmd>
      break;
 8005296:	e016      	b.n	80052c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2201      	movs	r2, #1
 800529e:	2104      	movs	r1, #4
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fdc1 	bl	8005e28 <TIM_CCxChannelCmd>
      break;
 80052a6:	e00e      	b.n	80052c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2201      	movs	r2, #1
 80052ae:	2100      	movs	r1, #0
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fdb9 	bl	8005e28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2201      	movs	r2, #1
 80052bc:	2104      	movs	r1, #4
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fdb2 	bl	8005e28 <TIM_CCxChannelCmd>
      break;
 80052c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d122      	bne.n	800533c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b02      	cmp	r3, #2
 8005302:	d11b      	bne.n	800533c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0202 	mvn.w	r2, #2
 800530c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fa77 	bl	8005816 <HAL_TIM_IC_CaptureCallback>
 8005328:	e005      	b.n	8005336 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa69 	bl	8005802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fa7a 	bl	800582a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b04      	cmp	r3, #4
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b04      	cmp	r3, #4
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0204 	mvn.w	r2, #4
 8005360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fa4d 	bl	8005816 <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fa3f 	bl	8005802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fa50 	bl	800582a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b08      	cmp	r3, #8
 800539c:	d122      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d11b      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0208 	mvn.w	r2, #8
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2204      	movs	r2, #4
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fa23 	bl	8005816 <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa15 	bl	8005802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fa26 	bl	800582a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0310 	and.w	r3, r3, #16
 80053ee:	2b10      	cmp	r3, #16
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d11b      	bne.n	8005438 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0210 	mvn.w	r2, #16
 8005408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2208      	movs	r2, #8
 800540e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f9f9 	bl	8005816 <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f9eb 	bl	8005802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f9fc 	bl	800582a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b01      	cmp	r3, #1
 8005444:	d10e      	bne.n	8005464 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b01      	cmp	r3, #1
 8005452:	d107      	bne.n	8005464 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0201 	mvn.w	r2, #1
 800545c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fc f96a 	bl	8001738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	d10e      	bne.n	8005490 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547c:	2b80      	cmp	r3, #128	; 0x80
 800547e:	d107      	bne.n	8005490 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fd78 	bl	8005f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	d10e      	bne.n	80054bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a8:	2b40      	cmp	r3, #64	; 0x40
 80054aa:	d107      	bne.n	80054bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f9c1 	bl	800583e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d10e      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d107      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0220 	mvn.w	r2, #32
 80054e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fd42 	bl	8005f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800550a:	2302      	movs	r3, #2
 800550c:	e0ae      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b0c      	cmp	r3, #12
 800551a:	f200 809f 	bhi.w	800565c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800551e:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	08005559 	.word	0x08005559
 8005528:	0800565d 	.word	0x0800565d
 800552c:	0800565d 	.word	0x0800565d
 8005530:	0800565d 	.word	0x0800565d
 8005534:	08005599 	.word	0x08005599
 8005538:	0800565d 	.word	0x0800565d
 800553c:	0800565d 	.word	0x0800565d
 8005540:	0800565d 	.word	0x0800565d
 8005544:	080055db 	.word	0x080055db
 8005548:	0800565d 	.word	0x0800565d
 800554c:	0800565d 	.word	0x0800565d
 8005550:	0800565d 	.word	0x0800565d
 8005554:	0800561b 	.word	0x0800561b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fa18 	bl	8005994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0208 	orr.w	r2, r2, #8
 8005572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0204 	bic.w	r2, r2, #4
 8005582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6999      	ldr	r1, [r3, #24]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	619a      	str	r2, [r3, #24]
      break;
 8005596:	e064      	b.n	8005662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fa68 	bl	8005a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6999      	ldr	r1, [r3, #24]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	021a      	lsls	r2, r3, #8
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	619a      	str	r2, [r3, #24]
      break;
 80055d8:	e043      	b.n	8005662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fabd 	bl	8005b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0208 	orr.w	r2, r2, #8
 80055f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69da      	ldr	r2, [r3, #28]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0204 	bic.w	r2, r2, #4
 8005604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69d9      	ldr	r1, [r3, #28]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	61da      	str	r2, [r3, #28]
      break;
 8005618:	e023      	b.n	8005662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fb11 	bl	8005c48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69da      	ldr	r2, [r3, #28]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69d9      	ldr	r1, [r3, #28]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	021a      	lsls	r2, r3, #8
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	61da      	str	r2, [r3, #28]
      break;
 800565a:	e002      	b.n	8005662 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	75fb      	strb	r3, [r7, #23]
      break;
 8005660:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800566a:	7dfb      	ldrb	r3, [r7, #23]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_TIM_ConfigClockSource+0x1c>
 800568c:	2302      	movs	r3, #2
 800568e:	e0b4      	b.n	80057fa <HAL_TIM_ConfigClockSource+0x186>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c8:	d03e      	beq.n	8005748 <HAL_TIM_ConfigClockSource+0xd4>
 80056ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ce:	f200 8087 	bhi.w	80057e0 <HAL_TIM_ConfigClockSource+0x16c>
 80056d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d6:	f000 8086 	beq.w	80057e6 <HAL_TIM_ConfigClockSource+0x172>
 80056da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056de:	d87f      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x16c>
 80056e0:	2b70      	cmp	r3, #112	; 0x70
 80056e2:	d01a      	beq.n	800571a <HAL_TIM_ConfigClockSource+0xa6>
 80056e4:	2b70      	cmp	r3, #112	; 0x70
 80056e6:	d87b      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x16c>
 80056e8:	2b60      	cmp	r3, #96	; 0x60
 80056ea:	d050      	beq.n	800578e <HAL_TIM_ConfigClockSource+0x11a>
 80056ec:	2b60      	cmp	r3, #96	; 0x60
 80056ee:	d877      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x16c>
 80056f0:	2b50      	cmp	r3, #80	; 0x50
 80056f2:	d03c      	beq.n	800576e <HAL_TIM_ConfigClockSource+0xfa>
 80056f4:	2b50      	cmp	r3, #80	; 0x50
 80056f6:	d873      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x16c>
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d058      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0x13a>
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d86f      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005700:	2b30      	cmp	r3, #48	; 0x30
 8005702:	d064      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x15a>
 8005704:	2b30      	cmp	r3, #48	; 0x30
 8005706:	d86b      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005708:	2b20      	cmp	r3, #32
 800570a:	d060      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x15a>
 800570c:	2b20      	cmp	r3, #32
 800570e:	d867      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d05c      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x15a>
 8005714:	2b10      	cmp	r3, #16
 8005716:	d05a      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x15a>
 8005718:	e062      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6899      	ldr	r1, [r3, #8]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f000 fb5d 	bl	8005de8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800573c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	609a      	str	r2, [r3, #8]
      break;
 8005746:	e04f      	b.n	80057e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	6899      	ldr	r1, [r3, #8]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f000 fb46 	bl	8005de8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800576a:	609a      	str	r2, [r3, #8]
      break;
 800576c:	e03c      	b.n	80057e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	6859      	ldr	r1, [r3, #4]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	461a      	mov	r2, r3
 800577c:	f000 faba 	bl	8005cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2150      	movs	r1, #80	; 0x50
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fb13 	bl	8005db2 <TIM_ITRx_SetConfig>
      break;
 800578c:	e02c      	b.n	80057e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	6859      	ldr	r1, [r3, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	461a      	mov	r2, r3
 800579c:	f000 fad9 	bl	8005d52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2160      	movs	r1, #96	; 0x60
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fb03 	bl	8005db2 <TIM_ITRx_SetConfig>
      break;
 80057ac:	e01c      	b.n	80057e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6859      	ldr	r1, [r3, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f000 fa9a 	bl	8005cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2140      	movs	r1, #64	; 0x40
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 faf3 	bl	8005db2 <TIM_ITRx_SetConfig>
      break;
 80057cc:	e00c      	b.n	80057e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f000 faea 	bl	8005db2 <TIM_ITRx_SetConfig>
      break;
 80057de:	e003      	b.n	80057e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
      break;
 80057e4:	e000      	b.n	80057e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a40      	ldr	r2, [pc, #256]	; (8005968 <TIM_Base_SetConfig+0x114>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d013      	beq.n	8005894 <TIM_Base_SetConfig+0x40>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005872:	d00f      	beq.n	8005894 <TIM_Base_SetConfig+0x40>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a3d      	ldr	r2, [pc, #244]	; (800596c <TIM_Base_SetConfig+0x118>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00b      	beq.n	8005894 <TIM_Base_SetConfig+0x40>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a3c      	ldr	r2, [pc, #240]	; (8005970 <TIM_Base_SetConfig+0x11c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d007      	beq.n	8005894 <TIM_Base_SetConfig+0x40>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a3b      	ldr	r2, [pc, #236]	; (8005974 <TIM_Base_SetConfig+0x120>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_Base_SetConfig+0x40>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a3a      	ldr	r2, [pc, #232]	; (8005978 <TIM_Base_SetConfig+0x124>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d108      	bne.n	80058a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2f      	ldr	r2, [pc, #188]	; (8005968 <TIM_Base_SetConfig+0x114>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d02b      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b4:	d027      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a2c      	ldr	r2, [pc, #176]	; (800596c <TIM_Base_SetConfig+0x118>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d023      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a2b      	ldr	r2, [pc, #172]	; (8005970 <TIM_Base_SetConfig+0x11c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d01f      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a2a      	ldr	r2, [pc, #168]	; (8005974 <TIM_Base_SetConfig+0x120>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01b      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a29      	ldr	r2, [pc, #164]	; (8005978 <TIM_Base_SetConfig+0x124>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d017      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a28      	ldr	r2, [pc, #160]	; (800597c <TIM_Base_SetConfig+0x128>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a27      	ldr	r2, [pc, #156]	; (8005980 <TIM_Base_SetConfig+0x12c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00f      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a26      	ldr	r2, [pc, #152]	; (8005984 <TIM_Base_SetConfig+0x130>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a25      	ldr	r2, [pc, #148]	; (8005988 <TIM_Base_SetConfig+0x134>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a24      	ldr	r2, [pc, #144]	; (800598c <TIM_Base_SetConfig+0x138>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a23      	ldr	r2, [pc, #140]	; (8005990 <TIM_Base_SetConfig+0x13c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d108      	bne.n	8005918 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a0a      	ldr	r2, [pc, #40]	; (8005968 <TIM_Base_SetConfig+0x114>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_Base_SetConfig+0xf8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a0c      	ldr	r2, [pc, #48]	; (8005978 <TIM_Base_SetConfig+0x124>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d103      	bne.n	8005954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	615a      	str	r2, [r3, #20]
}
 800595a:	bf00      	nop
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	40010000 	.word	0x40010000
 800596c:	40000400 	.word	0x40000400
 8005970:	40000800 	.word	0x40000800
 8005974:	40000c00 	.word	0x40000c00
 8005978:	40010400 	.word	0x40010400
 800597c:	40014000 	.word	0x40014000
 8005980:	40014400 	.word	0x40014400
 8005984:	40014800 	.word	0x40014800
 8005988:	40001800 	.word	0x40001800
 800598c:	40001c00 	.word	0x40001c00
 8005990:	40002000 	.word	0x40002000

08005994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f023 0201 	bic.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 0302 	bic.w	r3, r3, #2
 80059dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a20      	ldr	r2, [pc, #128]	; (8005a6c <TIM_OC1_SetConfig+0xd8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_OC1_SetConfig+0x64>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a1f      	ldr	r2, [pc, #124]	; (8005a70 <TIM_OC1_SetConfig+0xdc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d10c      	bne.n	8005a12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0308 	bic.w	r3, r3, #8
 80059fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f023 0304 	bic.w	r3, r3, #4
 8005a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <TIM_OC1_SetConfig+0xd8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_OC1_SetConfig+0x8e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a14      	ldr	r2, [pc, #80]	; (8005a70 <TIM_OC1_SetConfig+0xdc>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d111      	bne.n	8005a46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	621a      	str	r2, [r3, #32]
}
 8005a60:	bf00      	nop
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	40010000 	.word	0x40010000
 8005a70:	40010400 	.word	0x40010400

08005a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f023 0210 	bic.w	r2, r3, #16
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	021b      	lsls	r3, r3, #8
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f023 0320 	bic.w	r3, r3, #32
 8005abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a22      	ldr	r2, [pc, #136]	; (8005b58 <TIM_OC2_SetConfig+0xe4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_OC2_SetConfig+0x68>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a21      	ldr	r2, [pc, #132]	; (8005b5c <TIM_OC2_SetConfig+0xe8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d10d      	bne.n	8005af8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <TIM_OC2_SetConfig+0xe4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d003      	beq.n	8005b08 <TIM_OC2_SetConfig+0x94>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a16      	ldr	r2, [pc, #88]	; (8005b5c <TIM_OC2_SetConfig+0xe8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d113      	bne.n	8005b30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	621a      	str	r2, [r3, #32]
}
 8005b4a:	bf00      	nop
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40010400 	.word	0x40010400

08005b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a21      	ldr	r2, [pc, #132]	; (8005c40 <TIM_OC3_SetConfig+0xe0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_OC3_SetConfig+0x66>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a20      	ldr	r2, [pc, #128]	; (8005c44 <TIM_OC3_SetConfig+0xe4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d10d      	bne.n	8005be2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	021b      	lsls	r3, r3, #8
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a16      	ldr	r2, [pc, #88]	; (8005c40 <TIM_OC3_SetConfig+0xe0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d003      	beq.n	8005bf2 <TIM_OC3_SetConfig+0x92>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a15      	ldr	r2, [pc, #84]	; (8005c44 <TIM_OC3_SetConfig+0xe4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d113      	bne.n	8005c1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	621a      	str	r2, [r3, #32]
}
 8005c34:	bf00      	nop
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40010400 	.word	0x40010400

08005c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	031b      	lsls	r3, r3, #12
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a12      	ldr	r2, [pc, #72]	; (8005cec <TIM_OC4_SetConfig+0xa4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d003      	beq.n	8005cb0 <TIM_OC4_SetConfig+0x68>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a11      	ldr	r2, [pc, #68]	; (8005cf0 <TIM_OC4_SetConfig+0xa8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d109      	bne.n	8005cc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	019b      	lsls	r3, r3, #6
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40010000 	.word	0x40010000
 8005cf0:	40010400 	.word	0x40010400

08005cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f023 0201 	bic.w	r2, r3, #1
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f023 030a 	bic.w	r3, r3, #10
 8005d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b087      	sub	sp, #28
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f023 0210 	bic.w	r2, r3, #16
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	031b      	lsls	r3, r3, #12
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f043 0307 	orr.w	r3, r3, #7
 8005dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	609a      	str	r2, [r3, #8]
}
 8005ddc:	bf00      	nop
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	021a      	lsls	r2, r3, #8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	609a      	str	r2, [r3, #8]
}
 8005e1c:	bf00      	nop
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a1a      	ldr	r2, [r3, #32]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	401a      	ands	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a1a      	ldr	r2, [r3, #32]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 031f 	and.w	r3, r3, #31
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e60:	431a      	orrs	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	621a      	str	r2, [r3, #32]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
	...

08005e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e05a      	b.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a21      	ldr	r2, [pc, #132]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d022      	beq.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed8:	d01d      	beq.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1d      	ldr	r2, [pc, #116]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d018      	beq.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1b      	ldr	r2, [pc, #108]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d013      	beq.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1a      	ldr	r2, [pc, #104]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00e      	beq.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a18      	ldr	r2, [pc, #96]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d009      	beq.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a17      	ldr	r2, [pc, #92]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d004      	beq.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a15      	ldr	r2, [pc, #84]	; (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d10c      	bne.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40000400 	.word	0x40000400
 8005f58:	40000800 	.word	0x40000800
 8005f5c:	40000c00 	.word	0x40000c00
 8005f60:	40010400 	.word	0x40010400
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40001800 	.word	0x40001800

08005f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e03f      	b.n	8006026 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fc fb06 	bl	80025cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2224      	movs	r2, #36	; 0x24
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fddf 	bl	8006b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695a      	ldr	r2, [r3, #20]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800600c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b08a      	sub	sp, #40	; 0x28
 8006032:	af02      	add	r7, sp, #8
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	4613      	mov	r3, r2
 800603c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b20      	cmp	r3, #32
 800604c:	d17c      	bne.n	8006148 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_UART_Transmit+0x2c>
 8006054:	88fb      	ldrh	r3, [r7, #6]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e075      	b.n	800614a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_UART_Transmit+0x3e>
 8006068:	2302      	movs	r3, #2
 800606a:	e06e      	b.n	800614a <HAL_UART_Transmit+0x11c>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2221      	movs	r2, #33	; 0x21
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006082:	f7fc fb83 	bl	800278c <HAL_GetTick>
 8006086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	88fa      	ldrh	r2, [r7, #6]
 800608c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609c:	d108      	bne.n	80060b0 <HAL_UART_Transmit+0x82>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d104      	bne.n	80060b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	e003      	b.n	80060b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060b4:	2300      	movs	r3, #0
 80060b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060c0:	e02a      	b.n	8006118 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2200      	movs	r2, #0
 80060ca:	2180      	movs	r1, #128	; 0x80
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 fb1f 	bl	8006710 <UART_WaitOnFlagUntilTimeout>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e036      	b.n	800614a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10b      	bne.n	80060fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	3302      	adds	r3, #2
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e007      	b.n	800610a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	3301      	adds	r3, #1
 8006108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1cf      	bne.n	80060c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2200      	movs	r2, #0
 800612a:	2140      	movs	r1, #64	; 0x40
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 faef 	bl	8006710 <UART_WaitOnFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e006      	b.n	800614a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	e000      	b.n	800614a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006148:	2302      	movs	r3, #2
  }
}
 800614a:	4618      	mov	r0, r3
 800614c:	3720      	adds	r7, #32
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	4613      	mov	r3, r2
 800615e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b20      	cmp	r3, #32
 800616a:	d11d      	bne.n	80061a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_UART_Receive_IT+0x26>
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e016      	b.n	80061aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_UART_Receive_IT+0x38>
 8006186:	2302      	movs	r3, #2
 8006188:	e00f      	b.n	80061aa <HAL_UART_Receive_IT+0x58>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006198:	88fb      	ldrh	r3, [r7, #6]
 800619a:	461a      	mov	r2, r3
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fb24 	bl	80067ec <UART_Start_Receive_IT>
 80061a4:	4603      	mov	r3, r0
 80061a6:	e000      	b.n	80061aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80061a8:	2302      	movs	r3, #2
  }
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b0ba      	sub	sp, #232	; 0xe8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061da:	2300      	movs	r3, #0
 80061dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10f      	bne.n	800621a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fe:	f003 0320 	and.w	r3, r3, #32
 8006202:	2b00      	cmp	r3, #0
 8006204:	d009      	beq.n	800621a <HAL_UART_IRQHandler+0x66>
 8006206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fc07 	bl	8006a26 <UART_Receive_IT>
      return;
 8006218:	e256      	b.n	80066c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800621a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 80de 	beq.w	80063e0 <HAL_UART_IRQHandler+0x22c>
 8006224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d106      	bne.n	800623e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006234:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80d1 	beq.w	80063e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800623e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00b      	beq.n	8006262 <HAL_UART_IRQHandler+0xae>
 800624a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006252:	2b00      	cmp	r3, #0
 8006254:	d005      	beq.n	8006262 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	f043 0201 	orr.w	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00b      	beq.n	8006286 <HAL_UART_IRQHandler+0xd2>
 800626e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	f043 0202 	orr.w	r2, r3, #2
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00b      	beq.n	80062aa <HAL_UART_IRQHandler+0xf6>
 8006292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f043 0204 	orr.w	r2, r3, #4
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d011      	beq.n	80062da <HAL_UART_IRQHandler+0x126>
 80062b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d105      	bne.n	80062ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	f043 0208 	orr.w	r2, r3, #8
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 81ed 	beq.w	80066be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d008      	beq.n	8006302 <HAL_UART_IRQHandler+0x14e>
 80062f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fb92 	bl	8006a26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630c:	2b40      	cmp	r3, #64	; 0x40
 800630e:	bf0c      	ite	eq
 8006310:	2301      	moveq	r3, #1
 8006312:	2300      	movne	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d103      	bne.n	800632e <HAL_UART_IRQHandler+0x17a>
 8006326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800632a:	2b00      	cmp	r3, #0
 800632c:	d04f      	beq.n	80063ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa9a 	bl	8006868 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d141      	bne.n	80063c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3314      	adds	r3, #20
 8006348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800635c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3314      	adds	r3, #20
 800636a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800636e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800637a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1d9      	bne.n	8006342 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	2b00      	cmp	r3, #0
 8006394:	d013      	beq.n	80063be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	4a7d      	ldr	r2, [pc, #500]	; (8006590 <HAL_UART_IRQHandler+0x3dc>)
 800639c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fc fba3 	bl	8002aee <HAL_DMA_Abort_IT>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d016      	beq.n	80063dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063b8:	4610      	mov	r0, r2
 80063ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063bc:	e00e      	b.n	80063dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f990 	bl	80066e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c4:	e00a      	b.n	80063dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f98c 	bl	80066e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063cc:	e006      	b.n	80063dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f988 	bl	80066e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063da:	e170      	b.n	80066be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063dc:	bf00      	nop
    return;
 80063de:	e16e      	b.n	80066be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	f040 814a 	bne.w	800667e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 8143 	beq.w	800667e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 813c 	beq.w	800667e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006406:	2300      	movs	r3, #0
 8006408:	60bb      	str	r3, [r7, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	60bb      	str	r3, [r7, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006426:	2b40      	cmp	r3, #64	; 0x40
 8006428:	f040 80b4 	bne.w	8006594 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006438:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8140 	beq.w	80066c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800644a:	429a      	cmp	r2, r3
 800644c:	f080 8139 	bcs.w	80066c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006456:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006462:	f000 8088 	beq.w	8006576 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800647c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006492:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800649e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1d9      	bne.n	8006466 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3314      	adds	r3, #20
 80064b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c4:	f023 0301 	bic.w	r3, r3, #1
 80064c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3314      	adds	r3, #20
 80064d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e1      	bne.n	80064b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3314      	adds	r3, #20
 80064f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3314      	adds	r3, #20
 800650e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006512:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006514:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006518:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e3      	bne.n	80064ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006546:	f023 0310 	bic.w	r3, r3, #16
 800654a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	330c      	adds	r3, #12
 8006554:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006558:	65ba      	str	r2, [r7, #88]	; 0x58
 800655a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800655e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e3      	bne.n	8006534 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	4618      	mov	r0, r3
 8006572:	f7fc fa4c 	bl	8002a0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800657e:	b29b      	uxth	r3, r3
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	b29b      	uxth	r3, r3
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f8b6 	bl	80066f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800658c:	e099      	b.n	80066c2 <HAL_UART_IRQHandler+0x50e>
 800658e:	bf00      	nop
 8006590:	0800692f 	.word	0x0800692f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800659c:	b29b      	uxth	r3, r3
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 808b 	beq.w	80066c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80065b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8086 	beq.w	80066c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	330c      	adds	r3, #12
 80065c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065de:	647a      	str	r2, [r7, #68]	; 0x44
 80065e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e3      	bne.n	80065ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3314      	adds	r3, #20
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	623b      	str	r3, [r7, #32]
   return(result);
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	f023 0301 	bic.w	r3, r3, #1
 8006608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3314      	adds	r3, #20
 8006612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006616:	633a      	str	r2, [r7, #48]	; 0x30
 8006618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800661c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e3      	bne.n	80065f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	330c      	adds	r3, #12
 800663e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	60fb      	str	r3, [r7, #12]
   return(result);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0310 	bic.w	r3, r3, #16
 800664e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	330c      	adds	r3, #12
 8006658:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800665c:	61fa      	str	r2, [r7, #28]
 800665e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	69b9      	ldr	r1, [r7, #24]
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	617b      	str	r3, [r7, #20]
   return(result);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e3      	bne.n	8006638 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f83e 	bl	80066f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800667c:	e023      	b.n	80066c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <HAL_UART_IRQHandler+0x4ea>
 800668a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f95d 	bl	8006956 <UART_Transmit_IT>
    return;
 800669c:	e014      	b.n	80066c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800669e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00e      	beq.n	80066c8 <HAL_UART_IRQHandler+0x514>
 80066aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d008      	beq.n	80066c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f99d 	bl	80069f6 <UART_EndTransmit_IT>
    return;
 80066bc:	e004      	b.n	80066c8 <HAL_UART_IRQHandler+0x514>
    return;
 80066be:	bf00      	nop
 80066c0:	e002      	b.n	80066c8 <HAL_UART_IRQHandler+0x514>
      return;
 80066c2:	bf00      	nop
 80066c4:	e000      	b.n	80066c8 <HAL_UART_IRQHandler+0x514>
      return;
 80066c6:	bf00      	nop
  }
}
 80066c8:	37e8      	adds	r7, #232	; 0xe8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop

080066d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b090      	sub	sp, #64	; 0x40
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	4613      	mov	r3, r2
 800671e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006720:	e050      	b.n	80067c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006728:	d04c      	beq.n	80067c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800672a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <UART_WaitOnFlagUntilTimeout+0x30>
 8006730:	f7fc f82c 	bl	800278c <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800673c:	429a      	cmp	r2, r3
 800673e:	d241      	bcs.n	80067c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	330c      	adds	r3, #12
 8006746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	330c      	adds	r3, #12
 800675e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006760:	637a      	str	r2, [r7, #52]	; 0x34
 8006762:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e5      	bne.n	8006740 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3314      	adds	r3, #20
 800677a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	613b      	str	r3, [r7, #16]
   return(result);
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f023 0301 	bic.w	r3, r3, #1
 800678a:	63bb      	str	r3, [r7, #56]	; 0x38
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3314      	adds	r3, #20
 8006792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006794:	623a      	str	r2, [r7, #32]
 8006796:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	69f9      	ldr	r1, [r7, #28]
 800679a:	6a3a      	ldr	r2, [r7, #32]
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e5      	bne.n	8006774 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e00f      	b.n	80067e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	4013      	ands	r3, r2
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	bf0c      	ite	eq
 80067d4:	2301      	moveq	r3, #1
 80067d6:	2300      	movne	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	461a      	mov	r2, r3
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d09f      	beq.n	8006722 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3740      	adds	r7, #64	; 0x40
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	88fa      	ldrh	r2, [r7, #6]
 8006804:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	88fa      	ldrh	r2, [r7, #6]
 800680a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2222      	movs	r2, #34	; 0x22
 8006816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d007      	beq.n	800683a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006838:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695a      	ldr	r2, [r3, #20]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0201 	orr.w	r2, r2, #1
 8006848:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f042 0220 	orr.w	r2, r2, #32
 8006858:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b095      	sub	sp, #84	; 0x54
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	330c      	adds	r3, #12
 800688e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006890:	643a      	str	r2, [r7, #64]	; 0x40
 8006892:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006896:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800689e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e5      	bne.n	8006870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3314      	adds	r3, #20
 80068aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	f023 0301 	bic.w	r3, r3, #1
 80068ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3314      	adds	r3, #20
 80068c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e5      	bne.n	80068a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d119      	bne.n	8006914 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	330c      	adds	r3, #12
 80068e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f023 0310 	bic.w	r3, r3, #16
 80068f6:	647b      	str	r3, [r7, #68]	; 0x44
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	330c      	adds	r3, #12
 80068fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006900:	61ba      	str	r2, [r7, #24]
 8006902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	6979      	ldr	r1, [r7, #20]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	613b      	str	r3, [r7, #16]
   return(result);
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e5      	bne.n	80068e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006922:	bf00      	nop
 8006924:	3754      	adds	r7, #84	; 0x54
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f7ff fecb 	bl	80066e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800694e:	bf00      	nop
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006956:	b480      	push	{r7}
 8006958:	b085      	sub	sp, #20
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b21      	cmp	r3, #33	; 0x21
 8006968:	d13e      	bne.n	80069e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006972:	d114      	bne.n	800699e <UART_Transmit_IT+0x48>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d110      	bne.n	800699e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006990:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	1c9a      	adds	r2, r3, #2
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	621a      	str	r2, [r3, #32]
 800699c:	e008      	b.n	80069b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	1c59      	adds	r1, r3, #1
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6211      	str	r1, [r2, #32]
 80069a8:	781a      	ldrb	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	4619      	mov	r1, r3
 80069be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10f      	bne.n	80069e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	e000      	b.n	80069ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069e8:	2302      	movs	r3, #2
  }
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff fe5a 	bl	80066d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b08c      	sub	sp, #48	; 0x30
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b22      	cmp	r3, #34	; 0x22
 8006a38:	f040 80ab 	bne.w	8006b92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a44:	d117      	bne.n	8006a76 <UART_Receive_IT+0x50>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d113      	bne.n	8006a76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	1c9a      	adds	r2, r3, #2
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	629a      	str	r2, [r3, #40]	; 0x28
 8006a74:	e026      	b.n	8006ac4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a88:	d007      	beq.n	8006a9a <UART_Receive_IT+0x74>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <UART_Receive_IT+0x82>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d106      	bne.n	8006aa8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e008      	b.n	8006aba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d15a      	bne.n	8006b8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0220 	bic.w	r2, r2, #32
 8006ae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695a      	ldr	r2, [r3, #20]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0201 	bic.w	r2, r2, #1
 8006b06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d135      	bne.n	8006b84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	330c      	adds	r3, #12
 8006b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f023 0310 	bic.w	r3, r3, #16
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3e:	623a      	str	r2, [r7, #32]
 8006b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	69f9      	ldr	r1, [r7, #28]
 8006b44:	6a3a      	ldr	r2, [r7, #32]
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e5      	bne.n	8006b1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d10a      	bne.n	8006b76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b60:	2300      	movs	r3, #0
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff fdbb 	bl	80066f8 <HAL_UARTEx_RxEventCallback>
 8006b82:	e002      	b.n	8006b8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7fb fa61 	bl	800204c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e002      	b.n	8006b94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e000      	b.n	8006b94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b92:	2302      	movs	r3, #2
  }
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3730      	adds	r7, #48	; 0x30
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ba0:	b0c0      	sub	sp, #256	; 0x100
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb8:	68d9      	ldr	r1, [r3, #12]
 8006bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	ea40 0301 	orr.w	r3, r0, r1
 8006bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006bf4:	f021 010c 	bic.w	r1, r1, #12
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c02:	430b      	orrs	r3, r1
 8006c04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c16:	6999      	ldr	r1, [r3, #24]
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	ea40 0301 	orr.w	r3, r0, r1
 8006c22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b8f      	ldr	r3, [pc, #572]	; (8006e68 <UART_SetConfig+0x2cc>)
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d005      	beq.n	8006c3c <UART_SetConfig+0xa0>
 8006c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	4b8d      	ldr	r3, [pc, #564]	; (8006e6c <UART_SetConfig+0x2d0>)
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d104      	bne.n	8006c46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c3c:	f7fe f830 	bl	8004ca0 <HAL_RCC_GetPCLK2Freq>
 8006c40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c44:	e003      	b.n	8006c4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c46:	f7fe f817 	bl	8004c78 <HAL_RCC_GetPCLK1Freq>
 8006c4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c58:	f040 810c 	bne.w	8006e74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c6e:	4622      	mov	r2, r4
 8006c70:	462b      	mov	r3, r5
 8006c72:	1891      	adds	r1, r2, r2
 8006c74:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c76:	415b      	adcs	r3, r3
 8006c78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c7e:	4621      	mov	r1, r4
 8006c80:	eb12 0801 	adds.w	r8, r2, r1
 8006c84:	4629      	mov	r1, r5
 8006c86:	eb43 0901 	adc.w	r9, r3, r1
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	f04f 0300 	mov.w	r3, #0
 8006c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c9e:	4690      	mov	r8, r2
 8006ca0:	4699      	mov	r9, r3
 8006ca2:	4623      	mov	r3, r4
 8006ca4:	eb18 0303 	adds.w	r3, r8, r3
 8006ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cac:	462b      	mov	r3, r5
 8006cae:	eb49 0303 	adc.w	r3, r9, r3
 8006cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006cc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cca:	460b      	mov	r3, r1
 8006ccc:	18db      	adds	r3, r3, r3
 8006cce:	653b      	str	r3, [r7, #80]	; 0x50
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	eb42 0303 	adc.w	r3, r2, r3
 8006cd6:	657b      	str	r3, [r7, #84]	; 0x54
 8006cd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006cdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ce0:	f7f9 ff8a 	bl	8000bf8 <__aeabi_uldivmod>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4b61      	ldr	r3, [pc, #388]	; (8006e70 <UART_SetConfig+0x2d4>)
 8006cea:	fba3 2302 	umull	r2, r3, r3, r2
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	011c      	lsls	r4, r3, #4
 8006cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d04:	4642      	mov	r2, r8
 8006d06:	464b      	mov	r3, r9
 8006d08:	1891      	adds	r1, r2, r2
 8006d0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d0c:	415b      	adcs	r3, r3
 8006d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d14:	4641      	mov	r1, r8
 8006d16:	eb12 0a01 	adds.w	sl, r2, r1
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d34:	4692      	mov	sl, r2
 8006d36:	469b      	mov	fp, r3
 8006d38:	4643      	mov	r3, r8
 8006d3a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d42:	464b      	mov	r3, r9
 8006d44:	eb4b 0303 	adc.w	r3, fp, r3
 8006d48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d60:	460b      	mov	r3, r1
 8006d62:	18db      	adds	r3, r3, r3
 8006d64:	643b      	str	r3, [r7, #64]	; 0x40
 8006d66:	4613      	mov	r3, r2
 8006d68:	eb42 0303 	adc.w	r3, r2, r3
 8006d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d76:	f7f9 ff3f 	bl	8000bf8 <__aeabi_uldivmod>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4611      	mov	r1, r2
 8006d80:	4b3b      	ldr	r3, [pc, #236]	; (8006e70 <UART_SetConfig+0x2d4>)
 8006d82:	fba3 2301 	umull	r2, r3, r3, r1
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	2264      	movs	r2, #100	; 0x64
 8006d8a:	fb02 f303 	mul.w	r3, r2, r3
 8006d8e:	1acb      	subs	r3, r1, r3
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d96:	4b36      	ldr	r3, [pc, #216]	; (8006e70 <UART_SetConfig+0x2d4>)
 8006d98:	fba3 2302 	umull	r2, r3, r3, r2
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006da4:	441c      	add	r4, r3
 8006da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006db0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006db4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006db8:	4642      	mov	r2, r8
 8006dba:	464b      	mov	r3, r9
 8006dbc:	1891      	adds	r1, r2, r2
 8006dbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006dc0:	415b      	adcs	r3, r3
 8006dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006dc8:	4641      	mov	r1, r8
 8006dca:	1851      	adds	r1, r2, r1
 8006dcc:	6339      	str	r1, [r7, #48]	; 0x30
 8006dce:	4649      	mov	r1, r9
 8006dd0:	414b      	adcs	r3, r1
 8006dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006de0:	4659      	mov	r1, fp
 8006de2:	00cb      	lsls	r3, r1, #3
 8006de4:	4651      	mov	r1, sl
 8006de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dea:	4651      	mov	r1, sl
 8006dec:	00ca      	lsls	r2, r1, #3
 8006dee:	4610      	mov	r0, r2
 8006df0:	4619      	mov	r1, r3
 8006df2:	4603      	mov	r3, r0
 8006df4:	4642      	mov	r2, r8
 8006df6:	189b      	adds	r3, r3, r2
 8006df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dfc:	464b      	mov	r3, r9
 8006dfe:	460a      	mov	r2, r1
 8006e00:	eb42 0303 	adc.w	r3, r2, r3
 8006e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	18db      	adds	r3, r3, r3
 8006e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e22:	4613      	mov	r3, r2
 8006e24:	eb42 0303 	adc.w	r3, r2, r3
 8006e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e32:	f7f9 fee1 	bl	8000bf8 <__aeabi_uldivmod>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <UART_SetConfig+0x2d4>)
 8006e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	2164      	movs	r1, #100	; 0x64
 8006e44:	fb01 f303 	mul.w	r3, r1, r3
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	3332      	adds	r3, #50	; 0x32
 8006e4e:	4a08      	ldr	r2, [pc, #32]	; (8006e70 <UART_SetConfig+0x2d4>)
 8006e50:	fba2 2303 	umull	r2, r3, r2, r3
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	f003 0207 	and.w	r2, r3, #7
 8006e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4422      	add	r2, r4
 8006e62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e64:	e105      	b.n	8007072 <UART_SetConfig+0x4d6>
 8006e66:	bf00      	nop
 8006e68:	40011000 	.word	0x40011000
 8006e6c:	40011400 	.word	0x40011400
 8006e70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e86:	4642      	mov	r2, r8
 8006e88:	464b      	mov	r3, r9
 8006e8a:	1891      	adds	r1, r2, r2
 8006e8c:	6239      	str	r1, [r7, #32]
 8006e8e:	415b      	adcs	r3, r3
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
 8006e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e96:	4641      	mov	r1, r8
 8006e98:	1854      	adds	r4, r2, r1
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	eb43 0501 	adc.w	r5, r3, r1
 8006ea0:	f04f 0200 	mov.w	r2, #0
 8006ea4:	f04f 0300 	mov.w	r3, #0
 8006ea8:	00eb      	lsls	r3, r5, #3
 8006eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eae:	00e2      	lsls	r2, r4, #3
 8006eb0:	4614      	mov	r4, r2
 8006eb2:	461d      	mov	r5, r3
 8006eb4:	4643      	mov	r3, r8
 8006eb6:	18e3      	adds	r3, r4, r3
 8006eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	eb45 0303 	adc.w	r3, r5, r3
 8006ec2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ed2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	008b      	lsls	r3, r1, #2
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eec:	4621      	mov	r1, r4
 8006eee:	008a      	lsls	r2, r1, #2
 8006ef0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ef4:	f7f9 fe80 	bl	8000bf8 <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4b60      	ldr	r3, [pc, #384]	; (8007080 <UART_SetConfig+0x4e4>)
 8006efe:	fba3 2302 	umull	r2, r3, r3, r2
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	011c      	lsls	r4, r3, #4
 8006f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	1891      	adds	r1, r2, r2
 8006f1e:	61b9      	str	r1, [r7, #24]
 8006f20:	415b      	adcs	r3, r3
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f28:	4641      	mov	r1, r8
 8006f2a:	1851      	adds	r1, r2, r1
 8006f2c:	6139      	str	r1, [r7, #16]
 8006f2e:	4649      	mov	r1, r9
 8006f30:	414b      	adcs	r3, r1
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f40:	4659      	mov	r1, fp
 8006f42:	00cb      	lsls	r3, r1, #3
 8006f44:	4651      	mov	r1, sl
 8006f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f4a:	4651      	mov	r1, sl
 8006f4c:	00ca      	lsls	r2, r1, #3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4619      	mov	r1, r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	4642      	mov	r2, r8
 8006f56:	189b      	adds	r3, r3, r2
 8006f58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f5c:	464b      	mov	r3, r9
 8006f5e:	460a      	mov	r2, r1
 8006f60:	eb42 0303 	adc.w	r3, r2, r3
 8006f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f80:	4649      	mov	r1, r9
 8006f82:	008b      	lsls	r3, r1, #2
 8006f84:	4641      	mov	r1, r8
 8006f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f8a:	4641      	mov	r1, r8
 8006f8c:	008a      	lsls	r2, r1, #2
 8006f8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f92:	f7f9 fe31 	bl	8000bf8 <__aeabi_uldivmod>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4b39      	ldr	r3, [pc, #228]	; (8007080 <UART_SetConfig+0x4e4>)
 8006f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	2164      	movs	r1, #100	; 0x64
 8006fa4:	fb01 f303 	mul.w	r3, r1, r3
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	3332      	adds	r3, #50	; 0x32
 8006fae:	4a34      	ldr	r2, [pc, #208]	; (8007080 <UART_SetConfig+0x4e4>)
 8006fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fba:	441c      	add	r4, r3
 8006fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	673b      	str	r3, [r7, #112]	; 0x70
 8006fc4:	677a      	str	r2, [r7, #116]	; 0x74
 8006fc6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006fca:	4642      	mov	r2, r8
 8006fcc:	464b      	mov	r3, r9
 8006fce:	1891      	adds	r1, r2, r2
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	415b      	adcs	r3, r3
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fda:	4641      	mov	r1, r8
 8006fdc:	1851      	adds	r1, r2, r1
 8006fde:	6039      	str	r1, [r7, #0]
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	414b      	adcs	r3, r1
 8006fe4:	607b      	str	r3, [r7, #4]
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	f04f 0300 	mov.w	r3, #0
 8006fee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ff2:	4659      	mov	r1, fp
 8006ff4:	00cb      	lsls	r3, r1, #3
 8006ff6:	4651      	mov	r1, sl
 8006ff8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ffc:	4651      	mov	r1, sl
 8006ffe:	00ca      	lsls	r2, r1, #3
 8007000:	4610      	mov	r0, r2
 8007002:	4619      	mov	r1, r3
 8007004:	4603      	mov	r3, r0
 8007006:	4642      	mov	r2, r8
 8007008:	189b      	adds	r3, r3, r2
 800700a:	66bb      	str	r3, [r7, #104]	; 0x68
 800700c:	464b      	mov	r3, r9
 800700e:	460a      	mov	r2, r1
 8007010:	eb42 0303 	adc.w	r3, r2, r3
 8007014:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	663b      	str	r3, [r7, #96]	; 0x60
 8007020:	667a      	str	r2, [r7, #100]	; 0x64
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800702e:	4649      	mov	r1, r9
 8007030:	008b      	lsls	r3, r1, #2
 8007032:	4641      	mov	r1, r8
 8007034:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007038:	4641      	mov	r1, r8
 800703a:	008a      	lsls	r2, r1, #2
 800703c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007040:	f7f9 fdda 	bl	8000bf8 <__aeabi_uldivmod>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <UART_SetConfig+0x4e4>)
 800704a:	fba3 1302 	umull	r1, r3, r3, r2
 800704e:	095b      	lsrs	r3, r3, #5
 8007050:	2164      	movs	r1, #100	; 0x64
 8007052:	fb01 f303 	mul.w	r3, r1, r3
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	3332      	adds	r3, #50	; 0x32
 800705c:	4a08      	ldr	r2, [pc, #32]	; (8007080 <UART_SetConfig+0x4e4>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	095b      	lsrs	r3, r3, #5
 8007064:	f003 020f 	and.w	r2, r3, #15
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4422      	add	r2, r4
 8007070:	609a      	str	r2, [r3, #8]
}
 8007072:	bf00      	nop
 8007074:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007078:	46bd      	mov	sp, r7
 800707a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800707e:	bf00      	nop
 8007080:	51eb851f 	.word	0x51eb851f

08007084 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007084:	b084      	sub	sp, #16
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	f107 001c 	add.w	r0, r7, #28
 8007092:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	2b01      	cmp	r3, #1
 800709a:	d122      	bne.n	80070e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80070b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80070c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d105      	bne.n	80070d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 fbee 	bl	80088b8 <USB_CoreReset>
 80070dc:	4603      	mov	r3, r0
 80070de:	73fb      	strb	r3, [r7, #15]
 80070e0:	e01a      	b.n	8007118 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f001 fbe2 	bl	80088b8 <USB_CoreReset>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80070f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	639a      	str	r2, [r3, #56]	; 0x38
 800710a:	e005      	b.n	8007118 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	2b01      	cmp	r3, #1
 800711c:	d10b      	bne.n	8007136 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f043 0206 	orr.w	r2, r3, #6
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f043 0220 	orr.w	r2, r3, #32
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007136:	7bfb      	ldrb	r3, [r7, #15]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007142:	b004      	add	sp, #16
 8007144:	4770      	bx	lr
	...

08007148 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4613      	mov	r3, r2
 8007154:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	2b02      	cmp	r3, #2
 800715a:	d165      	bne.n	8007228 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4a41      	ldr	r2, [pc, #260]	; (8007264 <USB_SetTurnaroundTime+0x11c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d906      	bls.n	8007172 <USB_SetTurnaroundTime+0x2a>
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4a40      	ldr	r2, [pc, #256]	; (8007268 <USB_SetTurnaroundTime+0x120>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d202      	bcs.n	8007172 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800716c:	230f      	movs	r3, #15
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	e062      	b.n	8007238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	4a3c      	ldr	r2, [pc, #240]	; (8007268 <USB_SetTurnaroundTime+0x120>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d306      	bcc.n	8007188 <USB_SetTurnaroundTime+0x40>
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	4a3b      	ldr	r2, [pc, #236]	; (800726c <USB_SetTurnaroundTime+0x124>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d202      	bcs.n	8007188 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007182:	230e      	movs	r3, #14
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	e057      	b.n	8007238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	4a38      	ldr	r2, [pc, #224]	; (800726c <USB_SetTurnaroundTime+0x124>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d306      	bcc.n	800719e <USB_SetTurnaroundTime+0x56>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4a37      	ldr	r2, [pc, #220]	; (8007270 <USB_SetTurnaroundTime+0x128>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d202      	bcs.n	800719e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007198:	230d      	movs	r3, #13
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	e04c      	b.n	8007238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	4a33      	ldr	r2, [pc, #204]	; (8007270 <USB_SetTurnaroundTime+0x128>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d306      	bcc.n	80071b4 <USB_SetTurnaroundTime+0x6c>
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	4a32      	ldr	r2, [pc, #200]	; (8007274 <USB_SetTurnaroundTime+0x12c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d802      	bhi.n	80071b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80071ae:	230c      	movs	r3, #12
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	e041      	b.n	8007238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	4a2f      	ldr	r2, [pc, #188]	; (8007274 <USB_SetTurnaroundTime+0x12c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d906      	bls.n	80071ca <USB_SetTurnaroundTime+0x82>
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4a2e      	ldr	r2, [pc, #184]	; (8007278 <USB_SetTurnaroundTime+0x130>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d802      	bhi.n	80071ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80071c4:	230b      	movs	r3, #11
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	e036      	b.n	8007238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	4a2a      	ldr	r2, [pc, #168]	; (8007278 <USB_SetTurnaroundTime+0x130>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d906      	bls.n	80071e0 <USB_SetTurnaroundTime+0x98>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	4a29      	ldr	r2, [pc, #164]	; (800727c <USB_SetTurnaroundTime+0x134>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d802      	bhi.n	80071e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80071da:	230a      	movs	r3, #10
 80071dc:	617b      	str	r3, [r7, #20]
 80071de:	e02b      	b.n	8007238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	4a26      	ldr	r2, [pc, #152]	; (800727c <USB_SetTurnaroundTime+0x134>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d906      	bls.n	80071f6 <USB_SetTurnaroundTime+0xae>
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	4a25      	ldr	r2, [pc, #148]	; (8007280 <USB_SetTurnaroundTime+0x138>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d202      	bcs.n	80071f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80071f0:	2309      	movs	r3, #9
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	e020      	b.n	8007238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	4a21      	ldr	r2, [pc, #132]	; (8007280 <USB_SetTurnaroundTime+0x138>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d306      	bcc.n	800720c <USB_SetTurnaroundTime+0xc4>
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	4a20      	ldr	r2, [pc, #128]	; (8007284 <USB_SetTurnaroundTime+0x13c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d802      	bhi.n	800720c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007206:	2308      	movs	r3, #8
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	e015      	b.n	8007238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4a1d      	ldr	r2, [pc, #116]	; (8007284 <USB_SetTurnaroundTime+0x13c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d906      	bls.n	8007222 <USB_SetTurnaroundTime+0xda>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	4a1c      	ldr	r2, [pc, #112]	; (8007288 <USB_SetTurnaroundTime+0x140>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d202      	bcs.n	8007222 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800721c:	2307      	movs	r3, #7
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	e00a      	b.n	8007238 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007222:	2306      	movs	r3, #6
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	e007      	b.n	8007238 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d102      	bne.n	8007234 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800722e:	2309      	movs	r3, #9
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	e001      	b.n	8007238 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007234:	2309      	movs	r3, #9
 8007236:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	029b      	lsls	r3, r3, #10
 800724c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007250:	431a      	orrs	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	371c      	adds	r7, #28
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	00d8acbf 	.word	0x00d8acbf
 8007268:	00e4e1c0 	.word	0x00e4e1c0
 800726c:	00f42400 	.word	0x00f42400
 8007270:	01067380 	.word	0x01067380
 8007274:	011a499f 	.word	0x011a499f
 8007278:	01312cff 	.word	0x01312cff
 800727c:	014ca43f 	.word	0x014ca43f
 8007280:	016e3600 	.word	0x016e3600
 8007284:	01a6ab1f 	.word	0x01a6ab1f
 8007288:	01e84800 	.word	0x01e84800

0800728c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f043 0201 	orr.w	r2, r3, #1
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b083      	sub	sp, #12
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f023 0201 	bic.w	r2, r3, #1
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072ec:	78fb      	ldrb	r3, [r7, #3]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d115      	bne.n	800731e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072fe:	2001      	movs	r0, #1
 8007300:	f7fb fa50 	bl	80027a4 <HAL_Delay>
      ms++;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3301      	adds	r3, #1
 8007308:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 fa45 	bl	800879a <USB_GetMode>
 8007310:	4603      	mov	r3, r0
 8007312:	2b01      	cmp	r3, #1
 8007314:	d01e      	beq.n	8007354 <USB_SetCurrentMode+0x84>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b31      	cmp	r3, #49	; 0x31
 800731a:	d9f0      	bls.n	80072fe <USB_SetCurrentMode+0x2e>
 800731c:	e01a      	b.n	8007354 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d115      	bne.n	8007350 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007330:	2001      	movs	r0, #1
 8007332:	f7fb fa37 	bl	80027a4 <HAL_Delay>
      ms++;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3301      	adds	r3, #1
 800733a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 fa2c 	bl	800879a <USB_GetMode>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <USB_SetCurrentMode+0x84>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b31      	cmp	r3, #49	; 0x31
 800734c:	d9f0      	bls.n	8007330 <USB_SetCurrentMode+0x60>
 800734e:	e001      	b.n	8007354 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e005      	b.n	8007360 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b32      	cmp	r3, #50	; 0x32
 8007358:	d101      	bne.n	800735e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007368:	b084      	sub	sp, #16
 800736a:	b580      	push	{r7, lr}
 800736c:	b086      	sub	sp, #24
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	e009      	b.n	800739c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	3340      	adds	r3, #64	; 0x40
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	2200      	movs	r2, #0
 8007394:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	3301      	adds	r3, #1
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b0e      	cmp	r3, #14
 80073a0:	d9f2      	bls.n	8007388 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d11c      	bne.n	80073e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073b6:	f043 0302 	orr.w	r3, r3, #2
 80073ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	639a      	str	r2, [r3, #56]	; 0x38
 80073e0:	e00b      	b.n	80073fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007400:	461a      	mov	r2, r3
 8007402:	2300      	movs	r3, #0
 8007404:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740c:	4619      	mov	r1, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007414:	461a      	mov	r2, r3
 8007416:	680b      	ldr	r3, [r1, #0]
 8007418:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	2b01      	cmp	r3, #1
 800741e:	d10c      	bne.n	800743a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	2b00      	cmp	r3, #0
 8007424:	d104      	bne.n	8007430 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007426:	2100      	movs	r1, #0
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f965 	bl	80076f8 <USB_SetDevSpeed>
 800742e:	e008      	b.n	8007442 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007430:	2101      	movs	r1, #1
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f960 	bl	80076f8 <USB_SetDevSpeed>
 8007438:	e003      	b.n	8007442 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800743a:	2103      	movs	r1, #3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f95b 	bl	80076f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007442:	2110      	movs	r1, #16
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f8f3 	bl	8007630 <USB_FlushTxFifo>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f91f 	bl	8007698 <USB_FlushRxFifo>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746a:	461a      	mov	r2, r3
 800746c:	2300      	movs	r3, #0
 800746e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007476:	461a      	mov	r2, r3
 8007478:	2300      	movs	r3, #0
 800747a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007482:	461a      	mov	r2, r3
 8007484:	2300      	movs	r3, #0
 8007486:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007488:	2300      	movs	r3, #0
 800748a:	613b      	str	r3, [r7, #16]
 800748c:	e043      	b.n	8007516 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a4:	d118      	bne.n	80074d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10a      	bne.n	80074c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b8:	461a      	mov	r2, r3
 80074ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	e013      	b.n	80074ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ce:	461a      	mov	r2, r3
 80074d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	e008      	b.n	80074ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e4:	461a      	mov	r2, r3
 80074e6:	2300      	movs	r3, #0
 80074e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f6:	461a      	mov	r2, r3
 80074f8:	2300      	movs	r3, #0
 80074fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007508:	461a      	mov	r2, r3
 800750a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800750e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	3301      	adds	r3, #1
 8007514:	613b      	str	r3, [r7, #16]
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	429a      	cmp	r2, r3
 800751c:	d3b7      	bcc.n	800748e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800751e:	2300      	movs	r3, #0
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	e043      	b.n	80075ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800753a:	d118      	bne.n	800756e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754e:	461a      	mov	r2, r3
 8007550:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	e013      	b.n	8007580 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007564:	461a      	mov	r2, r3
 8007566:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	e008      	b.n	8007580 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757a:	461a      	mov	r2, r3
 800757c:	2300      	movs	r3, #0
 800757e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758c:	461a      	mov	r2, r3
 800758e:	2300      	movs	r3, #0
 8007590:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759e:	461a      	mov	r2, r3
 80075a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	3301      	adds	r3, #1
 80075aa:	613b      	str	r3, [r7, #16]
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d3b7      	bcc.n	8007524 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80075d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d105      	bne.n	80075e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	f043 0210 	orr.w	r2, r3, #16
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699a      	ldr	r2, [r3, #24]
 80075ec:	4b0f      	ldr	r3, [pc, #60]	; (800762c <USB_DevInit+0x2c4>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	f043 0208 	orr.w	r2, r3, #8
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007608:	2b01      	cmp	r3, #1
 800760a:	d107      	bne.n	800761c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007614:	f043 0304 	orr.w	r3, r3, #4
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007628:	b004      	add	sp, #16
 800762a:	4770      	bx	lr
 800762c:	803c3800 	.word	0x803c3800

08007630 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3301      	adds	r3, #1
 8007642:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4a13      	ldr	r2, [pc, #76]	; (8007694 <USB_FlushTxFifo+0x64>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d901      	bls.n	8007650 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e01b      	b.n	8007688 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	daf2      	bge.n	800763e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	019b      	lsls	r3, r3, #6
 8007660:	f043 0220 	orr.w	r2, r3, #32
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4a08      	ldr	r2, [pc, #32]	; (8007694 <USB_FlushTxFifo+0x64>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d901      	bls.n	800767a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e006      	b.n	8007688 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b20      	cmp	r3, #32
 8007684:	d0f0      	beq.n	8007668 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	00030d40 	.word	0x00030d40

08007698 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3301      	adds	r3, #1
 80076a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4a11      	ldr	r2, [pc, #68]	; (80076f4 <USB_FlushRxFifo+0x5c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d901      	bls.n	80076b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e018      	b.n	80076e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	daf2      	bge.n	80076a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2210      	movs	r2, #16
 80076c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	3301      	adds	r3, #1
 80076cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4a08      	ldr	r2, [pc, #32]	; (80076f4 <USB_FlushRxFifo+0x5c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d901      	bls.n	80076da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e006      	b.n	80076e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f003 0310 	and.w	r3, r3, #16
 80076e2:	2b10      	cmp	r3, #16
 80076e4:	d0f0      	beq.n	80076c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	00030d40 	.word	0x00030d40

080076f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	68f9      	ldr	r1, [r7, #12]
 8007714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007718:	4313      	orrs	r3, r2
 800771a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800772a:	b480      	push	{r7}
 800772c:	b087      	sub	sp, #28
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f003 0306 	and.w	r3, r3, #6
 8007742:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d102      	bne.n	8007750 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800774a:	2300      	movs	r3, #0
 800774c:	75fb      	strb	r3, [r7, #23]
 800774e:	e00a      	b.n	8007766 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b02      	cmp	r3, #2
 8007754:	d002      	beq.n	800775c <USB_GetDevSpeed+0x32>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b06      	cmp	r3, #6
 800775a:	d102      	bne.n	8007762 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800775c:	2302      	movs	r3, #2
 800775e:	75fb      	strb	r3, [r7, #23]
 8007760:	e001      	b.n	8007766 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007762:	230f      	movs	r3, #15
 8007764:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007766:	7dfb      	ldrb	r3, [r7, #23]
}
 8007768:	4618      	mov	r0, r3
 800776a:	371c      	adds	r7, #28
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	785b      	ldrb	r3, [r3, #1]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d13a      	bne.n	8007806 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007796:	69da      	ldr	r2, [r3, #28]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	2101      	movs	r1, #1
 80077a2:	fa01 f303 	lsl.w	r3, r1, r3
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	68f9      	ldr	r1, [r7, #12]
 80077aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077ae:	4313      	orrs	r3, r2
 80077b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d155      	bne.n	8007874 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	791b      	ldrb	r3, [r3, #4]
 80077e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	059b      	lsls	r3, r3, #22
 80077ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077ec:	4313      	orrs	r3, r2
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	0151      	lsls	r1, r2, #5
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	440a      	add	r2, r1
 80077f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	e036      	b.n	8007874 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780c:	69da      	ldr	r2, [r3, #28]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	f003 030f 	and.w	r3, r3, #15
 8007816:	2101      	movs	r1, #1
 8007818:	fa01 f303 	lsl.w	r3, r1, r3
 800781c:	041b      	lsls	r3, r3, #16
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007824:	4313      	orrs	r3, r2
 8007826:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d11a      	bne.n	8007874 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	791b      	ldrb	r3, [r3, #4]
 8007858:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800785a:	430b      	orrs	r3, r1
 800785c:	4313      	orrs	r3, r2
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	0151      	lsls	r1, r2, #5
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	440a      	add	r2, r1
 8007866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800786a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800786e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007872:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
	...

08007884 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	785b      	ldrb	r3, [r3, #1]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d161      	bne.n	8007964 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078b6:	d11f      	bne.n	80078f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	2101      	movs	r1, #1
 800790a:	fa01 f303 	lsl.w	r3, r1, r3
 800790e:	b29b      	uxth	r3, r3
 8007910:	43db      	mvns	r3, r3
 8007912:	68f9      	ldr	r1, [r7, #12]
 8007914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007918:	4013      	ands	r3, r2
 800791a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007922:	69da      	ldr	r2, [r3, #28]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	f003 030f 	and.w	r3, r3, #15
 800792c:	2101      	movs	r1, #1
 800792e:	fa01 f303 	lsl.w	r3, r1, r3
 8007932:	b29b      	uxth	r3, r3
 8007934:	43db      	mvns	r3, r3
 8007936:	68f9      	ldr	r1, [r7, #12]
 8007938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800793c:	4013      	ands	r3, r2
 800793e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	0159      	lsls	r1, r3, #5
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	440b      	add	r3, r1
 8007956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795a:	4619      	mov	r1, r3
 800795c:	4b35      	ldr	r3, [pc, #212]	; (8007a34 <USB_DeactivateEndpoint+0x1b0>)
 800795e:	4013      	ands	r3, r2
 8007960:	600b      	str	r3, [r1, #0]
 8007962:	e060      	b.n	8007a26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007976:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800797a:	d11f      	bne.n	80079bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	440a      	add	r2, r1
 8007992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007996:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800799a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	0151      	lsls	r1, r2, #5
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	440a      	add	r2, r1
 80079b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	f003 030f 	and.w	r3, r3, #15
 80079cc:	2101      	movs	r1, #1
 80079ce:	fa01 f303 	lsl.w	r3, r1, r3
 80079d2:	041b      	lsls	r3, r3, #16
 80079d4:	43db      	mvns	r3, r3
 80079d6:	68f9      	ldr	r1, [r7, #12]
 80079d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079dc:	4013      	ands	r3, r2
 80079de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e6:	69da      	ldr	r2, [r3, #28]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	f003 030f 	and.w	r3, r3, #15
 80079f0:	2101      	movs	r1, #1
 80079f2:	fa01 f303 	lsl.w	r3, r1, r3
 80079f6:	041b      	lsls	r3, r3, #16
 80079f8:	43db      	mvns	r3, r3
 80079fa:	68f9      	ldr	r1, [r7, #12]
 80079fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a00:	4013      	ands	r3, r2
 8007a02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	0159      	lsls	r1, r3, #5
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	440b      	add	r3, r1
 8007a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4b05      	ldr	r3, [pc, #20]	; (8007a38 <USB_DeactivateEndpoint+0x1b4>)
 8007a22:	4013      	ands	r3, r2
 8007a24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	ec337800 	.word	0xec337800
 8007a38:	eff37800 	.word	0xeff37800

08007a3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08a      	sub	sp, #40	; 0x28
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	f040 815c 	bne.w	8007d16 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d132      	bne.n	8007acc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	0151      	lsls	r1, r2, #5
 8007a78:	69fa      	ldr	r2, [r7, #28]
 8007a7a:	440a      	add	r2, r1
 8007a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	0151      	lsls	r1, r2, #5
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	440a      	add	r2, r1
 8007aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	0151      	lsls	r1, r2, #5
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	440a      	add	r2, r1
 8007ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac4:	0cdb      	lsrs	r3, r3, #19
 8007ac6:	04db      	lsls	r3, r3, #19
 8007ac8:	6113      	str	r3, [r2, #16]
 8007aca:	e074      	b.n	8007bb6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae6:	0cdb      	lsrs	r3, r3, #19
 8007ae8:	04db      	lsls	r3, r3, #19
 8007aea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	0151      	lsls	r1, r2, #5
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	440a      	add	r2, r1
 8007b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	6999      	ldr	r1, [r3, #24]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	440b      	add	r3, r1
 8007b28:	1e59      	subs	r1, r3, #1
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b32:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007b34:	4b9d      	ldr	r3, [pc, #628]	; (8007dac <USB_EPStartXfer+0x370>)
 8007b36:	400b      	ands	r3, r1
 8007b38:	69b9      	ldr	r1, [r7, #24]
 8007b3a:	0148      	lsls	r0, r1, #5
 8007b3c:	69f9      	ldr	r1, [r7, #28]
 8007b3e:	4401      	add	r1, r0
 8007b40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b44:	4313      	orrs	r3, r2
 8007b46:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b54:	691a      	ldr	r2, [r3, #16]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b5e:	69b9      	ldr	r1, [r7, #24]
 8007b60:	0148      	lsls	r0, r1, #5
 8007b62:	69f9      	ldr	r1, [r7, #28]
 8007b64:	4401      	add	r1, r0
 8007b66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	791b      	ldrb	r3, [r3, #4]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d11f      	bne.n	8007bb6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	0151      	lsls	r1, r2, #5
 8007b88:	69fa      	ldr	r2, [r7, #28]
 8007b8a:	440a      	add	r2, r1
 8007b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007b94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	0151      	lsls	r1, r2, #5
 8007ba8:	69fa      	ldr	r2, [r7, #28]
 8007baa:	440a      	add	r2, r1
 8007bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bb4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d14b      	bne.n	8007c54 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d009      	beq.n	8007bd8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	791b      	ldrb	r3, [r3, #4]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d128      	bne.n	8007c32 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d110      	bne.n	8007c12 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	0151      	lsls	r1, r2, #5
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	440a      	add	r2, r1
 8007c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	e00f      	b.n	8007c32 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	0151      	lsls	r1, r2, #5
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	440a      	add	r2, r1
 8007c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c30:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	0151      	lsls	r1, r2, #5
 8007c44:	69fa      	ldr	r2, [r7, #28]
 8007c46:	440a      	add	r2, r1
 8007c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	e133      	b.n	8007ebc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	69ba      	ldr	r2, [r7, #24]
 8007c64:	0151      	lsls	r1, r2, #5
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	440a      	add	r2, r1
 8007c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c72:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	791b      	ldrb	r3, [r3, #4]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d015      	beq.n	8007ca8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 811b 	beq.w	8007ebc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	f003 030f 	and.w	r3, r3, #15
 8007c96:	2101      	movs	r1, #1
 8007c98:	fa01 f303 	lsl.w	r3, r1, r3
 8007c9c:	69f9      	ldr	r1, [r7, #28]
 8007c9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	634b      	str	r3, [r1, #52]	; 0x34
 8007ca6:	e109      	b.n	8007ebc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d110      	bne.n	8007cda <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	0151      	lsls	r1, r2, #5
 8007cca:	69fa      	ldr	r2, [r7, #28]
 8007ccc:	440a      	add	r2, r1
 8007cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	e00f      	b.n	8007cfa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	0151      	lsls	r1, r2, #5
 8007cec:	69fa      	ldr	r2, [r7, #28]
 8007cee:	440a      	add	r2, r1
 8007cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cf8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	6919      	ldr	r1, [r3, #16]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	781a      	ldrb	r2, [r3, #0]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	b298      	uxth	r0, r3
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 fade 	bl	80082d0 <USB_WritePacket>
 8007d14:	e0d2      	b.n	8007ebc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	0151      	lsls	r1, r2, #5
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	440a      	add	r2, r1
 8007d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d30:	0cdb      	lsrs	r3, r3, #19
 8007d32:	04db      	lsls	r3, r3, #19
 8007d34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	0151      	lsls	r1, r2, #5
 8007d48:	69fa      	ldr	r2, [r7, #28]
 8007d4a:	440a      	add	r2, r1
 8007d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d126      	bne.n	8007db0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6e:	691a      	ldr	r2, [r3, #16]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d78:	69b9      	ldr	r1, [r7, #24]
 8007d7a:	0148      	lsls	r0, r1, #5
 8007d7c:	69f9      	ldr	r1, [r7, #28]
 8007d7e:	4401      	add	r1, r0
 8007d80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d84:	4313      	orrs	r3, r2
 8007d86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	0151      	lsls	r1, r2, #5
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	440a      	add	r2, r1
 8007d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007da2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007da6:	6113      	str	r3, [r2, #16]
 8007da8:	e03a      	b.n	8007e20 <USB_EPStartXfer+0x3e4>
 8007daa:	bf00      	nop
 8007dac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	699a      	ldr	r2, [r3, #24]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	4413      	add	r3, r2
 8007dba:	1e5a      	subs	r2, r3, #1
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	8afa      	ldrh	r2, [r7, #22]
 8007dcc:	fb03 f202 	mul.w	r2, r3, r2
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de0:	691a      	ldr	r2, [r3, #16]
 8007de2:	8afb      	ldrh	r3, [r7, #22]
 8007de4:	04d9      	lsls	r1, r3, #19
 8007de6:	4b38      	ldr	r3, [pc, #224]	; (8007ec8 <USB_EPStartXfer+0x48c>)
 8007de8:	400b      	ands	r3, r1
 8007dea:	69b9      	ldr	r1, [r7, #24]
 8007dec:	0148      	lsls	r0, r1, #5
 8007dee:	69f9      	ldr	r1, [r7, #28]
 8007df0:	4401      	add	r1, r0
 8007df2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007df6:	4313      	orrs	r3, r2
 8007df8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e06:	691a      	ldr	r2, [r3, #16]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e10:	69b9      	ldr	r1, [r7, #24]
 8007e12:	0148      	lsls	r0, r1, #5
 8007e14:	69f9      	ldr	r1, [r7, #28]
 8007e16:	4401      	add	r1, r0
 8007e18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d10d      	bne.n	8007e42 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d009      	beq.n	8007e42 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	6919      	ldr	r1, [r3, #16]
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3e:	460a      	mov	r2, r1
 8007e40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	791b      	ldrb	r3, [r3, #4]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d128      	bne.n	8007e9c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d110      	bne.n	8007e7c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	0151      	lsls	r1, r2, #5
 8007e6c:	69fa      	ldr	r2, [r7, #28]
 8007e6e:	440a      	add	r2, r1
 8007e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	e00f      	b.n	8007e9c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	0151      	lsls	r1, r2, #5
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	440a      	add	r2, r1
 8007e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	0151      	lsls	r1, r2, #5
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	440a      	add	r2, r1
 8007eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007eba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3720      	adds	r7, #32
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	1ff80000 	.word	0x1ff80000

08007ecc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	785b      	ldrb	r3, [r3, #1]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	f040 80ce 	bne.w	800808a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d132      	bne.n	8007f5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	0151      	lsls	r1, r2, #5
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	440a      	add	r2, r1
 8007f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	0151      	lsls	r1, r2, #5
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	440a      	add	r2, r1
 8007f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	0151      	lsls	r1, r2, #5
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	440a      	add	r2, r1
 8007f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f54:	0cdb      	lsrs	r3, r3, #19
 8007f56:	04db      	lsls	r3, r3, #19
 8007f58:	6113      	str	r3, [r2, #16]
 8007f5a:	e04e      	b.n	8007ffa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	0151      	lsls	r1, r2, #5
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	440a      	add	r2, r1
 8007f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f76:	0cdb      	lsrs	r3, r3, #19
 8007f78:	04db      	lsls	r3, r3, #19
 8007f7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	0151      	lsls	r1, r2, #5
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	440a      	add	r2, r1
 8007f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	699a      	ldr	r2, [r3, #24]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d903      	bls.n	8007fb4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	0151      	lsls	r1, r2, #5
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	440a      	add	r2, r1
 8007fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe0:	691a      	ldr	r2, [r3, #16]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fea:	6939      	ldr	r1, [r7, #16]
 8007fec:	0148      	lsls	r0, r1, #5
 8007fee:	6979      	ldr	r1, [r7, #20]
 8007ff0:	4401      	add	r1, r0
 8007ff2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d11e      	bne.n	800803e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d009      	beq.n	800801c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008014:	461a      	mov	r2, r3
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	0151      	lsls	r1, r2, #5
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	440a      	add	r2, r1
 8008032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008036:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	e097      	b.n	800816e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	0151      	lsls	r1, r2, #5
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	440a      	add	r2, r1
 8008054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008058:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800805c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 8083 	beq.w	800816e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800806e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	2101      	movs	r1, #1
 800807a:	fa01 f303 	lsl.w	r3, r1, r3
 800807e:	6979      	ldr	r1, [r7, #20]
 8008080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008084:	4313      	orrs	r3, r2
 8008086:	634b      	str	r3, [r1, #52]	; 0x34
 8008088:	e071      	b.n	800816e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	0151      	lsls	r1, r2, #5
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	440a      	add	r2, r1
 80080a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080a4:	0cdb      	lsrs	r3, r3, #19
 80080a6:	04db      	lsls	r3, r3, #19
 80080a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	0151      	lsls	r1, r2, #5
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	440a      	add	r2, r1
 80080c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	0151      	lsls	r1, r2, #5
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	440a      	add	r2, r1
 80080fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008100:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008104:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008112:	691a      	ldr	r2, [r3, #16]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800811c:	6939      	ldr	r1, [r7, #16]
 800811e:	0148      	lsls	r0, r1, #5
 8008120:	6979      	ldr	r1, [r7, #20]
 8008122:	4401      	add	r1, r0
 8008124:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008128:	4313      	orrs	r3, r2
 800812a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800812c:	79fb      	ldrb	r3, [r7, #7]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d10d      	bne.n	800814e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	6919      	ldr	r1, [r3, #16]
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814a:	460a      	mov	r2, r1
 800814c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	0151      	lsls	r1, r2, #5
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	440a      	add	r2, r1
 8008164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008168:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800816c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d14a      	bne.n	8008230 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081b2:	f040 8086 	bne.w	80082c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	7812      	ldrb	r2, [r2, #0]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	7812      	ldrb	r2, [r2, #0]
 80081ee:	0151      	lsls	r1, r2, #5
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	440a      	add	r2, r1
 80081f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3301      	adds	r3, #1
 8008202:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f242 7210 	movw	r2, #10000	; 0x2710
 800820a:	4293      	cmp	r3, r2
 800820c:	d902      	bls.n	8008214 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	75fb      	strb	r3, [r7, #23]
          break;
 8008212:	e056      	b.n	80082c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800822c:	d0e7      	beq.n	80081fe <USB_EPStopXfer+0x82>
 800822e:	e048      	b.n	80082c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008248:	d13b      	bne.n	80082c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	7812      	ldrb	r2, [r2, #0]
 800825e:	0151      	lsls	r1, r2, #5
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	440a      	add	r2, r1
 8008264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008268:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800826c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	7812      	ldrb	r2, [r2, #0]
 8008282:	0151      	lsls	r1, r2, #5
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	440a      	add	r2, r1
 8008288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800828c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008290:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f242 7210 	movw	r2, #10000	; 0x2710
 800829e:	4293      	cmp	r3, r2
 80082a0:	d902      	bls.n	80082a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	75fb      	strb	r3, [r7, #23]
          break;
 80082a6:	e00c      	b.n	80082c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082c0:	d0e7      	beq.n	8008292 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	371c      	adds	r7, #28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b089      	sub	sp, #36	; 0x24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	4611      	mov	r1, r2
 80082dc:	461a      	mov	r2, r3
 80082de:	460b      	mov	r3, r1
 80082e0:	71fb      	strb	r3, [r7, #7]
 80082e2:	4613      	mov	r3, r2
 80082e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d123      	bne.n	800833e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082f6:	88bb      	ldrh	r3, [r7, #4]
 80082f8:	3303      	adds	r3, #3
 80082fa:	089b      	lsrs	r3, r3, #2
 80082fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082fe:	2300      	movs	r3, #0
 8008300:	61bb      	str	r3, [r7, #24]
 8008302:	e018      	b.n	8008336 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	031a      	lsls	r2, r3, #12
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	4413      	add	r3, r2
 800830c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008310:	461a      	mov	r2, r3
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	3301      	adds	r3, #1
 800831c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	3301      	adds	r3, #1
 8008322:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	3301      	adds	r3, #1
 8008328:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	3301      	adds	r3, #1
 800832e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	3301      	adds	r3, #1
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	429a      	cmp	r2, r3
 800833c:	d3e2      	bcc.n	8008304 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3724      	adds	r7, #36	; 0x24
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800834c:	b480      	push	{r7}
 800834e:	b08b      	sub	sp, #44	; 0x2c
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	4613      	mov	r3, r2
 8008358:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008362:	88fb      	ldrh	r3, [r7, #6]
 8008364:	089b      	lsrs	r3, r3, #2
 8008366:	b29b      	uxth	r3, r3
 8008368:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800836a:	88fb      	ldrh	r3, [r7, #6]
 800836c:	f003 0303 	and.w	r3, r3, #3
 8008370:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008372:	2300      	movs	r3, #0
 8008374:	623b      	str	r3, [r7, #32]
 8008376:	e014      	b.n	80083a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	601a      	str	r2, [r3, #0]
    pDest++;
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	3301      	adds	r3, #1
 8008388:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	3301      	adds	r3, #1
 800838e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	3301      	adds	r3, #1
 8008394:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	3301      	adds	r3, #1
 800839a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	3301      	adds	r3, #1
 80083a0:	623b      	str	r3, [r7, #32]
 80083a2:	6a3a      	ldr	r2, [r7, #32]
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d3e6      	bcc.n	8008378 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80083aa:	8bfb      	ldrh	r3, [r7, #30]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01e      	beq.n	80083ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ba:	461a      	mov	r2, r3
 80083bc:	f107 0310 	add.w	r3, r7, #16
 80083c0:	6812      	ldr	r2, [r2, #0]
 80083c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	fa22 f303 	lsr.w	r3, r2, r3
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	701a      	strb	r2, [r3, #0]
      i++;
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	3301      	adds	r3, #1
 80083da:	623b      	str	r3, [r7, #32]
      pDest++;
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	3301      	adds	r3, #1
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80083e2:	8bfb      	ldrh	r3, [r7, #30]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083e8:	8bfb      	ldrh	r3, [r7, #30]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1ea      	bne.n	80083c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	372c      	adds	r7, #44	; 0x2c
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	785b      	ldrb	r3, [r3, #1]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d12c      	bne.n	8008472 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	db12      	blt.n	8008450 <USB_EPSetStall+0x54>
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00f      	beq.n	8008450 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	0151      	lsls	r1, r2, #5
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	440a      	add	r2, r1
 8008446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800844a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800844e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	0151      	lsls	r1, r2, #5
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	440a      	add	r2, r1
 8008466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800846a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	e02b      	b.n	80084ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	db12      	blt.n	80084aa <USB_EPSetStall+0xae>
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00f      	beq.n	80084aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	0151      	lsls	r1, r2, #5
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	440a      	add	r2, r1
 80084c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	785b      	ldrb	r3, [r3, #1]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d128      	bne.n	8008546 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	0151      	lsls	r1, r2, #5
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	440a      	add	r2, r1
 800850a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800850e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008512:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	791b      	ldrb	r3, [r3, #4]
 8008518:	2b03      	cmp	r3, #3
 800851a:	d003      	beq.n	8008524 <USB_EPClearStall+0x4c>
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	791b      	ldrb	r3, [r3, #4]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d138      	bne.n	8008596 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	0151      	lsls	r1, r2, #5
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	440a      	add	r2, r1
 800853a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800853e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008542:	6013      	str	r3, [r2, #0]
 8008544:	e027      	b.n	8008596 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	4413      	add	r3, r2
 800854e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	0151      	lsls	r1, r2, #5
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	440a      	add	r2, r1
 800855c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008560:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008564:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	791b      	ldrb	r3, [r3, #4]
 800856a:	2b03      	cmp	r3, #3
 800856c:	d003      	beq.n	8008576 <USB_EPClearStall+0x9e>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	791b      	ldrb	r3, [r3, #4]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d10f      	bne.n	8008596 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	440a      	add	r2, r1
 800858c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008594:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80085c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80085d8:	68f9      	ldr	r1, [r7, #12]
 80085da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085de:	4313      	orrs	r3, r2
 80085e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800860a:	f023 0303 	bic.w	r3, r3, #3
 800860e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800861e:	f023 0302 	bic.w	r3, r3, #2
 8008622:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800864c:	f023 0303 	bic.w	r3, r3, #3
 8008650:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008660:	f043 0302 	orr.w	r3, r3, #2
 8008664:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	4013      	ands	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800868c:	68fb      	ldr	r3, [r7, #12]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800869a:	b480      	push	{r7}
 800869c:	b085      	sub	sp, #20
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	4013      	ands	r3, r2
 80086bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	0c1b      	lsrs	r3, r3, #16
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	4013      	ands	r3, r2
 80086f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	b29b      	uxth	r3, r3
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008702:	b480      	push	{r7}
 8008704:	b085      	sub	sp, #20
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	460b      	mov	r3, r1
 800870c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008712:	78fb      	ldrb	r3, [r7, #3]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	4013      	ands	r3, r2
 800872e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008730:	68bb      	ldr	r3, [r7, #8]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800873e:	b480      	push	{r7}
 8008740:	b087      	sub	sp, #28
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	460b      	mov	r3, r1
 8008748:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008760:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008762:	78fb      	ldrb	r3, [r7, #3]
 8008764:	f003 030f 	and.w	r3, r3, #15
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	fa22 f303 	lsr.w	r3, r2, r3
 800876e:	01db      	lsls	r3, r3, #7
 8008770:	b2db      	uxtb	r3, r3
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	4313      	orrs	r3, r2
 8008776:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008778:	78fb      	ldrb	r3, [r7, #3]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4013      	ands	r3, r2
 800878a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800878c:	68bb      	ldr	r3, [r7, #8]
}
 800878e:	4618      	mov	r0, r3
 8008790:	371c      	adds	r7, #28
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	f003 0301 	and.w	r3, r3, #1
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b085      	sub	sp, #20
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80087d4:	f023 0307 	bic.w	r3, r3, #7
 80087d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	460b      	mov	r3, r1
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	333c      	adds	r3, #60	; 0x3c
 8008812:	3304      	adds	r3, #4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4a26      	ldr	r2, [pc, #152]	; (80088b4 <USB_EP0_OutStart+0xb8>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d90a      	bls.n	8008836 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800882c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008830:	d101      	bne.n	8008836 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	e037      	b.n	80088a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883c:	461a      	mov	r2, r3
 800883e:	2300      	movs	r3, #0
 8008840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008854:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008864:	f043 0318 	orr.w	r3, r3, #24
 8008868:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008878:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800887c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800887e:	7afb      	ldrb	r3, [r7, #11]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d10f      	bne.n	80088a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800889e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80088a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	4f54300a 	.word	0x4f54300a

080088b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3301      	adds	r3, #1
 80088c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4a13      	ldr	r2, [pc, #76]	; (800891c <USB_CoreReset+0x64>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d901      	bls.n	80088d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e01b      	b.n	800890e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	daf2      	bge.n	80088c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	f043 0201 	orr.w	r2, r3, #1
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3301      	adds	r3, #1
 80088f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4a09      	ldr	r2, [pc, #36]	; (800891c <USB_CoreReset+0x64>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d901      	bls.n	8008900 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e006      	b.n	800890e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b01      	cmp	r3, #1
 800890a:	d0f0      	beq.n	80088ee <USB_CoreReset+0x36>

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	00030d40 	.word	0x00030d40

08008920 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800892c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008930:	f002 fc7e 	bl	800b230 <USBD_static_malloc>
 8008934:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d109      	bne.n	8008950 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	32b0      	adds	r2, #176	; 0xb0
 8008946:	2100      	movs	r1, #0
 8008948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800894c:	2302      	movs	r3, #2
 800894e:	e0d4      	b.n	8008afa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008950:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008954:	2100      	movs	r1, #0
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f002 fcf6 	bl	800b348 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	32b0      	adds	r2, #176	; 0xb0
 8008966:	68f9      	ldr	r1, [r7, #12]
 8008968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	32b0      	adds	r2, #176	; 0xb0
 8008976:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	7c1b      	ldrb	r3, [r3, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d138      	bne.n	80089fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008988:	4b5e      	ldr	r3, [pc, #376]	; (8008b04 <USBD_CDC_Init+0x1e4>)
 800898a:	7819      	ldrb	r1, [r3, #0]
 800898c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008990:	2202      	movs	r2, #2
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f002 fb29 	bl	800afea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008998:	4b5a      	ldr	r3, [pc, #360]	; (8008b04 <USBD_CDC_Init+0x1e4>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	f003 020f 	and.w	r2, r3, #15
 80089a0:	6879      	ldr	r1, [r7, #4]
 80089a2:	4613      	mov	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	440b      	add	r3, r1
 80089ac:	3324      	adds	r3, #36	; 0x24
 80089ae:	2201      	movs	r2, #1
 80089b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80089b2:	4b55      	ldr	r3, [pc, #340]	; (8008b08 <USBD_CDC_Init+0x1e8>)
 80089b4:	7819      	ldrb	r1, [r3, #0]
 80089b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089ba:	2202      	movs	r2, #2
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f002 fb14 	bl	800afea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089c2:	4b51      	ldr	r3, [pc, #324]	; (8008b08 <USBD_CDC_Init+0x1e8>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	f003 020f 	and.w	r2, r3, #15
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	440b      	add	r3, r1
 80089d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089da:	2201      	movs	r2, #1
 80089dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80089de:	4b4b      	ldr	r3, [pc, #300]	; (8008b0c <USBD_CDC_Init+0x1ec>)
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	f003 020f 	and.w	r2, r3, #15
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	4613      	mov	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	440b      	add	r3, r1
 80089f2:	3326      	adds	r3, #38	; 0x26
 80089f4:	2210      	movs	r2, #16
 80089f6:	801a      	strh	r2, [r3, #0]
 80089f8:	e035      	b.n	8008a66 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80089fa:	4b42      	ldr	r3, [pc, #264]	; (8008b04 <USBD_CDC_Init+0x1e4>)
 80089fc:	7819      	ldrb	r1, [r3, #0]
 80089fe:	2340      	movs	r3, #64	; 0x40
 8008a00:	2202      	movs	r2, #2
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f002 faf1 	bl	800afea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a08:	4b3e      	ldr	r3, [pc, #248]	; (8008b04 <USBD_CDC_Init+0x1e4>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	f003 020f 	and.w	r2, r3, #15
 8008a10:	6879      	ldr	r1, [r7, #4]
 8008a12:	4613      	mov	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	440b      	add	r3, r1
 8008a1c:	3324      	adds	r3, #36	; 0x24
 8008a1e:	2201      	movs	r2, #1
 8008a20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a22:	4b39      	ldr	r3, [pc, #228]	; (8008b08 <USBD_CDC_Init+0x1e8>)
 8008a24:	7819      	ldrb	r1, [r3, #0]
 8008a26:	2340      	movs	r3, #64	; 0x40
 8008a28:	2202      	movs	r2, #2
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f002 fadd 	bl	800afea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a30:	4b35      	ldr	r3, [pc, #212]	; (8008b08 <USBD_CDC_Init+0x1e8>)
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	f003 020f 	and.w	r2, r3, #15
 8008a38:	6879      	ldr	r1, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a48:	2201      	movs	r2, #1
 8008a4a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008a4c:	4b2f      	ldr	r3, [pc, #188]	; (8008b0c <USBD_CDC_Init+0x1ec>)
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	f003 020f 	and.w	r2, r3, #15
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	4613      	mov	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	440b      	add	r3, r1
 8008a60:	3326      	adds	r3, #38	; 0x26
 8008a62:	2210      	movs	r2, #16
 8008a64:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a66:	4b29      	ldr	r3, [pc, #164]	; (8008b0c <USBD_CDC_Init+0x1ec>)
 8008a68:	7819      	ldrb	r1, [r3, #0]
 8008a6a:	2308      	movs	r3, #8
 8008a6c:	2203      	movs	r2, #3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f002 fabb 	bl	800afea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008a74:	4b25      	ldr	r3, [pc, #148]	; (8008b0c <USBD_CDC_Init+0x1ec>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	f003 020f 	and.w	r2, r3, #15
 8008a7c:	6879      	ldr	r1, [r7, #4]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	440b      	add	r3, r1
 8008a88:	3324      	adds	r3, #36	; 0x24
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	33b0      	adds	r3, #176	; 0xb0
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e018      	b.n	8008afa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	7c1b      	ldrb	r3, [r3, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10a      	bne.n	8008ae6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ad0:	4b0d      	ldr	r3, [pc, #52]	; (8008b08 <USBD_CDC_Init+0x1e8>)
 8008ad2:	7819      	ldrb	r1, [r3, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f002 fb72 	bl	800b1c8 <USBD_LL_PrepareReceive>
 8008ae4:	e008      	b.n	8008af8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ae6:	4b08      	ldr	r3, [pc, #32]	; (8008b08 <USBD_CDC_Init+0x1e8>)
 8008ae8:	7819      	ldrb	r1, [r3, #0]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008af0:	2340      	movs	r3, #64	; 0x40
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f002 fb68 	bl	800b1c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	2000009f 	.word	0x2000009f
 8008b08:	200000a0 	.word	0x200000a0
 8008b0c:	200000a1 	.word	0x200000a1

08008b10 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008b1c:	4b3a      	ldr	r3, [pc, #232]	; (8008c08 <USBD_CDC_DeInit+0xf8>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f002 fa87 	bl	800b036 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008b28:	4b37      	ldr	r3, [pc, #220]	; (8008c08 <USBD_CDC_DeInit+0xf8>)
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	f003 020f 	and.w	r2, r3, #15
 8008b30:	6879      	ldr	r1, [r7, #4]
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	440b      	add	r3, r1
 8008b3c:	3324      	adds	r3, #36	; 0x24
 8008b3e:	2200      	movs	r2, #0
 8008b40:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008b42:	4b32      	ldr	r3, [pc, #200]	; (8008c0c <USBD_CDC_DeInit+0xfc>)
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f002 fa74 	bl	800b036 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008b4e:	4b2f      	ldr	r3, [pc, #188]	; (8008c0c <USBD_CDC_DeInit+0xfc>)
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	f003 020f 	and.w	r2, r3, #15
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	440b      	add	r3, r1
 8008b62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b66:	2200      	movs	r2, #0
 8008b68:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008b6a:	4b29      	ldr	r3, [pc, #164]	; (8008c10 <USBD_CDC_DeInit+0x100>)
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f002 fa60 	bl	800b036 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008b76:	4b26      	ldr	r3, [pc, #152]	; (8008c10 <USBD_CDC_DeInit+0x100>)
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	f003 020f 	and.w	r2, r3, #15
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	4613      	mov	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	440b      	add	r3, r1
 8008b8a:	3324      	adds	r3, #36	; 0x24
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008b90:	4b1f      	ldr	r3, [pc, #124]	; (8008c10 <USBD_CDC_DeInit+0x100>)
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	f003 020f 	and.w	r2, r3, #15
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	440b      	add	r3, r1
 8008ba4:	3326      	adds	r3, #38	; 0x26
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	32b0      	adds	r2, #176	; 0xb0
 8008bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d01f      	beq.n	8008bfc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	33b0      	adds	r3, #176	; 0xb0
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	32b0      	adds	r2, #176	; 0xb0
 8008bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f002 fb34 	bl	800b24c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	32b0      	adds	r2, #176	; 0xb0
 8008bee:	2100      	movs	r1, #0
 8008bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	2000009f 	.word	0x2000009f
 8008c0c:	200000a0 	.word	0x200000a0
 8008c10:	200000a1 	.word	0x200000a1

08008c14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	32b0      	adds	r2, #176	; 0xb0
 8008c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008c32:	2300      	movs	r3, #0
 8008c34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e0bf      	b.n	8008dc4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d050      	beq.n	8008cf2 <USBD_CDC_Setup+0xde>
 8008c50:	2b20      	cmp	r3, #32
 8008c52:	f040 80af 	bne.w	8008db4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	88db      	ldrh	r3, [r3, #6]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d03a      	beq.n	8008cd4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	b25b      	sxtb	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	da1b      	bge.n	8008ca0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	33b0      	adds	r3, #176	; 0xb0
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008c7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	88d2      	ldrh	r2, [r2, #6]
 8008c84:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	88db      	ldrh	r3, [r3, #6]
 8008c8a:	2b07      	cmp	r3, #7
 8008c8c:	bf28      	it	cs
 8008c8e:	2307      	movcs	r3, #7
 8008c90:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	89fa      	ldrh	r2, [r7, #14]
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 fd43 	bl	800a724 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c9e:	e090      	b.n	8008dc2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	785a      	ldrb	r2, [r3, #1]
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	88db      	ldrh	r3, [r3, #6]
 8008cae:	2b3f      	cmp	r3, #63	; 0x3f
 8008cb0:	d803      	bhi.n	8008cba <USBD_CDC_Setup+0xa6>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	88db      	ldrh	r3, [r3, #6]
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	e000      	b.n	8008cbc <USBD_CDC_Setup+0xa8>
 8008cba:	2240      	movs	r2, #64	; 0x40
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008cc2:	6939      	ldr	r1, [r7, #16]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008cca:	461a      	mov	r2, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 fd55 	bl	800a77c <USBD_CtlPrepareRx>
      break;
 8008cd2:	e076      	b.n	8008dc2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	33b0      	adds	r3, #176	; 0xb0
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	7850      	ldrb	r0, [r2, #1]
 8008cea:	2200      	movs	r2, #0
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	4798      	blx	r3
      break;
 8008cf0:	e067      	b.n	8008dc2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	785b      	ldrb	r3, [r3, #1]
 8008cf6:	2b0b      	cmp	r3, #11
 8008cf8:	d851      	bhi.n	8008d9e <USBD_CDC_Setup+0x18a>
 8008cfa:	a201      	add	r2, pc, #4	; (adr r2, 8008d00 <USBD_CDC_Setup+0xec>)
 8008cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d00:	08008d31 	.word	0x08008d31
 8008d04:	08008dad 	.word	0x08008dad
 8008d08:	08008d9f 	.word	0x08008d9f
 8008d0c:	08008d9f 	.word	0x08008d9f
 8008d10:	08008d9f 	.word	0x08008d9f
 8008d14:	08008d9f 	.word	0x08008d9f
 8008d18:	08008d9f 	.word	0x08008d9f
 8008d1c:	08008d9f 	.word	0x08008d9f
 8008d20:	08008d9f 	.word	0x08008d9f
 8008d24:	08008d9f 	.word	0x08008d9f
 8008d28:	08008d5b 	.word	0x08008d5b
 8008d2c:	08008d85 	.word	0x08008d85
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d107      	bne.n	8008d4c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d3c:	f107 030a 	add.w	r3, r7, #10
 8008d40:	2202      	movs	r2, #2
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f001 fced 	bl	800a724 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d4a:	e032      	b.n	8008db2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 fc77 	bl	800a642 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d54:	2303      	movs	r3, #3
 8008d56:	75fb      	strb	r3, [r7, #23]
          break;
 8008d58:	e02b      	b.n	8008db2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d107      	bne.n	8008d76 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d66:	f107 030d 	add.w	r3, r7, #13
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f001 fcd8 	bl	800a724 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d74:	e01d      	b.n	8008db2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 fc62 	bl	800a642 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	75fb      	strb	r3, [r7, #23]
          break;
 8008d82:	e016      	b.n	8008db2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d00f      	beq.n	8008db0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 fc55 	bl	800a642 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d9c:	e008      	b.n	8008db0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f001 fc4e 	bl	800a642 <USBD_CtlError>
          ret = USBD_FAIL;
 8008da6:	2303      	movs	r3, #3
 8008da8:	75fb      	strb	r3, [r7, #23]
          break;
 8008daa:	e002      	b.n	8008db2 <USBD_CDC_Setup+0x19e>
          break;
 8008dac:	bf00      	nop
 8008dae:	e008      	b.n	8008dc2 <USBD_CDC_Setup+0x1ae>
          break;
 8008db0:	bf00      	nop
      }
      break;
 8008db2:	e006      	b.n	8008dc2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f001 fc43 	bl	800a642 <USBD_CtlError>
      ret = USBD_FAIL;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc0:	bf00      	nop
  }

  return (uint8_t)ret;
 8008dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	32b0      	adds	r2, #176	; 0xb0
 8008dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e065      	b.n	8008ec2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	32b0      	adds	r2, #176	; 0xb0
 8008e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e06:	78fb      	ldrb	r3, [r7, #3]
 8008e08:	f003 020f 	and.w	r2, r3, #15
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	440b      	add	r3, r1
 8008e18:	3318      	adds	r3, #24
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d02f      	beq.n	8008e80 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	f003 020f 	and.w	r2, r3, #15
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	3318      	adds	r3, #24
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	78fb      	ldrb	r3, [r7, #3]
 8008e38:	f003 010f 	and.w	r1, r3, #15
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	440b      	add	r3, r1
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4403      	add	r3, r0
 8008e48:	3348      	adds	r3, #72	; 0x48
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e50:	fb01 f303 	mul.w	r3, r1, r3
 8008e54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d112      	bne.n	8008e80 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008e5a:	78fb      	ldrb	r3, [r7, #3]
 8008e5c:	f003 020f 	and.w	r2, r3, #15
 8008e60:	6879      	ldr	r1, [r7, #4]
 8008e62:	4613      	mov	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	440b      	add	r3, r1
 8008e6c:	3318      	adds	r3, #24
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e72:	78f9      	ldrb	r1, [r7, #3]
 8008e74:	2300      	movs	r3, #0
 8008e76:	2200      	movs	r2, #0
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f002 f984 	bl	800b186 <USBD_LL_Transmit>
 8008e7e:	e01f      	b.n	8008ec0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	33b0      	adds	r3, #176	; 0xb0
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d010      	beq.n	8008ec0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	33b0      	adds	r3, #176	; 0xb0
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008ebc:	78fa      	ldrb	r2, [r7, #3]
 8008ebe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	32b0      	adds	r2, #176	; 0xb0
 8008ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	32b0      	adds	r2, #176	; 0xb0
 8008ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e01a      	b.n	8008f32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	4619      	mov	r1, r3
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f002 f982 	bl	800b20a <USBD_LL_GetRxDataSize>
 8008f06:	4602      	mov	r2, r0
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	33b0      	adds	r3, #176	; 0xb0
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	32b0      	adds	r2, #176	; 0xb0
 8008f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d101      	bne.n	8008f5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e025      	b.n	8008fa8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	33b0      	adds	r3, #176	; 0xb0
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01a      	beq.n	8008fa6 <USBD_CDC_EP0_RxReady+0x6c>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f76:	2bff      	cmp	r3, #255	; 0xff
 8008f78:	d015      	beq.n	8008fa6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	33b0      	adds	r3, #176	; 0xb0
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008f92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f9a:	b292      	uxth	r2, r2
 8008f9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	22ff      	movs	r2, #255	; 0xff
 8008fa2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fb8:	2182      	movs	r1, #130	; 0x82
 8008fba:	4818      	ldr	r0, [pc, #96]	; (800901c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fbc:	f000 fd09 	bl	80099d2 <USBD_GetEpDesc>
 8008fc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	4815      	ldr	r0, [pc, #84]	; (800901c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fc6:	f000 fd04 	bl	80099d2 <USBD_GetEpDesc>
 8008fca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fcc:	2181      	movs	r1, #129	; 0x81
 8008fce:	4813      	ldr	r0, [pc, #76]	; (800901c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fd0:	f000 fcff 	bl	80099d2 <USBD_GetEpDesc>
 8008fd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2210      	movs	r2, #16
 8008fe0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d006      	beq.n	8008ff6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ff0:	711a      	strb	r2, [r3, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d006      	beq.n	800900a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009004:	711a      	strb	r2, [r3, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2243      	movs	r2, #67	; 0x43
 800900e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009010:	4b02      	ldr	r3, [pc, #8]	; (800901c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	2000005c 	.word	0x2000005c

08009020 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009028:	2182      	movs	r1, #130	; 0x82
 800902a:	4818      	ldr	r0, [pc, #96]	; (800908c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800902c:	f000 fcd1 	bl	80099d2 <USBD_GetEpDesc>
 8009030:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009032:	2101      	movs	r1, #1
 8009034:	4815      	ldr	r0, [pc, #84]	; (800908c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009036:	f000 fccc 	bl	80099d2 <USBD_GetEpDesc>
 800903a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800903c:	2181      	movs	r1, #129	; 0x81
 800903e:	4813      	ldr	r0, [pc, #76]	; (800908c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009040:	f000 fcc7 	bl	80099d2 <USBD_GetEpDesc>
 8009044:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	2210      	movs	r2, #16
 8009050:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d006      	beq.n	8009066 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	2200      	movs	r2, #0
 800905c:	711a      	strb	r2, [r3, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f042 0202 	orr.w	r2, r2, #2
 8009064:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d006      	beq.n	800907a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	711a      	strb	r2, [r3, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f042 0202 	orr.w	r2, r2, #2
 8009078:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2243      	movs	r2, #67	; 0x43
 800907e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009080:	4b02      	ldr	r3, [pc, #8]	; (800908c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009082:	4618      	mov	r0, r3
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	2000005c 	.word	0x2000005c

08009090 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009098:	2182      	movs	r1, #130	; 0x82
 800909a:	4818      	ldr	r0, [pc, #96]	; (80090fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800909c:	f000 fc99 	bl	80099d2 <USBD_GetEpDesc>
 80090a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80090a2:	2101      	movs	r1, #1
 80090a4:	4815      	ldr	r0, [pc, #84]	; (80090fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090a6:	f000 fc94 	bl	80099d2 <USBD_GetEpDesc>
 80090aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80090ac:	2181      	movs	r1, #129	; 0x81
 80090ae:	4813      	ldr	r0, [pc, #76]	; (80090fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090b0:	f000 fc8f 	bl	80099d2 <USBD_GetEpDesc>
 80090b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d002      	beq.n	80090c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2210      	movs	r2, #16
 80090c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d006      	beq.n	80090d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090d0:	711a      	strb	r2, [r3, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d006      	beq.n	80090ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090e4:	711a      	strb	r2, [r3, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2243      	movs	r2, #67	; 0x43
 80090ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090f0:	4b02      	ldr	r3, [pc, #8]	; (80090fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3718      	adds	r7, #24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	2000005c 	.word	0x2000005c

08009100 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	220a      	movs	r2, #10
 800910c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800910e:	4b03      	ldr	r3, [pc, #12]	; (800911c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009110:	4618      	mov	r0, r3
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	20000018 	.word	0x20000018

08009120 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009130:	2303      	movs	r3, #3
 8009132:	e009      	b.n	8009148 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	33b0      	adds	r3, #176	; 0xb0
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	32b0      	adds	r2, #176	; 0xb0
 800916a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009176:	2303      	movs	r3, #3
 8009178:	e008      	b.n	800918c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	371c      	adds	r7, #28
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	32b0      	adds	r2, #176	; 0xb0
 80091ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d101      	bne.n	80091bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e004      	b.n	80091c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
	...

080091d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	32b0      	adds	r2, #176	; 0xb0
 80091e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	32b0      	adds	r2, #176	; 0xb0
 80091f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80091fe:	2303      	movs	r3, #3
 8009200:	e018      	b.n	8009234 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	7c1b      	ldrb	r3, [r3, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10a      	bne.n	8009220 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800920a:	4b0c      	ldr	r3, [pc, #48]	; (800923c <USBD_CDC_ReceivePacket+0x68>)
 800920c:	7819      	ldrb	r1, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f001 ffd5 	bl	800b1c8 <USBD_LL_PrepareReceive>
 800921e:	e008      	b.n	8009232 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009220:	4b06      	ldr	r3, [pc, #24]	; (800923c <USBD_CDC_ReceivePacket+0x68>)
 8009222:	7819      	ldrb	r1, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800922a:	2340      	movs	r3, #64	; 0x40
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 ffcb 	bl	800b1c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	200000a0 	.word	0x200000a0

08009240 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	4613      	mov	r3, r2
 800924c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009254:	2303      	movs	r3, #3
 8009256:	e01f      	b.n	8009298 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	79fa      	ldrb	r2, [r7, #7]
 800928a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f001 fe45 	bl	800af1c <USBD_LL_Init>
 8009292:	4603      	mov	r3, r0
 8009294:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009296:	7dfb      	ldrb	r3, [r7, #23]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092aa:	2300      	movs	r3, #0
 80092ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e025      	b.n	8009304 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	32ae      	adds	r2, #174	; 0xae
 80092ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00f      	beq.n	80092f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	32ae      	adds	r2, #174	; 0xae
 80092de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	f107 020e 	add.w	r2, r7, #14
 80092e8:	4610      	mov	r0, r2
 80092ea:	4798      	blx	r3
 80092ec:	4602      	mov	r2, r0
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 fe4d 	bl	800afb4 <USBD_LL_Start>
 800931a:	4603      	mov	r3, r0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800932c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	460b      	mov	r3, r1
 8009344:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009350:	2b00      	cmp	r3, #0
 8009352:	d009      	beq.n	8009368 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	78fa      	ldrb	r2, [r7, #3]
 800935e:	4611      	mov	r1, r2
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
 8009364:	4603      	mov	r3, r0
 8009366:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b084      	sub	sp, #16
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	460b      	mov	r3, r1
 800937c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	78fa      	ldrb	r2, [r7, #3]
 800938c:	4611      	mov	r1, r2
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	4798      	blx	r3
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d001      	beq.n	800939c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009398:	2303      	movs	r3, #3
 800939a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b084      	sub	sp, #16
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f001 f908 	bl	800a5ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80093cc:	461a      	mov	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093da:	f003 031f 	and.w	r3, r3, #31
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d01a      	beq.n	8009418 <USBD_LL_SetupStage+0x72>
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d822      	bhi.n	800942c <USBD_LL_SetupStage+0x86>
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d002      	beq.n	80093f0 <USBD_LL_SetupStage+0x4a>
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d00a      	beq.n	8009404 <USBD_LL_SetupStage+0x5e>
 80093ee:	e01d      	b.n	800942c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fb5f 	bl	8009abc <USBD_StdDevReq>
 80093fe:	4603      	mov	r3, r0
 8009400:	73fb      	strb	r3, [r7, #15]
      break;
 8009402:	e020      	b.n	8009446 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fbc7 	bl	8009ba0 <USBD_StdItfReq>
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]
      break;
 8009416:	e016      	b.n	8009446 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fc29 	bl	8009c78 <USBD_StdEPReq>
 8009426:	4603      	mov	r3, r0
 8009428:	73fb      	strb	r3, [r7, #15]
      break;
 800942a:	e00c      	b.n	8009446 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009432:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009436:	b2db      	uxtb	r3, r3
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 fe1a 	bl	800b074 <USBD_LL_StallEP>
 8009440:	4603      	mov	r3, r0
 8009442:	73fb      	strb	r3, [r7, #15]
      break;
 8009444:	bf00      	nop
  }

  return ret;
 8009446:	7bfb      	ldrb	r3, [r7, #15]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	460b      	mov	r3, r1
 800945a:	607a      	str	r2, [r7, #4]
 800945c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009462:	7afb      	ldrb	r3, [r7, #11]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d16e      	bne.n	8009546 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800946e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009476:	2b03      	cmp	r3, #3
 8009478:	f040 8098 	bne.w	80095ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	689a      	ldr	r2, [r3, #8]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	429a      	cmp	r2, r3
 8009486:	d913      	bls.n	80094b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	689a      	ldr	r2, [r3, #8]
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	1ad2      	subs	r2, r2, r3
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	4293      	cmp	r3, r2
 80094a0:	bf28      	it	cs
 80094a2:	4613      	movcs	r3, r2
 80094a4:	461a      	mov	r2, r3
 80094a6:	6879      	ldr	r1, [r7, #4]
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f001 f984 	bl	800a7b6 <USBD_CtlContinueRx>
 80094ae:	e07d      	b.n	80095ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094b6:	f003 031f 	and.w	r3, r3, #31
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d014      	beq.n	80094e8 <USBD_LL_DataOutStage+0x98>
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d81d      	bhi.n	80094fe <USBD_LL_DataOutStage+0xae>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <USBD_LL_DataOutStage+0x7c>
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d003      	beq.n	80094d2 <USBD_LL_DataOutStage+0x82>
 80094ca:	e018      	b.n	80094fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	75bb      	strb	r3, [r7, #22]
            break;
 80094d0:	e018      	b.n	8009504 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	4619      	mov	r1, r3
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f000 fa5e 	bl	800999e <USBD_CoreFindIF>
 80094e2:	4603      	mov	r3, r0
 80094e4:	75bb      	strb	r3, [r7, #22]
            break;
 80094e6:	e00d      	b.n	8009504 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	4619      	mov	r1, r3
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 fa60 	bl	80099b8 <USBD_CoreFindEP>
 80094f8:	4603      	mov	r3, r0
 80094fa:	75bb      	strb	r3, [r7, #22]
            break;
 80094fc:	e002      	b.n	8009504 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80094fe:	2300      	movs	r3, #0
 8009500:	75bb      	strb	r3, [r7, #22]
            break;
 8009502:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009504:	7dbb      	ldrb	r3, [r7, #22]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d119      	bne.n	800953e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b03      	cmp	r3, #3
 8009514:	d113      	bne.n	800953e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009516:	7dba      	ldrb	r2, [r7, #22]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	32ae      	adds	r2, #174	; 0xae
 800951c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00b      	beq.n	800953e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009526:	7dba      	ldrb	r2, [r7, #22]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800952e:	7dba      	ldrb	r2, [r7, #22]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	32ae      	adds	r2, #174	; 0xae
 8009534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f001 f94a 	bl	800a7d8 <USBD_CtlSendStatus>
 8009544:	e032      	b.n	80095ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009546:	7afb      	ldrb	r3, [r7, #11]
 8009548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800954c:	b2db      	uxtb	r3, r3
 800954e:	4619      	mov	r1, r3
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 fa31 	bl	80099b8 <USBD_CoreFindEP>
 8009556:	4603      	mov	r3, r0
 8009558:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800955a:	7dbb      	ldrb	r3, [r7, #22]
 800955c:	2bff      	cmp	r3, #255	; 0xff
 800955e:	d025      	beq.n	80095ac <USBD_LL_DataOutStage+0x15c>
 8009560:	7dbb      	ldrb	r3, [r7, #22]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d122      	bne.n	80095ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b03      	cmp	r3, #3
 8009570:	d117      	bne.n	80095a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009572:	7dba      	ldrb	r2, [r7, #22]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	32ae      	adds	r2, #174	; 0xae
 8009578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00f      	beq.n	80095a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009582:	7dba      	ldrb	r2, [r7, #22]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800958a:	7dba      	ldrb	r2, [r7, #22]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	32ae      	adds	r2, #174	; 0xae
 8009590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	7afa      	ldrb	r2, [r7, #11]
 8009598:	4611      	mov	r1, r2
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	4798      	blx	r3
 800959e:	4603      	mov	r3, r0
 80095a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
 80095aa:	e000      	b.n	80095ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b086      	sub	sp, #24
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	60f8      	str	r0, [r7, #12]
 80095be:	460b      	mov	r3, r1
 80095c0:	607a      	str	r2, [r7, #4]
 80095c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80095c4:	7afb      	ldrb	r3, [r7, #11]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d16f      	bne.n	80096aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	3314      	adds	r3, #20
 80095ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d15a      	bne.n	8009690 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d914      	bls.n	8009610 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	689a      	ldr	r2, [r3, #8]
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	1ad2      	subs	r2, r2, r3
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	461a      	mov	r2, r3
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f001 f8ac 	bl	800a75a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009602:	2300      	movs	r3, #0
 8009604:	2200      	movs	r2, #0
 8009606:	2100      	movs	r1, #0
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f001 fddd 	bl	800b1c8 <USBD_LL_PrepareReceive>
 800960e:	e03f      	b.n	8009690 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	68da      	ldr	r2, [r3, #12]
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	429a      	cmp	r2, r3
 800961a:	d11c      	bne.n	8009656 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	685a      	ldr	r2, [r3, #4]
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009624:	429a      	cmp	r2, r3
 8009626:	d316      	bcc.n	8009656 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009632:	429a      	cmp	r2, r3
 8009634:	d20f      	bcs.n	8009656 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009636:	2200      	movs	r2, #0
 8009638:	2100      	movs	r1, #0
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f001 f88d 	bl	800a75a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009648:	2300      	movs	r3, #0
 800964a:	2200      	movs	r2, #0
 800964c:	2100      	movs	r1, #0
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f001 fdba 	bl	800b1c8 <USBD_LL_PrepareReceive>
 8009654:	e01c      	b.n	8009690 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b03      	cmp	r3, #3
 8009660:	d10f      	bne.n	8009682 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d009      	beq.n	8009682 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009682:	2180      	movs	r1, #128	; 0x80
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f001 fcf5 	bl	800b074 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f001 f8b7 	bl	800a7fe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d03a      	beq.n	8009710 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f7ff fe42 	bl	8009324 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80096a8:	e032      	b.n	8009710 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80096aa:	7afb      	ldrb	r3, [r7, #11]
 80096ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	4619      	mov	r1, r3
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f000 f97f 	bl	80099b8 <USBD_CoreFindEP>
 80096ba:	4603      	mov	r3, r0
 80096bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096be:	7dfb      	ldrb	r3, [r7, #23]
 80096c0:	2bff      	cmp	r3, #255	; 0xff
 80096c2:	d025      	beq.n	8009710 <USBD_LL_DataInStage+0x15a>
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d122      	bne.n	8009710 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d11c      	bne.n	8009710 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80096d6:	7dfa      	ldrb	r2, [r7, #23]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	32ae      	adds	r2, #174	; 0xae
 80096dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d014      	beq.n	8009710 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80096e6:	7dfa      	ldrb	r2, [r7, #23]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80096ee:	7dfa      	ldrb	r2, [r7, #23]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	32ae      	adds	r2, #174	; 0xae
 80096f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	7afa      	ldrb	r2, [r7, #11]
 80096fc:	4611      	mov	r1, r2
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	4798      	blx	r3
 8009702:	4603      	mov	r3, r0
 8009704:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009706:	7dbb      	ldrb	r3, [r7, #22]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800970c:	7dbb      	ldrb	r3, [r7, #22]
 800970e:	e000      	b.n	8009712 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2201      	movs	r2, #1
 800972a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009752:	2b00      	cmp	r3, #0
 8009754:	d014      	beq.n	8009780 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00e      	beq.n	8009780 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	6852      	ldr	r2, [r2, #4]
 800976e:	b2d2      	uxtb	r2, r2
 8009770:	4611      	mov	r1, r2
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	4798      	blx	r3
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800977c:	2303      	movs	r3, #3
 800977e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009780:	2340      	movs	r3, #64	; 0x40
 8009782:	2200      	movs	r2, #0
 8009784:	2100      	movs	r1, #0
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f001 fc2f 	bl	800afea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2240      	movs	r2, #64	; 0x40
 8009798:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800979c:	2340      	movs	r3, #64	; 0x40
 800979e:	2200      	movs	r2, #0
 80097a0:	2180      	movs	r1, #128	; 0x80
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f001 fc21 	bl	800afea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2240      	movs	r2, #64	; 0x40
 80097b2:	621a      	str	r2, [r3, #32]

  return ret;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	460b      	mov	r3, r1
 80097c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	78fa      	ldrb	r2, [r7, #3]
 80097ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	370c      	adds	r7, #12
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80097de:	b480      	push	{r7}
 80097e0:	b083      	sub	sp, #12
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2204      	movs	r2, #4
 80097f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800980a:	b480      	push	{r7}
 800980c:	b083      	sub	sp, #12
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b04      	cmp	r3, #4
 800981c:	d106      	bne.n	800982c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009824:	b2da      	uxtb	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b082      	sub	sp, #8
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b03      	cmp	r3, #3
 800984c:	d110      	bne.n	8009870 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800985e:	69db      	ldr	r3, [r3, #28]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d005      	beq.n	8009870 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800986a:	69db      	ldr	r3, [r3, #28]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b082      	sub	sp, #8
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	460b      	mov	r3, r1
 8009884:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	32ae      	adds	r2, #174	; 0xae
 8009890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009898:	2303      	movs	r3, #3
 800989a:	e01c      	b.n	80098d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b03      	cmp	r3, #3
 80098a6:	d115      	bne.n	80098d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	32ae      	adds	r2, #174	; 0xae
 80098b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00b      	beq.n	80098d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	32ae      	adds	r2, #174	; 0xae
 80098c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ca:	6a1b      	ldr	r3, [r3, #32]
 80098cc:	78fa      	ldrb	r2, [r7, #3]
 80098ce:	4611      	mov	r1, r2
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b082      	sub	sp, #8
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	460b      	mov	r3, r1
 80098e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	32ae      	adds	r2, #174	; 0xae
 80098f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d101      	bne.n	8009900 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80098fc:	2303      	movs	r3, #3
 80098fe:	e01c      	b.n	800993a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b03      	cmp	r3, #3
 800990a:	d115      	bne.n	8009938 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	32ae      	adds	r2, #174	; 0xae
 8009916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00b      	beq.n	8009938 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	32ae      	adds	r2, #174	; 0xae
 800992a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009930:	78fa      	ldrb	r2, [r7, #3]
 8009932:	4611      	mov	r1, r2
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00e      	beq.n	8009994 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	6852      	ldr	r2, [r2, #4]
 8009982:	b2d2      	uxtb	r2, r2
 8009984:	4611      	mov	r1, r2
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	4798      	blx	r3
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009990:	2303      	movs	r3, #3
 8009992:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009994:	7bfb      	ldrb	r3, [r7, #15]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800999e:	b480      	push	{r7}
 80099a0:	b083      	sub	sp, #12
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	460b      	mov	r3, r1
 80099a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	460b      	mov	r3, r1
 80099c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b086      	sub	sp, #24
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	460b      	mov	r3, r1
 80099dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80099e6:	2300      	movs	r3, #0
 80099e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	885b      	ldrh	r3, [r3, #2]
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d920      	bls.n	8009a3c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009a02:	e013      	b.n	8009a2c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009a04:	f107 030a 	add.w	r3, r7, #10
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6978      	ldr	r0, [r7, #20]
 8009a0c:	f000 f81b 	bl	8009a46 <USBD_GetNextDesc>
 8009a10:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	785b      	ldrb	r3, [r3, #1]
 8009a16:	2b05      	cmp	r3, #5
 8009a18:	d108      	bne.n	8009a2c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	789b      	ldrb	r3, [r3, #2]
 8009a22:	78fa      	ldrb	r2, [r7, #3]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d008      	beq.n	8009a3a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	885b      	ldrh	r3, [r3, #2]
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	897b      	ldrh	r3, [r7, #10]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d8e5      	bhi.n	8009a04 <USBD_GetEpDesc+0x32>
 8009a38:	e000      	b.n	8009a3c <USBD_GetEpDesc+0x6a>
          break;
 8009a3a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009a3c:	693b      	ldr	r3, [r7, #16]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b085      	sub	sp, #20
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	881a      	ldrh	r2, [r3, #0]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	4413      	add	r3, r2
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4413      	add	r3, r2
 8009a70:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a72:	68fb      	ldr	r3, [r7, #12]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	3301      	adds	r3, #1
 8009a96:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a9e:	8a3b      	ldrh	r3, [r7, #16]
 8009aa0:	021b      	lsls	r3, r3, #8
 8009aa2:	b21a      	sxth	r2, r3
 8009aa4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	b21b      	sxth	r3, r3
 8009aac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009aae:	89fb      	ldrh	r3, [r7, #14]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	371c      	adds	r7, #28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ad2:	2b40      	cmp	r3, #64	; 0x40
 8009ad4:	d005      	beq.n	8009ae2 <USBD_StdDevReq+0x26>
 8009ad6:	2b40      	cmp	r3, #64	; 0x40
 8009ad8:	d857      	bhi.n	8009b8a <USBD_StdDevReq+0xce>
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00f      	beq.n	8009afe <USBD_StdDevReq+0x42>
 8009ade:	2b20      	cmp	r3, #32
 8009ae0:	d153      	bne.n	8009b8a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	32ae      	adds	r2, #174	; 0xae
 8009aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	4798      	blx	r3
 8009af8:	4603      	mov	r3, r0
 8009afa:	73fb      	strb	r3, [r7, #15]
      break;
 8009afc:	e04a      	b.n	8009b94 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	785b      	ldrb	r3, [r3, #1]
 8009b02:	2b09      	cmp	r3, #9
 8009b04:	d83b      	bhi.n	8009b7e <USBD_StdDevReq+0xc2>
 8009b06:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <USBD_StdDevReq+0x50>)
 8009b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0c:	08009b61 	.word	0x08009b61
 8009b10:	08009b75 	.word	0x08009b75
 8009b14:	08009b7f 	.word	0x08009b7f
 8009b18:	08009b6b 	.word	0x08009b6b
 8009b1c:	08009b7f 	.word	0x08009b7f
 8009b20:	08009b3f 	.word	0x08009b3f
 8009b24:	08009b35 	.word	0x08009b35
 8009b28:	08009b7f 	.word	0x08009b7f
 8009b2c:	08009b57 	.word	0x08009b57
 8009b30:	08009b49 	.word	0x08009b49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fa3c 	bl	8009fb4 <USBD_GetDescriptor>
          break;
 8009b3c:	e024      	b.n	8009b88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fba1 	bl	800a288 <USBD_SetAddress>
          break;
 8009b46:	e01f      	b.n	8009b88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fbe0 	bl	800a310 <USBD_SetConfig>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73fb      	strb	r3, [r7, #15]
          break;
 8009b54:	e018      	b.n	8009b88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fc83 	bl	800a464 <USBD_GetConfig>
          break;
 8009b5e:	e013      	b.n	8009b88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fcb4 	bl	800a4d0 <USBD_GetStatus>
          break;
 8009b68:	e00e      	b.n	8009b88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fce3 	bl	800a538 <USBD_SetFeature>
          break;
 8009b72:	e009      	b.n	8009b88 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fd07 	bl	800a58a <USBD_ClrFeature>
          break;
 8009b7c:	e004      	b.n	8009b88 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fd5e 	bl	800a642 <USBD_CtlError>
          break;
 8009b86:	bf00      	nop
      }
      break;
 8009b88:	e004      	b.n	8009b94 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fd58 	bl	800a642 <USBD_CtlError>
      break;
 8009b92:	bf00      	nop
  }

  return ret;
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop

08009ba0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bb6:	2b40      	cmp	r3, #64	; 0x40
 8009bb8:	d005      	beq.n	8009bc6 <USBD_StdItfReq+0x26>
 8009bba:	2b40      	cmp	r3, #64	; 0x40
 8009bbc:	d852      	bhi.n	8009c64 <USBD_StdItfReq+0xc4>
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <USBD_StdItfReq+0x26>
 8009bc2:	2b20      	cmp	r3, #32
 8009bc4:	d14e      	bne.n	8009c64 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d840      	bhi.n	8009c56 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	889b      	ldrh	r3, [r3, #4]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d836      	bhi.n	8009c4c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	889b      	ldrh	r3, [r3, #4]
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7ff fed9 	bl	800999e <USBD_CoreFindIF>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	2bff      	cmp	r3, #255	; 0xff
 8009bf4:	d01d      	beq.n	8009c32 <USBD_StdItfReq+0x92>
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d11a      	bne.n	8009c32 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009bfc:	7bba      	ldrb	r2, [r7, #14]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	32ae      	adds	r2, #174	; 0xae
 8009c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00f      	beq.n	8009c2c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009c0c:	7bba      	ldrb	r2, [r7, #14]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c14:	7bba      	ldrb	r2, [r7, #14]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	32ae      	adds	r2, #174	; 0xae
 8009c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	4798      	blx	r3
 8009c26:	4603      	mov	r3, r0
 8009c28:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c2a:	e004      	b.n	8009c36 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c30:	e001      	b.n	8009c36 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009c32:	2303      	movs	r3, #3
 8009c34:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	88db      	ldrh	r3, [r3, #6]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d110      	bne.n	8009c60 <USBD_StdItfReq+0xc0>
 8009c3e:	7bfb      	ldrb	r3, [r7, #15]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10d      	bne.n	8009c60 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fdc7 	bl	800a7d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c4a:	e009      	b.n	8009c60 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fcf7 	bl	800a642 <USBD_CtlError>
          break;
 8009c54:	e004      	b.n	8009c60 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009c56:	6839      	ldr	r1, [r7, #0]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fcf2 	bl	800a642 <USBD_CtlError>
          break;
 8009c5e:	e000      	b.n	8009c62 <USBD_StdItfReq+0xc2>
          break;
 8009c60:	bf00      	nop
      }
      break;
 8009c62:	e004      	b.n	8009c6e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fceb 	bl	800a642 <USBD_CtlError>
      break;
 8009c6c:	bf00      	nop
  }

  return ret;
 8009c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	889b      	ldrh	r3, [r3, #4]
 8009c8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c94:	2b40      	cmp	r3, #64	; 0x40
 8009c96:	d007      	beq.n	8009ca8 <USBD_StdEPReq+0x30>
 8009c98:	2b40      	cmp	r3, #64	; 0x40
 8009c9a:	f200 817f 	bhi.w	8009f9c <USBD_StdEPReq+0x324>
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d02a      	beq.n	8009cf8 <USBD_StdEPReq+0x80>
 8009ca2:	2b20      	cmp	r3, #32
 8009ca4:	f040 817a 	bne.w	8009f9c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ca8:	7bbb      	ldrb	r3, [r7, #14]
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7ff fe83 	bl	80099b8 <USBD_CoreFindEP>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cb6:	7b7b      	ldrb	r3, [r7, #13]
 8009cb8:	2bff      	cmp	r3, #255	; 0xff
 8009cba:	f000 8174 	beq.w	8009fa6 <USBD_StdEPReq+0x32e>
 8009cbe:	7b7b      	ldrb	r3, [r7, #13]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f040 8170 	bne.w	8009fa6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009cc6:	7b7a      	ldrb	r2, [r7, #13]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009cce:	7b7a      	ldrb	r2, [r7, #13]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	32ae      	adds	r2, #174	; 0xae
 8009cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 8163 	beq.w	8009fa6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009ce0:	7b7a      	ldrb	r2, [r7, #13]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	32ae      	adds	r2, #174	; 0xae
 8009ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	4798      	blx	r3
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009cf6:	e156      	b.n	8009fa6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	785b      	ldrb	r3, [r3, #1]
 8009cfc:	2b03      	cmp	r3, #3
 8009cfe:	d008      	beq.n	8009d12 <USBD_StdEPReq+0x9a>
 8009d00:	2b03      	cmp	r3, #3
 8009d02:	f300 8145 	bgt.w	8009f90 <USBD_StdEPReq+0x318>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 809b 	beq.w	8009e42 <USBD_StdEPReq+0x1ca>
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d03c      	beq.n	8009d8a <USBD_StdEPReq+0x112>
 8009d10:	e13e      	b.n	8009f90 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d002      	beq.n	8009d24 <USBD_StdEPReq+0xac>
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	d016      	beq.n	8009d50 <USBD_StdEPReq+0xd8>
 8009d22:	e02c      	b.n	8009d7e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d24:	7bbb      	ldrb	r3, [r7, #14]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00d      	beq.n	8009d46 <USBD_StdEPReq+0xce>
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	2b80      	cmp	r3, #128	; 0x80
 8009d2e:	d00a      	beq.n	8009d46 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 f99d 	bl	800b074 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d3a:	2180      	movs	r1, #128	; 0x80
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f001 f999 	bl	800b074 <USBD_LL_StallEP>
 8009d42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d44:	e020      	b.n	8009d88 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fc7a 	bl	800a642 <USBD_CtlError>
              break;
 8009d4e:	e01b      	b.n	8009d88 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	885b      	ldrh	r3, [r3, #2]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10e      	bne.n	8009d76 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00b      	beq.n	8009d76 <USBD_StdEPReq+0xfe>
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
 8009d60:	2b80      	cmp	r3, #128	; 0x80
 8009d62:	d008      	beq.n	8009d76 <USBD_StdEPReq+0xfe>
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	88db      	ldrh	r3, [r3, #6]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d104      	bne.n	8009d76 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f001 f97f 	bl	800b074 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fd2e 	bl	800a7d8 <USBD_CtlSendStatus>

              break;
 8009d7c:	e004      	b.n	8009d88 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fc5e 	bl	800a642 <USBD_CtlError>
              break;
 8009d86:	bf00      	nop
          }
          break;
 8009d88:	e107      	b.n	8009f9a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d002      	beq.n	8009d9c <USBD_StdEPReq+0x124>
 8009d96:	2b03      	cmp	r3, #3
 8009d98:	d016      	beq.n	8009dc8 <USBD_StdEPReq+0x150>
 8009d9a:	e04b      	b.n	8009e34 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d9c:	7bbb      	ldrb	r3, [r7, #14]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00d      	beq.n	8009dbe <USBD_StdEPReq+0x146>
 8009da2:	7bbb      	ldrb	r3, [r7, #14]
 8009da4:	2b80      	cmp	r3, #128	; 0x80
 8009da6:	d00a      	beq.n	8009dbe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f001 f961 	bl	800b074 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009db2:	2180      	movs	r1, #128	; 0x80
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f001 f95d 	bl	800b074 <USBD_LL_StallEP>
 8009dba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009dbc:	e040      	b.n	8009e40 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 fc3e 	bl	800a642 <USBD_CtlError>
              break;
 8009dc6:	e03b      	b.n	8009e40 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	885b      	ldrh	r3, [r3, #2]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d136      	bne.n	8009e3e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d004      	beq.n	8009de4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009dda:	7bbb      	ldrb	r3, [r7, #14]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 f967 	bl	800b0b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fcf7 	bl	800a7d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7ff fde2 	bl	80099b8 <USBD_CoreFindEP>
 8009df4:	4603      	mov	r3, r0
 8009df6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009df8:	7b7b      	ldrb	r3, [r7, #13]
 8009dfa:	2bff      	cmp	r3, #255	; 0xff
 8009dfc:	d01f      	beq.n	8009e3e <USBD_StdEPReq+0x1c6>
 8009dfe:	7b7b      	ldrb	r3, [r7, #13]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d11c      	bne.n	8009e3e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009e04:	7b7a      	ldrb	r2, [r7, #13]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009e0c:	7b7a      	ldrb	r2, [r7, #13]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	32ae      	adds	r2, #174	; 0xae
 8009e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d010      	beq.n	8009e3e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009e1c:	7b7a      	ldrb	r2, [r7, #13]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	32ae      	adds	r2, #174	; 0xae
 8009e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	4798      	blx	r3
 8009e2e:	4603      	mov	r3, r0
 8009e30:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009e32:	e004      	b.n	8009e3e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fc03 	bl	800a642 <USBD_CtlError>
              break;
 8009e3c:	e000      	b.n	8009e40 <USBD_StdEPReq+0x1c8>
              break;
 8009e3e:	bf00      	nop
          }
          break;
 8009e40:	e0ab      	b.n	8009f9a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d002      	beq.n	8009e54 <USBD_StdEPReq+0x1dc>
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	d032      	beq.n	8009eb8 <USBD_StdEPReq+0x240>
 8009e52:	e097      	b.n	8009f84 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d007      	beq.n	8009e6a <USBD_StdEPReq+0x1f2>
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
 8009e5c:	2b80      	cmp	r3, #128	; 0x80
 8009e5e:	d004      	beq.n	8009e6a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fbed 	bl	800a642 <USBD_CtlError>
                break;
 8009e68:	e091      	b.n	8009f8e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	da0b      	bge.n	8009e8a <USBD_StdEPReq+0x212>
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e78:	4613      	mov	r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	4413      	add	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	3310      	adds	r3, #16
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	4413      	add	r3, r2
 8009e86:	3304      	adds	r3, #4
 8009e88:	e00b      	b.n	8009ea2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e90:	4613      	mov	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2202      	movs	r2, #2
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 fc37 	bl	800a724 <USBD_CtlSendData>
              break;
 8009eb6:	e06a      	b.n	8009f8e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	da11      	bge.n	8009ee4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ec0:	7bbb      	ldrb	r3, [r7, #14]
 8009ec2:	f003 020f 	and.w	r2, r3, #15
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4413      	add	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	440b      	add	r3, r1
 8009ed2:	3324      	adds	r3, #36	; 0x24
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d117      	bne.n	8009f0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fbb0 	bl	800a642 <USBD_CtlError>
                  break;
 8009ee2:	e054      	b.n	8009f8e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ee4:	7bbb      	ldrb	r3, [r7, #14]
 8009ee6:	f003 020f 	and.w	r2, r3, #15
 8009eea:	6879      	ldr	r1, [r7, #4]
 8009eec:	4613      	mov	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4413      	add	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	440b      	add	r3, r1
 8009ef6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009efa:	881b      	ldrh	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d104      	bne.n	8009f0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f00:	6839      	ldr	r1, [r7, #0]
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 fb9d 	bl	800a642 <USBD_CtlError>
                  break;
 8009f08:	e041      	b.n	8009f8e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	da0b      	bge.n	8009f2a <USBD_StdEPReq+0x2b2>
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
 8009f14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f18:	4613      	mov	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4413      	add	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	3310      	adds	r3, #16
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	4413      	add	r3, r2
 8009f26:	3304      	adds	r3, #4
 8009f28:	e00b      	b.n	8009f42 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f30:	4613      	mov	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	4413      	add	r3, r2
 8009f40:	3304      	adds	r3, #4
 8009f42:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d002      	beq.n	8009f50 <USBD_StdEPReq+0x2d8>
 8009f4a:	7bbb      	ldrb	r3, [r7, #14]
 8009f4c:	2b80      	cmp	r3, #128	; 0x80
 8009f4e:	d103      	bne.n	8009f58 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
 8009f56:	e00e      	b.n	8009f76 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f001 f8c7 	bl	800b0f0 <USBD_LL_IsStallEP>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d003      	beq.n	8009f70 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	601a      	str	r2, [r3, #0]
 8009f6e:	e002      	b.n	8009f76 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	2200      	movs	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2202      	movs	r2, #2
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fbd1 	bl	800a724 <USBD_CtlSendData>
              break;
 8009f82:	e004      	b.n	8009f8e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 fb5b 	bl	800a642 <USBD_CtlError>
              break;
 8009f8c:	bf00      	nop
          }
          break;
 8009f8e:	e004      	b.n	8009f9a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fb55 	bl	800a642 <USBD_CtlError>
          break;
 8009f98:	bf00      	nop
      }
      break;
 8009f9a:	e005      	b.n	8009fa8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fb4f 	bl	800a642 <USBD_CtlError>
      break;
 8009fa4:	e000      	b.n	8009fa8 <USBD_StdEPReq+0x330>
      break;
 8009fa6:	bf00      	nop
  }

  return ret;
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	885b      	ldrh	r3, [r3, #2]
 8009fce:	0a1b      	lsrs	r3, r3, #8
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	2b06      	cmp	r3, #6
 8009fd6:	f200 8128 	bhi.w	800a22a <USBD_GetDescriptor+0x276>
 8009fda:	a201      	add	r2, pc, #4	; (adr r2, 8009fe0 <USBD_GetDescriptor+0x2c>)
 8009fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe0:	08009ffd 	.word	0x08009ffd
 8009fe4:	0800a015 	.word	0x0800a015
 8009fe8:	0800a055 	.word	0x0800a055
 8009fec:	0800a22b 	.word	0x0800a22b
 8009ff0:	0800a22b 	.word	0x0800a22b
 8009ff4:	0800a1cb 	.word	0x0800a1cb
 8009ff8:	0800a1f7 	.word	0x0800a1f7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	7c12      	ldrb	r2, [r2, #16]
 800a008:	f107 0108 	add.w	r1, r7, #8
 800a00c:	4610      	mov	r0, r2
 800a00e:	4798      	blx	r3
 800a010:	60f8      	str	r0, [r7, #12]
      break;
 800a012:	e112      	b.n	800a23a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7c1b      	ldrb	r3, [r3, #16]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10d      	bne.n	800a038 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a024:	f107 0208 	add.w	r2, r7, #8
 800a028:	4610      	mov	r0, r2
 800a02a:	4798      	blx	r3
 800a02c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3301      	adds	r3, #1
 800a032:	2202      	movs	r2, #2
 800a034:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a036:	e100      	b.n	800a23a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a040:	f107 0208 	add.w	r2, r7, #8
 800a044:	4610      	mov	r0, r2
 800a046:	4798      	blx	r3
 800a048:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	3301      	adds	r3, #1
 800a04e:	2202      	movs	r2, #2
 800a050:	701a      	strb	r2, [r3, #0]
      break;
 800a052:	e0f2      	b.n	800a23a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	885b      	ldrh	r3, [r3, #2]
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b05      	cmp	r3, #5
 800a05c:	f200 80ac 	bhi.w	800a1b8 <USBD_GetDescriptor+0x204>
 800a060:	a201      	add	r2, pc, #4	; (adr r2, 800a068 <USBD_GetDescriptor+0xb4>)
 800a062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a066:	bf00      	nop
 800a068:	0800a081 	.word	0x0800a081
 800a06c:	0800a0b5 	.word	0x0800a0b5
 800a070:	0800a0e9 	.word	0x0800a0e9
 800a074:	0800a11d 	.word	0x0800a11d
 800a078:	0800a151 	.word	0x0800a151
 800a07c:	0800a185 	.word	0x0800a185
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00b      	beq.n	800a0a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	7c12      	ldrb	r2, [r2, #16]
 800a098:	f107 0108 	add.w	r1, r7, #8
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
 800a0a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0a2:	e091      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 facb 	bl	800a642 <USBD_CtlError>
            err++;
 800a0ac:	7afb      	ldrb	r3, [r7, #11]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0b2:	e089      	b.n	800a1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	7c12      	ldrb	r2, [r2, #16]
 800a0cc:	f107 0108 	add.w	r1, r7, #8
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
 800a0d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0d6:	e077      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fab1 	bl	800a642 <USBD_CtlError>
            err++;
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0e6:	e06f      	b.n	800a1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00b      	beq.n	800a10c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	7c12      	ldrb	r2, [r2, #16]
 800a100:	f107 0108 	add.w	r1, r7, #8
 800a104:	4610      	mov	r0, r2
 800a106:	4798      	blx	r3
 800a108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a10a:	e05d      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fa97 	bl	800a642 <USBD_CtlError>
            err++;
 800a114:	7afb      	ldrb	r3, [r7, #11]
 800a116:	3301      	adds	r3, #1
 800a118:	72fb      	strb	r3, [r7, #11]
          break;
 800a11a:	e055      	b.n	800a1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00b      	beq.n	800a140 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	7c12      	ldrb	r2, [r2, #16]
 800a134:	f107 0108 	add.w	r1, r7, #8
 800a138:	4610      	mov	r0, r2
 800a13a:	4798      	blx	r3
 800a13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a13e:	e043      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fa7d 	bl	800a642 <USBD_CtlError>
            err++;
 800a148:	7afb      	ldrb	r3, [r7, #11]
 800a14a:	3301      	adds	r3, #1
 800a14c:	72fb      	strb	r3, [r7, #11]
          break;
 800a14e:	e03b      	b.n	800a1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a156:	695b      	ldr	r3, [r3, #20]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a162:	695b      	ldr	r3, [r3, #20]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	7c12      	ldrb	r2, [r2, #16]
 800a168:	f107 0108 	add.w	r1, r7, #8
 800a16c:	4610      	mov	r0, r2
 800a16e:	4798      	blx	r3
 800a170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a172:	e029      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa63 	bl	800a642 <USBD_CtlError>
            err++;
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	3301      	adds	r3, #1
 800a180:	72fb      	strb	r3, [r7, #11]
          break;
 800a182:	e021      	b.n	800a1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	7c12      	ldrb	r2, [r2, #16]
 800a19c:	f107 0108 	add.w	r1, r7, #8
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	4798      	blx	r3
 800a1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1a6:	e00f      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa49 	bl	800a642 <USBD_CtlError>
            err++;
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1b6:	e007      	b.n	800a1c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fa41 	bl	800a642 <USBD_CtlError>
          err++;
 800a1c0:	7afb      	ldrb	r3, [r7, #11]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a1c6:	bf00      	nop
      }
      break;
 800a1c8:	e037      	b.n	800a23a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	7c1b      	ldrb	r3, [r3, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d109      	bne.n	800a1e6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1da:	f107 0208 	add.w	r2, r7, #8
 800a1de:	4610      	mov	r0, r2
 800a1e0:	4798      	blx	r3
 800a1e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1e4:	e029      	b.n	800a23a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fa2a 	bl	800a642 <USBD_CtlError>
        err++;
 800a1ee:	7afb      	ldrb	r3, [r7, #11]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1f4:	e021      	b.n	800a23a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	7c1b      	ldrb	r3, [r3, #16]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10d      	bne.n	800a21a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a206:	f107 0208 	add.w	r2, r7, #8
 800a20a:	4610      	mov	r0, r2
 800a20c:	4798      	blx	r3
 800a20e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	3301      	adds	r3, #1
 800a214:	2207      	movs	r2, #7
 800a216:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a218:	e00f      	b.n	800a23a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fa10 	bl	800a642 <USBD_CtlError>
        err++;
 800a222:	7afb      	ldrb	r3, [r7, #11]
 800a224:	3301      	adds	r3, #1
 800a226:	72fb      	strb	r3, [r7, #11]
      break;
 800a228:	e007      	b.n	800a23a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fa08 	bl	800a642 <USBD_CtlError>
      err++;
 800a232:	7afb      	ldrb	r3, [r7, #11]
 800a234:	3301      	adds	r3, #1
 800a236:	72fb      	strb	r3, [r7, #11]
      break;
 800a238:	bf00      	nop
  }

  if (err != 0U)
 800a23a:	7afb      	ldrb	r3, [r7, #11]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d11e      	bne.n	800a27e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	88db      	ldrh	r3, [r3, #6]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d016      	beq.n	800a276 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a248:	893b      	ldrh	r3, [r7, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00e      	beq.n	800a26c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	88da      	ldrh	r2, [r3, #6]
 800a252:	893b      	ldrh	r3, [r7, #8]
 800a254:	4293      	cmp	r3, r2
 800a256:	bf28      	it	cs
 800a258:	4613      	movcs	r3, r2
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a25e:	893b      	ldrh	r3, [r7, #8]
 800a260:	461a      	mov	r2, r3
 800a262:	68f9      	ldr	r1, [r7, #12]
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fa5d 	bl	800a724 <USBD_CtlSendData>
 800a26a:	e009      	b.n	800a280 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f9e7 	bl	800a642 <USBD_CtlError>
 800a274:	e004      	b.n	800a280 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 faae 	bl	800a7d8 <USBD_CtlSendStatus>
 800a27c:	e000      	b.n	800a280 <USBD_GetDescriptor+0x2cc>
    return;
 800a27e:	bf00      	nop
  }
}
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop

0800a288 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	889b      	ldrh	r3, [r3, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d131      	bne.n	800a2fe <USBD_SetAddress+0x76>
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	88db      	ldrh	r3, [r3, #6]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d12d      	bne.n	800a2fe <USBD_SetAddress+0x76>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	885b      	ldrh	r3, [r3, #2]
 800a2a6:	2b7f      	cmp	r3, #127	; 0x7f
 800a2a8:	d829      	bhi.n	800a2fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	885b      	ldrh	r3, [r3, #2]
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	d104      	bne.n	800a2cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f9bc 	bl	800a642 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ca:	e01d      	b.n	800a308 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	7bfa      	ldrb	r2, [r7, #15]
 800a2d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 ff35 	bl	800b148 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fa7a 	bl	800a7d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d004      	beq.n	800a2f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2f2:	e009      	b.n	800a308 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fc:	e004      	b.n	800a308 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f99e 	bl	800a642 <USBD_CtlError>
  }
}
 800a306:	bf00      	nop
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	885b      	ldrh	r3, [r3, #2]
 800a322:	b2da      	uxtb	r2, r3
 800a324:	4b4e      	ldr	r3, [pc, #312]	; (800a460 <USBD_SetConfig+0x150>)
 800a326:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a328:	4b4d      	ldr	r3, [pc, #308]	; (800a460 <USBD_SetConfig+0x150>)
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d905      	bls.n	800a33c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f985 	bl	800a642 <USBD_CtlError>
    return USBD_FAIL;
 800a338:	2303      	movs	r3, #3
 800a33a:	e08c      	b.n	800a456 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b02      	cmp	r3, #2
 800a346:	d002      	beq.n	800a34e <USBD_SetConfig+0x3e>
 800a348:	2b03      	cmp	r3, #3
 800a34a:	d029      	beq.n	800a3a0 <USBD_SetConfig+0x90>
 800a34c:	e075      	b.n	800a43a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a34e:	4b44      	ldr	r3, [pc, #272]	; (800a460 <USBD_SetConfig+0x150>)
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d020      	beq.n	800a398 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a356:	4b42      	ldr	r3, [pc, #264]	; (800a460 <USBD_SetConfig+0x150>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a360:	4b3f      	ldr	r3, [pc, #252]	; (800a460 <USBD_SetConfig+0x150>)
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7fe ffe7 	bl	800933a <USBD_SetClassConfig>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d008      	beq.n	800a388 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f962 	bl	800a642 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2202      	movs	r2, #2
 800a382:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a386:	e065      	b.n	800a454 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fa25 	bl	800a7d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2203      	movs	r2, #3
 800a392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a396:	e05d      	b.n	800a454 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fa1d 	bl	800a7d8 <USBD_CtlSendStatus>
      break;
 800a39e:	e059      	b.n	800a454 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a3a0:	4b2f      	ldr	r3, [pc, #188]	; (800a460 <USBD_SetConfig+0x150>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d112      	bne.n	800a3ce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2202      	movs	r2, #2
 800a3ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a3b0:	4b2b      	ldr	r3, [pc, #172]	; (800a460 <USBD_SetConfig+0x150>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3ba:	4b29      	ldr	r3, [pc, #164]	; (800a460 <USBD_SetConfig+0x150>)
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7fe ffd6 	bl	8009372 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fa06 	bl	800a7d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3cc:	e042      	b.n	800a454 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a3ce:	4b24      	ldr	r3, [pc, #144]	; (800a460 <USBD_SetConfig+0x150>)
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d02a      	beq.n	800a432 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7fe ffc4 	bl	8009372 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a3ea:	4b1d      	ldr	r3, [pc, #116]	; (800a460 <USBD_SetConfig+0x150>)
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3f4:	4b1a      	ldr	r3, [pc, #104]	; (800a460 <USBD_SetConfig+0x150>)
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7fe ff9d 	bl	800933a <USBD_SetClassConfig>
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00f      	beq.n	800a42a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f918 	bl	800a642 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	b2db      	uxtb	r3, r3
 800a418:	4619      	mov	r1, r3
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f7fe ffa9 	bl	8009372 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2202      	movs	r2, #2
 800a424:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a428:	e014      	b.n	800a454 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f9d4 	bl	800a7d8 <USBD_CtlSendStatus>
      break;
 800a430:	e010      	b.n	800a454 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f9d0 	bl	800a7d8 <USBD_CtlSendStatus>
      break;
 800a438:	e00c      	b.n	800a454 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f900 	bl	800a642 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a442:	4b07      	ldr	r3, [pc, #28]	; (800a460 <USBD_SetConfig+0x150>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	4619      	mov	r1, r3
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7fe ff92 	bl	8009372 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a44e:	2303      	movs	r3, #3
 800a450:	73fb      	strb	r3, [r7, #15]
      break;
 800a452:	bf00      	nop
  }

  return ret;
 800a454:	7bfb      	ldrb	r3, [r7, #15]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	20000cb0 	.word	0x20000cb0

0800a464 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	88db      	ldrh	r3, [r3, #6]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d004      	beq.n	800a480 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f8e2 	bl	800a642 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a47e:	e023      	b.n	800a4c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b02      	cmp	r3, #2
 800a48a:	dc02      	bgt.n	800a492 <USBD_GetConfig+0x2e>
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	dc03      	bgt.n	800a498 <USBD_GetConfig+0x34>
 800a490:	e015      	b.n	800a4be <USBD_GetConfig+0x5a>
 800a492:	2b03      	cmp	r3, #3
 800a494:	d00b      	beq.n	800a4ae <USBD_GetConfig+0x4a>
 800a496:	e012      	b.n	800a4be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f93c 	bl	800a724 <USBD_CtlSendData>
        break;
 800a4ac:	e00c      	b.n	800a4c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f934 	bl	800a724 <USBD_CtlSendData>
        break;
 800a4bc:	e004      	b.n	800a4c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a4be:	6839      	ldr	r1, [r7, #0]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f8be 	bl	800a642 <USBD_CtlError>
        break;
 800a4c6:	bf00      	nop
}
 800a4c8:	bf00      	nop
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d81e      	bhi.n	800a526 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	88db      	ldrh	r3, [r3, #6]
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d004      	beq.n	800a4fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a4f0:	6839      	ldr	r1, [r7, #0]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f8a5 	bl	800a642 <USBD_CtlError>
        break;
 800a4f8:	e01a      	b.n	800a530 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a506:	2b00      	cmp	r3, #0
 800a508:	d005      	beq.n	800a516 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	f043 0202 	orr.w	r2, r3, #2
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	330c      	adds	r3, #12
 800a51a:	2202      	movs	r2, #2
 800a51c:	4619      	mov	r1, r3
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f900 	bl	800a724 <USBD_CtlSendData>
      break;
 800a524:	e004      	b.n	800a530 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a526:	6839      	ldr	r1, [r7, #0]
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f88a 	bl	800a642 <USBD_CtlError>
      break;
 800a52e:	bf00      	nop
  }
}
 800a530:	bf00      	nop
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	885b      	ldrh	r3, [r3, #2]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d107      	bne.n	800a55a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f940 	bl	800a7d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a558:	e013      	b.n	800a582 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	885b      	ldrh	r3, [r3, #2]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d10b      	bne.n	800a57a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	889b      	ldrh	r3, [r3, #4]
 800a566:	0a1b      	lsrs	r3, r3, #8
 800a568:	b29b      	uxth	r3, r3
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f930 	bl	800a7d8 <USBD_CtlSendStatus>
}
 800a578:	e003      	b.n	800a582 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f860 	bl	800a642 <USBD_CtlError>
}
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b082      	sub	sp, #8
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	3b01      	subs	r3, #1
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d80b      	bhi.n	800a5ba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	885b      	ldrh	r3, [r3, #2]
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d10c      	bne.n	800a5c4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f910 	bl	800a7d8 <USBD_CtlSendStatus>
      }
      break;
 800a5b8:	e004      	b.n	800a5c4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a5ba:	6839      	ldr	r1, [r7, #0]
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f840 	bl	800a642 <USBD_CtlError>
      break;
 800a5c2:	e000      	b.n	800a5c6 <USBD_ClrFeature+0x3c>
      break;
 800a5c4:	bf00      	nop
  }
}
 800a5c6:	bf00      	nop
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	781a      	ldrb	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	781a      	ldrb	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f7ff fa41 	bl	8009a80 <SWAPBYTE>
 800a5fe:	4603      	mov	r3, r0
 800a600:	461a      	mov	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3301      	adds	r3, #1
 800a60a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	3301      	adds	r3, #1
 800a610:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7ff fa34 	bl	8009a80 <SWAPBYTE>
 800a618:	4603      	mov	r3, r0
 800a61a:	461a      	mov	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	3301      	adds	r3, #1
 800a624:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3301      	adds	r3, #1
 800a62a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f7ff fa27 	bl	8009a80 <SWAPBYTE>
 800a632:	4603      	mov	r3, r0
 800a634:	461a      	mov	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	80da      	strh	r2, [r3, #6]
}
 800a63a:	bf00      	nop
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b082      	sub	sp, #8
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a64c:	2180      	movs	r1, #128	; 0x80
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fd10 	bl	800b074 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a654:	2100      	movs	r1, #0
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fd0c 	bl	800b074 <USBD_LL_StallEP>
}
 800a65c:	bf00      	nop
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a670:	2300      	movs	r3, #0
 800a672:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d036      	beq.n	800a6e8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a67e:	6938      	ldr	r0, [r7, #16]
 800a680:	f000 f836 	bl	800a6f0 <USBD_GetLen>
 800a684:	4603      	mov	r3, r0
 800a686:	3301      	adds	r3, #1
 800a688:	b29b      	uxth	r3, r3
 800a68a:	005b      	lsls	r3, r3, #1
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a692:	7dfb      	ldrb	r3, [r7, #23]
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	4413      	add	r3, r2
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	7812      	ldrb	r2, [r2, #0]
 800a69c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a69e:	7dfb      	ldrb	r3, [r7, #23]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	2203      	movs	r2, #3
 800a6ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6ae:	7dfb      	ldrb	r3, [r7, #23]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a6b4:	e013      	b.n	800a6de <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a6b6:	7dfb      	ldrb	r3, [r7, #23]
 800a6b8:	68ba      	ldr	r2, [r7, #8]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	7812      	ldrb	r2, [r2, #0]
 800a6c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	613b      	str	r3, [r7, #16]
    idx++;
 800a6c8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	701a      	strb	r2, [r3, #0]
    idx++;
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1e7      	bne.n	800a6b6 <USBD_GetString+0x52>
 800a6e6:	e000      	b.n	800a6ea <USBD_GetString+0x86>
    return;
 800a6e8:	bf00      	nop
  }
}
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a700:	e005      	b.n	800a70e <USBD_GetLen+0x1e>
  {
    len++;
 800a702:	7bfb      	ldrb	r3, [r7, #15]
 800a704:	3301      	adds	r3, #1
 800a706:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	3301      	adds	r3, #1
 800a70c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1f5      	bne.n	800a702 <USBD_GetLen+0x12>
  }

  return len;
 800a716:	7bfb      	ldrb	r3, [r7, #15]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2202      	movs	r2, #2
 800a734:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	2100      	movs	r1, #0
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f000 fd1b 	bl	800b186 <USBD_LL_Transmit>

  return USBD_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b084      	sub	sp, #16
 800a75e:	af00      	add	r7, sp, #0
 800a760:	60f8      	str	r0, [r7, #12]
 800a762:	60b9      	str	r1, [r7, #8]
 800a764:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	2100      	movs	r1, #0
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f000 fd0a 	bl	800b186 <USBD_LL_Transmit>

  return USBD_OK;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2203      	movs	r2, #3
 800a78c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f000 fd0e 	bl	800b1c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	60f8      	str	r0, [r7, #12]
 800a7be:	60b9      	str	r1, [r7, #8]
 800a7c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f000 fcfd 	bl	800b1c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2204      	movs	r2, #4
 800a7e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fcc9 	bl	800b186 <USBD_LL_Transmit>

  return USBD_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2205      	movs	r2, #5
 800a80a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a80e:	2300      	movs	r3, #0
 800a810:	2200      	movs	r2, #0
 800a812:	2100      	movs	r1, #0
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fcd7 	bl	800b1c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a828:	2200      	movs	r2, #0
 800a82a:	4912      	ldr	r1, [pc, #72]	; (800a874 <MX_USB_DEVICE_Init+0x50>)
 800a82c:	4812      	ldr	r0, [pc, #72]	; (800a878 <MX_USB_DEVICE_Init+0x54>)
 800a82e:	f7fe fd07 	bl	8009240 <USBD_Init>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d001      	beq.n	800a83c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a838:	f7f6 ffbe 	bl	80017b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a83c:	490f      	ldr	r1, [pc, #60]	; (800a87c <MX_USB_DEVICE_Init+0x58>)
 800a83e:	480e      	ldr	r0, [pc, #56]	; (800a878 <MX_USB_DEVICE_Init+0x54>)
 800a840:	f7fe fd2e 	bl	80092a0 <USBD_RegisterClass>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d001      	beq.n	800a84e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a84a:	f7f6 ffb5 	bl	80017b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a84e:	490c      	ldr	r1, [pc, #48]	; (800a880 <MX_USB_DEVICE_Init+0x5c>)
 800a850:	4809      	ldr	r0, [pc, #36]	; (800a878 <MX_USB_DEVICE_Init+0x54>)
 800a852:	f7fe fc65 	bl	8009120 <USBD_CDC_RegisterInterface>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d001      	beq.n	800a860 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a85c:	f7f6 ffac 	bl	80017b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a860:	4805      	ldr	r0, [pc, #20]	; (800a878 <MX_USB_DEVICE_Init+0x54>)
 800a862:	f7fe fd53 	bl	800930c <USBD_Start>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a86c:	f7f6 ffa4 	bl	80017b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a870:	bf00      	nop
 800a872:	bd80      	pop	{r7, pc}
 800a874:	200000c0 	.word	0x200000c0
 800a878:	20000cb4 	.word	0x20000cb4
 800a87c:	20000024 	.word	0x20000024
 800a880:	200000ac 	.word	0x200000ac

0800a884 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a888:	2200      	movs	r2, #0
 800a88a:	4905      	ldr	r1, [pc, #20]	; (800a8a0 <CDC_Init_FS+0x1c>)
 800a88c:	4805      	ldr	r0, [pc, #20]	; (800a8a4 <CDC_Init_FS+0x20>)
 800a88e:	f7fe fc61 	bl	8009154 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a892:	4905      	ldr	r1, [pc, #20]	; (800a8a8 <CDC_Init_FS+0x24>)
 800a894:	4803      	ldr	r0, [pc, #12]	; (800a8a4 <CDC_Init_FS+0x20>)
 800a896:	f7fe fc7f 	bl	8009198 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a89a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	20000fd0 	.word	0x20000fd0
 800a8a4:	20000cb4 	.word	0x20000cb4
 800a8a8:	20000f90 	.word	0x20000f90

0800a8ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a8b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	6039      	str	r1, [r7, #0]
 800a8c6:	71fb      	strb	r3, [r7, #7]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a8cc:	79fb      	ldrb	r3, [r7, #7]
 800a8ce:	2b23      	cmp	r3, #35	; 0x23
 800a8d0:	f200 808f 	bhi.w	800a9f2 <CDC_Control_FS+0x136>
 800a8d4:	a201      	add	r2, pc, #4	; (adr r2, 800a8dc <CDC_Control_FS+0x20>)
 800a8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8da:	bf00      	nop
 800a8dc:	0800a9f3 	.word	0x0800a9f3
 800a8e0:	0800a9f3 	.word	0x0800a9f3
 800a8e4:	0800a9f3 	.word	0x0800a9f3
 800a8e8:	0800a9f3 	.word	0x0800a9f3
 800a8ec:	0800a9f3 	.word	0x0800a9f3
 800a8f0:	0800a9f3 	.word	0x0800a9f3
 800a8f4:	0800a9f3 	.word	0x0800a9f3
 800a8f8:	0800a9f3 	.word	0x0800a9f3
 800a8fc:	0800a9f3 	.word	0x0800a9f3
 800a900:	0800a9f3 	.word	0x0800a9f3
 800a904:	0800a9f3 	.word	0x0800a9f3
 800a908:	0800a9f3 	.word	0x0800a9f3
 800a90c:	0800a9f3 	.word	0x0800a9f3
 800a910:	0800a9f3 	.word	0x0800a9f3
 800a914:	0800a9f3 	.word	0x0800a9f3
 800a918:	0800a9f3 	.word	0x0800a9f3
 800a91c:	0800a9f3 	.word	0x0800a9f3
 800a920:	0800a9f3 	.word	0x0800a9f3
 800a924:	0800a9f3 	.word	0x0800a9f3
 800a928:	0800a9f3 	.word	0x0800a9f3
 800a92c:	0800a9f3 	.word	0x0800a9f3
 800a930:	0800a9f3 	.word	0x0800a9f3
 800a934:	0800a9f3 	.word	0x0800a9f3
 800a938:	0800a9f3 	.word	0x0800a9f3
 800a93c:	0800a9f3 	.word	0x0800a9f3
 800a940:	0800a9f3 	.word	0x0800a9f3
 800a944:	0800a9f3 	.word	0x0800a9f3
 800a948:	0800a9f3 	.word	0x0800a9f3
 800a94c:	0800a9f3 	.word	0x0800a9f3
 800a950:	0800a9f3 	.word	0x0800a9f3
 800a954:	0800a9f3 	.word	0x0800a9f3
 800a958:	0800a9f3 	.word	0x0800a9f3
 800a95c:	0800a96d 	.word	0x0800a96d
 800a960:	0800a9b1 	.word	0x0800a9b1
 800a964:	0800a9f3 	.word	0x0800a9f3
 800a968:	0800a9f3 	.word	0x0800a9f3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1]<<8) | (pbuf[2] << 16) |  (pbuf[3] <<24));
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	461a      	mov	r2, r3
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	3301      	adds	r3, #1
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	021b      	lsls	r3, r3, #8
 800a97a:	431a      	orrs	r2, r3
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	3302      	adds	r3, #2
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	041b      	lsls	r3, r3, #16
 800a984:	431a      	orrs	r2, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	3303      	adds	r3, #3
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	061b      	lsls	r3, r3, #24
 800a98e:	4313      	orrs	r3, r2
 800a990:	461a      	mov	r2, r3
 800a992:	4b1c      	ldr	r3, [pc, #112]	; (800aa04 <CDC_Control_FS+0x148>)
 800a994:	601a      	str	r2, [r3, #0]
    	LineCoding.format = pbuf[4];
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	791a      	ldrb	r2, [r3, #4]
 800a99a:	4b1a      	ldr	r3, [pc, #104]	; (800aa04 <CDC_Control_FS+0x148>)
 800a99c:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	795a      	ldrb	r2, [r3, #5]
 800a9a2:	4b18      	ldr	r3, [pc, #96]	; (800aa04 <CDC_Control_FS+0x148>)
 800a9a4:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	799a      	ldrb	r2, [r3, #6]
 800a9aa:	4b16      	ldr	r3, [pc, #88]	; (800aa04 <CDC_Control_FS+0x148>)
 800a9ac:	719a      	strb	r2, [r3, #6]

    break;
 800a9ae:	e021      	b.n	800a9f4 <CDC_Control_FS+0x138>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t) (LineCoding.bitrate) ;
 800a9b0:	4b14      	ldr	r3, [pc, #80]	; (800aa04 <CDC_Control_FS+0x148>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t) (LineCoding.bitrate << 8);
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	2200      	movs	r2, #0
 800a9c0:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t) (LineCoding.bitrate << 16);
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	3302      	adds	r3, #2
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t) (LineCoding.bitrate << 24);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	3303      	adds	r3, #3
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	4a0b      	ldr	r2, [pc, #44]	; (800aa04 <CDC_Control_FS+0x148>)
 800a9d8:	7912      	ldrb	r2, [r2, #4]
 800a9da:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	3305      	adds	r3, #5
 800a9e0:	4a08      	ldr	r2, [pc, #32]	; (800aa04 <CDC_Control_FS+0x148>)
 800a9e2:	7952      	ldrb	r2, [r2, #5]
 800a9e4:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	3306      	adds	r3, #6
 800a9ea:	4a06      	ldr	r2, [pc, #24]	; (800aa04 <CDC_Control_FS+0x148>)
 800a9ec:	7992      	ldrb	r2, [r2, #6]
 800a9ee:	701a      	strb	r2, [r3, #0]
    break;
 800a9f0:	e000      	b.n	800a9f4 <CDC_Control_FS+0x138>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a9f2:	bf00      	nop
  }

  return (USBD_OK);
 800a9f4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	200000a4 	.word	0x200000a4

0800aa08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t length  = MIN(Len[0], APP_TX_DATA_SIZE);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b40      	cmp	r3, #64	; 0x40
 800aa18:	bf28      	it	cs
 800aa1a:	2340      	movcs	r3, #64	; 0x40
 800aa1c:	73fb      	strb	r3, [r7, #15]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aa1e:	6879      	ldr	r1, [r7, #4]
 800aa20:	4808      	ldr	r0, [pc, #32]	; (800aa44 <CDC_Receive_FS+0x3c>)
 800aa22:	f7fe fbb9 	bl	8009198 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa26:	4807      	ldr	r0, [pc, #28]	; (800aa44 <CDC_Receive_FS+0x3c>)
 800aa28:	f7fe fbd4 	bl	80091d4 <USBD_CDC_ReceivePacket>

	SerialParse(Buf);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7f7 facd 	bl	8001fcc <SerialParse>
	g_bDataAvailable = true;
 800aa32:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <CDC_Receive_FS+0x40>)
 800aa34:	2201      	movs	r2, #1
 800aa36:	701a      	strb	r2, [r3, #0]
	return (USBD_OK);
 800aa38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20000cb4 	.word	0x20000cb4
 800aa48:	20000b88 	.word	0x20000b88

0800aa4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b087      	sub	sp, #28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4613      	mov	r3, r2
 800aa58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aa5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	371c      	adds	r7, #28
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
	...

0800aa70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	4603      	mov	r3, r0
 800aa78:	6039      	str	r1, [r7, #0]
 800aa7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	2212      	movs	r2, #18
 800aa80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa82:	4b03      	ldr	r3, [pc, #12]	; (800aa90 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	200000dc 	.word	0x200000dc

0800aa94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	6039      	str	r1, [r7, #0]
 800aa9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2204      	movs	r2, #4
 800aaa4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aaa6:	4b03      	ldr	r3, [pc, #12]	; (800aab4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	200000f0 	.word	0x200000f0

0800aab8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	6039      	str	r1, [r7, #0]
 800aac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aac4:	79fb      	ldrb	r3, [r7, #7]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d105      	bne.n	800aad6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	4907      	ldr	r1, [pc, #28]	; (800aaec <USBD_FS_ProductStrDescriptor+0x34>)
 800aace:	4808      	ldr	r0, [pc, #32]	; (800aaf0 <USBD_FS_ProductStrDescriptor+0x38>)
 800aad0:	f7ff fdc8 	bl	800a664 <USBD_GetString>
 800aad4:	e004      	b.n	800aae0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	4904      	ldr	r1, [pc, #16]	; (800aaec <USBD_FS_ProductStrDescriptor+0x34>)
 800aada:	4805      	ldr	r0, [pc, #20]	; (800aaf0 <USBD_FS_ProductStrDescriptor+0x38>)
 800aadc:	f7ff fdc2 	bl	800a664 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aae0:	4b02      	ldr	r3, [pc, #8]	; (800aaec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	20001010 	.word	0x20001010
 800aaf0:	0800ca9c 	.word	0x0800ca9c

0800aaf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	4603      	mov	r3, r0
 800aafc:	6039      	str	r1, [r7, #0]
 800aafe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab00:	683a      	ldr	r2, [r7, #0]
 800ab02:	4904      	ldr	r1, [pc, #16]	; (800ab14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ab04:	4804      	ldr	r0, [pc, #16]	; (800ab18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ab06:	f7ff fdad 	bl	800a664 <USBD_GetString>
  return USBD_StrDesc;
 800ab0a:	4b02      	ldr	r3, [pc, #8]	; (800ab14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	20001010 	.word	0x20001010
 800ab18:	0800cab4 	.word	0x0800cab4

0800ab1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	4603      	mov	r3, r0
 800ab24:	6039      	str	r1, [r7, #0]
 800ab26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	221a      	movs	r2, #26
 800ab2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab2e:	f000 f843 	bl	800abb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab32:	4b02      	ldr	r3, [pc, #8]	; (800ab3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	200000f4 	.word	0x200000f4

0800ab40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	6039      	str	r1, [r7, #0]
 800ab4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab4c:	79fb      	ldrb	r3, [r7, #7]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d105      	bne.n	800ab5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	4907      	ldr	r1, [pc, #28]	; (800ab74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab56:	4808      	ldr	r0, [pc, #32]	; (800ab78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab58:	f7ff fd84 	bl	800a664 <USBD_GetString>
 800ab5c:	e004      	b.n	800ab68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	4904      	ldr	r1, [pc, #16]	; (800ab74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab62:	4805      	ldr	r0, [pc, #20]	; (800ab78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab64:	f7ff fd7e 	bl	800a664 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab68:	4b02      	ldr	r3, [pc, #8]	; (800ab74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	20001010 	.word	0x20001010
 800ab78:	0800cac8 	.word	0x0800cac8

0800ab7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	6039      	str	r1, [r7, #0]
 800ab86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab88:	79fb      	ldrb	r3, [r7, #7]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d105      	bne.n	800ab9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	4907      	ldr	r1, [pc, #28]	; (800abb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab92:	4808      	ldr	r0, [pc, #32]	; (800abb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab94:	f7ff fd66 	bl	800a664 <USBD_GetString>
 800ab98:	e004      	b.n	800aba4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab9a:	683a      	ldr	r2, [r7, #0]
 800ab9c:	4904      	ldr	r1, [pc, #16]	; (800abb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab9e:	4805      	ldr	r0, [pc, #20]	; (800abb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aba0:	f7ff fd60 	bl	800a664 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aba4:	4b02      	ldr	r3, [pc, #8]	; (800abb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	20001010 	.word	0x20001010
 800abb4:	0800cad4 	.word	0x0800cad4

0800abb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abbe:	4b0f      	ldr	r3, [pc, #60]	; (800abfc <Get_SerialNum+0x44>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abc4:	4b0e      	ldr	r3, [pc, #56]	; (800ac00 <Get_SerialNum+0x48>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abca:	4b0e      	ldr	r3, [pc, #56]	; (800ac04 <Get_SerialNum+0x4c>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4413      	add	r3, r2
 800abd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d009      	beq.n	800abf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abde:	2208      	movs	r2, #8
 800abe0:	4909      	ldr	r1, [pc, #36]	; (800ac08 <Get_SerialNum+0x50>)
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 f814 	bl	800ac10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abe8:	2204      	movs	r2, #4
 800abea:	4908      	ldr	r1, [pc, #32]	; (800ac0c <Get_SerialNum+0x54>)
 800abec:	68b8      	ldr	r0, [r7, #8]
 800abee:	f000 f80f 	bl	800ac10 <IntToUnicode>
  }
}
 800abf2:	bf00      	nop
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	1fff7a10 	.word	0x1fff7a10
 800ac00:	1fff7a14 	.word	0x1fff7a14
 800ac04:	1fff7a18 	.word	0x1fff7a18
 800ac08:	200000f6 	.word	0x200000f6
 800ac0c:	20000106 	.word	0x20000106

0800ac10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b087      	sub	sp, #28
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac22:	2300      	movs	r3, #0
 800ac24:	75fb      	strb	r3, [r7, #23]
 800ac26:	e027      	b.n	800ac78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	0f1b      	lsrs	r3, r3, #28
 800ac2c:	2b09      	cmp	r3, #9
 800ac2e:	d80b      	bhi.n	800ac48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	0f1b      	lsrs	r3, r3, #28
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	440b      	add	r3, r1
 800ac40:	3230      	adds	r2, #48	; 0x30
 800ac42:	b2d2      	uxtb	r2, r2
 800ac44:	701a      	strb	r2, [r3, #0]
 800ac46:	e00a      	b.n	800ac5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	0f1b      	lsrs	r3, r3, #28
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	7dfb      	ldrb	r3, [r7, #23]
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	4619      	mov	r1, r3
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	440b      	add	r3, r1
 800ac58:	3237      	adds	r2, #55	; 0x37
 800ac5a:	b2d2      	uxtb	r2, r2
 800ac5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	011b      	lsls	r3, r3, #4
 800ac62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac64:	7dfb      	ldrb	r3, [r7, #23]
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	3301      	adds	r3, #1
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	2200      	movs	r2, #0
 800ac70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac72:	7dfb      	ldrb	r3, [r7, #23]
 800ac74:	3301      	adds	r3, #1
 800ac76:	75fb      	strb	r3, [r7, #23]
 800ac78:	7dfa      	ldrb	r2, [r7, #23]
 800ac7a:	79fb      	ldrb	r3, [r7, #7]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d3d3      	bcc.n	800ac28 <IntToUnicode+0x18>
  }
}
 800ac80:	bf00      	nop
 800ac82:	bf00      	nop
 800ac84:	371c      	adds	r7, #28
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
	...

0800ac90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b08a      	sub	sp, #40	; 0x28
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac98:	f107 0314 	add.w	r3, r7, #20
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	601a      	str	r2, [r3, #0]
 800aca0:	605a      	str	r2, [r3, #4]
 800aca2:	609a      	str	r2, [r3, #8]
 800aca4:	60da      	str	r2, [r3, #12]
 800aca6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acb0:	d13a      	bne.n	800ad28 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acb2:	2300      	movs	r3, #0
 800acb4:	613b      	str	r3, [r7, #16]
 800acb6:	4b1e      	ldr	r3, [pc, #120]	; (800ad30 <HAL_PCD_MspInit+0xa0>)
 800acb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acba:	4a1d      	ldr	r2, [pc, #116]	; (800ad30 <HAL_PCD_MspInit+0xa0>)
 800acbc:	f043 0301 	orr.w	r3, r3, #1
 800acc0:	6313      	str	r3, [r2, #48]	; 0x30
 800acc2:	4b1b      	ldr	r3, [pc, #108]	; (800ad30 <HAL_PCD_MspInit+0xa0>)
 800acc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc6:	f003 0301 	and.w	r3, r3, #1
 800acca:	613b      	str	r3, [r7, #16]
 800accc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800acce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800acd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acd4:	2302      	movs	r3, #2
 800acd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acd8:	2300      	movs	r3, #0
 800acda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acdc:	2303      	movs	r3, #3
 800acde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ace0:	230a      	movs	r3, #10
 800ace2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ace4:	f107 0314 	add.w	r3, r7, #20
 800ace8:	4619      	mov	r1, r3
 800acea:	4812      	ldr	r0, [pc, #72]	; (800ad34 <HAL_PCD_MspInit+0xa4>)
 800acec:	f7f7 ff22 	bl	8002b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800acf0:	4b0f      	ldr	r3, [pc, #60]	; (800ad30 <HAL_PCD_MspInit+0xa0>)
 800acf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acf4:	4a0e      	ldr	r2, [pc, #56]	; (800ad30 <HAL_PCD_MspInit+0xa0>)
 800acf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acfa:	6353      	str	r3, [r2, #52]	; 0x34
 800acfc:	2300      	movs	r3, #0
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	4b0b      	ldr	r3, [pc, #44]	; (800ad30 <HAL_PCD_MspInit+0xa0>)
 800ad02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad04:	4a0a      	ldr	r2, [pc, #40]	; (800ad30 <HAL_PCD_MspInit+0xa0>)
 800ad06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad0a:	6453      	str	r3, [r2, #68]	; 0x44
 800ad0c:	4b08      	ldr	r3, [pc, #32]	; (800ad30 <HAL_PCD_MspInit+0xa0>)
 800ad0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad14:	60fb      	str	r3, [r7, #12]
 800ad16:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ad18:	2200      	movs	r2, #0
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	2043      	movs	r0, #67	; 0x43
 800ad1e:	f7f7 fe40 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad22:	2043      	movs	r0, #67	; 0x43
 800ad24:	f7f7 fe59 	bl	80029da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad28:	bf00      	nop
 800ad2a:	3728      	adds	r7, #40	; 0x28
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	40023800 	.word	0x40023800
 800ad34:	40020000 	.word	0x40020000

0800ad38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4610      	mov	r0, r2
 800ad50:	f7fe fb29 	bl	80093a6 <USBD_LL_SetupStage>
}
 800ad54:	bf00      	nop
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	460b      	mov	r3, r1
 800ad66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ad6e:	78fa      	ldrb	r2, [r7, #3]
 800ad70:	6879      	ldr	r1, [r7, #4]
 800ad72:	4613      	mov	r3, r2
 800ad74:	00db      	lsls	r3, r3, #3
 800ad76:	4413      	add	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	440b      	add	r3, r1
 800ad7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	78fb      	ldrb	r3, [r7, #3]
 800ad84:	4619      	mov	r1, r3
 800ad86:	f7fe fb63 	bl	8009450 <USBD_LL_DataOutStage>
}
 800ad8a:	bf00      	nop
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b082      	sub	sp, #8
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ada4:	78fa      	ldrb	r2, [r7, #3]
 800ada6:	6879      	ldr	r1, [r7, #4]
 800ada8:	4613      	mov	r3, r2
 800adaa:	00db      	lsls	r3, r3, #3
 800adac:	4413      	add	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	440b      	add	r3, r1
 800adb2:	334c      	adds	r3, #76	; 0x4c
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	78fb      	ldrb	r3, [r7, #3]
 800adb8:	4619      	mov	r1, r3
 800adba:	f7fe fbfc 	bl	80095b6 <USBD_LL_DataInStage>
}
 800adbe:	bf00      	nop
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b082      	sub	sp, #8
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800add4:	4618      	mov	r0, r3
 800add6:	f7fe fd30 	bl	800983a <USBD_LL_SOF>
}
 800adda:	bf00      	nop
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b084      	sub	sp, #16
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800adea:	2301      	movs	r3, #1
 800adec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d102      	bne.n	800adfc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
 800adfa:	e008      	b.n	800ae0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d102      	bne.n	800ae0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ae04:	2301      	movs	r3, #1
 800ae06:	73fb      	strb	r3, [r7, #15]
 800ae08:	e001      	b.n	800ae0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ae0a:	f7f6 fcd5 	bl	80017b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae14:	7bfa      	ldrb	r2, [r7, #15]
 800ae16:	4611      	mov	r1, r2
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fe fcd0 	bl	80097be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fe fc78 	bl	800971a <USBD_LL_Reset>
}
 800ae2a:	bf00      	nop
 800ae2c:	3710      	adds	r7, #16
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
	...

0800ae34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fe fccb 	bl	80097de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	6812      	ldr	r2, [r2, #0]
 800ae56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae5a:	f043 0301 	orr.w	r3, r3, #1
 800ae5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a1b      	ldr	r3, [r3, #32]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d005      	beq.n	800ae74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae68:	4b04      	ldr	r3, [pc, #16]	; (800ae7c <HAL_PCD_SuspendCallback+0x48>)
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	4a03      	ldr	r2, [pc, #12]	; (800ae7c <HAL_PCD_SuspendCallback+0x48>)
 800ae6e:	f043 0306 	orr.w	r3, r3, #6
 800ae72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae74:	bf00      	nop
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	e000ed00 	.word	0xe000ed00

0800ae80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fe fcbb 	bl	800980a <USBD_LL_Resume>
}
 800ae94:	bf00      	nop
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	460b      	mov	r3, r1
 800aea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aeae:	78fa      	ldrb	r2, [r7, #3]
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fe fd13 	bl	80098de <USBD_LL_IsoOUTIncomplete>
}
 800aeb8:	bf00      	nop
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aed2:	78fa      	ldrb	r2, [r7, #3]
 800aed4:	4611      	mov	r1, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fe fccf 	bl	800987a <USBD_LL_IsoINIncomplete>
}
 800aedc:	bf00      	nop
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fe fd25 	bl	8009942 <USBD_LL_DevConnected>
}
 800aef8:	bf00      	nop
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fe fd22 	bl	8009958 <USBD_LL_DevDisconnected>
}
 800af14:	bf00      	nop
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d13c      	bne.n	800afa6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af2c:	4a20      	ldr	r2, [pc, #128]	; (800afb0 <USBD_LL_Init+0x94>)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a1e      	ldr	r2, [pc, #120]	; (800afb0 <USBD_LL_Init+0x94>)
 800af38:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af3c:	4b1c      	ldr	r3, [pc, #112]	; (800afb0 <USBD_LL_Init+0x94>)
 800af3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800af44:	4b1a      	ldr	r3, [pc, #104]	; (800afb0 <USBD_LL_Init+0x94>)
 800af46:	2204      	movs	r2, #4
 800af48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af4a:	4b19      	ldr	r3, [pc, #100]	; (800afb0 <USBD_LL_Init+0x94>)
 800af4c:	2202      	movs	r2, #2
 800af4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af50:	4b17      	ldr	r3, [pc, #92]	; (800afb0 <USBD_LL_Init+0x94>)
 800af52:	2200      	movs	r2, #0
 800af54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af56:	4b16      	ldr	r3, [pc, #88]	; (800afb0 <USBD_LL_Init+0x94>)
 800af58:	2202      	movs	r2, #2
 800af5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af5c:	4b14      	ldr	r3, [pc, #80]	; (800afb0 <USBD_LL_Init+0x94>)
 800af5e:	2200      	movs	r2, #0
 800af60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af62:	4b13      	ldr	r3, [pc, #76]	; (800afb0 <USBD_LL_Init+0x94>)
 800af64:	2200      	movs	r2, #0
 800af66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af68:	4b11      	ldr	r3, [pc, #68]	; (800afb0 <USBD_LL_Init+0x94>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af6e:	4b10      	ldr	r3, [pc, #64]	; (800afb0 <USBD_LL_Init+0x94>)
 800af70:	2200      	movs	r2, #0
 800af72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af74:	4b0e      	ldr	r3, [pc, #56]	; (800afb0 <USBD_LL_Init+0x94>)
 800af76:	2200      	movs	r2, #0
 800af78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af7a:	480d      	ldr	r0, [pc, #52]	; (800afb0 <USBD_LL_Init+0x94>)
 800af7c:	f7f7 ff8f 	bl	8002e9e <HAL_PCD_Init>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af86:	f7f6 fc17 	bl	80017b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800af8a:	2180      	movs	r1, #128	; 0x80
 800af8c:	4808      	ldr	r0, [pc, #32]	; (800afb0 <USBD_LL_Init+0x94>)
 800af8e:	f7f9 f9e6 	bl	800435e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af92:	2240      	movs	r2, #64	; 0x40
 800af94:	2100      	movs	r1, #0
 800af96:	4806      	ldr	r0, [pc, #24]	; (800afb0 <USBD_LL_Init+0x94>)
 800af98:	f7f9 f99a 	bl	80042d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af9c:	2280      	movs	r2, #128	; 0x80
 800af9e:	2101      	movs	r1, #1
 800afa0:	4803      	ldr	r0, [pc, #12]	; (800afb0 <USBD_LL_Init+0x94>)
 800afa2:	f7f9 f995 	bl	80042d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800afa6:	2300      	movs	r3, #0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	20001210 	.word	0x20001210

0800afb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afca:	4618      	mov	r0, r3
 800afcc:	f7f8 f884 	bl	80030d8 <HAL_PCD_Start>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afd4:	7bfb      	ldrb	r3, [r7, #15]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 f942 	bl	800b260 <USBD_Get_USB_Status>
 800afdc:	4603      	mov	r3, r0
 800afde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b084      	sub	sp, #16
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	4608      	mov	r0, r1
 800aff4:	4611      	mov	r1, r2
 800aff6:	461a      	mov	r2, r3
 800aff8:	4603      	mov	r3, r0
 800affa:	70fb      	strb	r3, [r7, #3]
 800affc:	460b      	mov	r3, r1
 800affe:	70bb      	strb	r3, [r7, #2]
 800b000:	4613      	mov	r3, r2
 800b002:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b004:	2300      	movs	r3, #0
 800b006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b008:	2300      	movs	r3, #0
 800b00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b012:	78bb      	ldrb	r3, [r7, #2]
 800b014:	883a      	ldrh	r2, [r7, #0]
 800b016:	78f9      	ldrb	r1, [r7, #3]
 800b018:	f7f8 fd55 	bl	8003ac6 <HAL_PCD_EP_Open>
 800b01c:	4603      	mov	r3, r0
 800b01e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b020:	7bfb      	ldrb	r3, [r7, #15]
 800b022:	4618      	mov	r0, r3
 800b024:	f000 f91c 	bl	800b260 <USBD_Get_USB_Status>
 800b028:	4603      	mov	r3, r0
 800b02a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b02c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b084      	sub	sp, #16
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	460b      	mov	r3, r1
 800b040:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b042:	2300      	movs	r3, #0
 800b044:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b050:	78fa      	ldrb	r2, [r7, #3]
 800b052:	4611      	mov	r1, r2
 800b054:	4618      	mov	r0, r3
 800b056:	f7f8 fd9e 	bl	8003b96 <HAL_PCD_EP_Close>
 800b05a:	4603      	mov	r3, r0
 800b05c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
 800b060:	4618      	mov	r0, r3
 800b062:	f000 f8fd 	bl	800b260 <USBD_Get_USB_Status>
 800b066:	4603      	mov	r3, r0
 800b068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	460b      	mov	r3, r1
 800b07e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b08e:	78fa      	ldrb	r2, [r7, #3]
 800b090:	4611      	mov	r1, r2
 800b092:	4618      	mov	r0, r3
 800b094:	f7f8 fe76 	bl	8003d84 <HAL_PCD_EP_SetStall>
 800b098:	4603      	mov	r3, r0
 800b09a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 f8de 	bl	800b260 <USBD_Get_USB_Status>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b084      	sub	sp, #16
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0cc:	78fa      	ldrb	r2, [r7, #3]
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7f8 febb 	bl	8003e4c <HAL_PCD_EP_ClrStall>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f000 f8bf 	bl	800b260 <USBD_Get_USB_Status>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b102:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	da0b      	bge.n	800b124 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b10c:	78fb      	ldrb	r3, [r7, #3]
 800b10e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b112:	68f9      	ldr	r1, [r7, #12]
 800b114:	4613      	mov	r3, r2
 800b116:	00db      	lsls	r3, r3, #3
 800b118:	4413      	add	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	440b      	add	r3, r1
 800b11e:	333e      	adds	r3, #62	; 0x3e
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	e00b      	b.n	800b13c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b124:	78fb      	ldrb	r3, [r7, #3]
 800b126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b12a:	68f9      	ldr	r1, [r7, #12]
 800b12c:	4613      	mov	r3, r2
 800b12e:	00db      	lsls	r3, r3, #3
 800b130:	4413      	add	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	440b      	add	r3, r1
 800b136:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b13a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	460b      	mov	r3, r1
 800b152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b162:	78fa      	ldrb	r2, [r7, #3]
 800b164:	4611      	mov	r1, r2
 800b166:	4618      	mov	r0, r3
 800b168:	f7f8 fc88 	bl	8003a7c <HAL_PCD_SetAddress>
 800b16c:	4603      	mov	r3, r0
 800b16e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b170:	7bfb      	ldrb	r3, [r7, #15]
 800b172:	4618      	mov	r0, r3
 800b174:	f000 f874 	bl	800b260 <USBD_Get_USB_Status>
 800b178:	4603      	mov	r3, r0
 800b17a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b17c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b086      	sub	sp, #24
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	60f8      	str	r0, [r7, #12]
 800b18e:	607a      	str	r2, [r7, #4]
 800b190:	603b      	str	r3, [r7, #0]
 800b192:	460b      	mov	r3, r1
 800b194:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b19a:	2300      	movs	r3, #0
 800b19c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b1a4:	7af9      	ldrb	r1, [r7, #11]
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	f7f8 fda1 	bl	8003cf0 <HAL_PCD_EP_Transmit>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1b2:	7dfb      	ldrb	r3, [r7, #23]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f000 f853 	bl	800b260 <USBD_Get_USB_Status>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1be:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3718      	adds	r7, #24
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	607a      	str	r2, [r7, #4]
 800b1d2:	603b      	str	r3, [r7, #0]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b1e6:	7af9      	ldrb	r1, [r7, #11]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	f7f8 fd1d 	bl	8003c2a <HAL_PCD_EP_Receive>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f000 f832 	bl	800b260 <USBD_Get_USB_Status>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b200:	7dbb      	ldrb	r3, [r7, #22]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3718      	adds	r7, #24
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b082      	sub	sp, #8
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	460b      	mov	r3, r1
 800b214:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b21c:	78fa      	ldrb	r2, [r7, #3]
 800b21e:	4611      	mov	r1, r2
 800b220:	4618      	mov	r0, r3
 800b222:	f7f8 fd4d 	bl	8003cc0 <HAL_PCD_EP_GetRxCount>
 800b226:	4603      	mov	r3, r0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b238:	4b03      	ldr	r3, [pc, #12]	; (800b248 <USBD_static_malloc+0x18>)
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	2000171c 	.word	0x2000171c

0800b24c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]

}
 800b254:	bf00      	nop
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b26a:	2300      	movs	r3, #0
 800b26c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b26e:	79fb      	ldrb	r3, [r7, #7]
 800b270:	2b03      	cmp	r3, #3
 800b272:	d817      	bhi.n	800b2a4 <USBD_Get_USB_Status+0x44>
 800b274:	a201      	add	r2, pc, #4	; (adr r2, 800b27c <USBD_Get_USB_Status+0x1c>)
 800b276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27a:	bf00      	nop
 800b27c:	0800b28d 	.word	0x0800b28d
 800b280:	0800b293 	.word	0x0800b293
 800b284:	0800b299 	.word	0x0800b299
 800b288:	0800b29f 	.word	0x0800b29f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b28c:	2300      	movs	r3, #0
 800b28e:	73fb      	strb	r3, [r7, #15]
    break;
 800b290:	e00b      	b.n	800b2aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b292:	2303      	movs	r3, #3
 800b294:	73fb      	strb	r3, [r7, #15]
    break;
 800b296:	e008      	b.n	800b2aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b298:	2301      	movs	r3, #1
 800b29a:	73fb      	strb	r3, [r7, #15]
    break;
 800b29c:	e005      	b.n	800b2aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a2:	e002      	b.n	800b2aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a8:	bf00      	nop
  }
  return usb_status;
 800b2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3714      	adds	r7, #20
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <__errno>:
 800b2b8:	4b01      	ldr	r3, [pc, #4]	; (800b2c0 <__errno+0x8>)
 800b2ba:	6818      	ldr	r0, [r3, #0]
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	20000110 	.word	0x20000110

0800b2c4 <__libc_init_array>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	4d0d      	ldr	r5, [pc, #52]	; (800b2fc <__libc_init_array+0x38>)
 800b2c8:	4c0d      	ldr	r4, [pc, #52]	; (800b300 <__libc_init_array+0x3c>)
 800b2ca:	1b64      	subs	r4, r4, r5
 800b2cc:	10a4      	asrs	r4, r4, #2
 800b2ce:	2600      	movs	r6, #0
 800b2d0:	42a6      	cmp	r6, r4
 800b2d2:	d109      	bne.n	800b2e8 <__libc_init_array+0x24>
 800b2d4:	4d0b      	ldr	r5, [pc, #44]	; (800b304 <__libc_init_array+0x40>)
 800b2d6:	4c0c      	ldr	r4, [pc, #48]	; (800b308 <__libc_init_array+0x44>)
 800b2d8:	f001 fbb8 	bl	800ca4c <_init>
 800b2dc:	1b64      	subs	r4, r4, r5
 800b2de:	10a4      	asrs	r4, r4, #2
 800b2e0:	2600      	movs	r6, #0
 800b2e2:	42a6      	cmp	r6, r4
 800b2e4:	d105      	bne.n	800b2f2 <__libc_init_array+0x2e>
 800b2e6:	bd70      	pop	{r4, r5, r6, pc}
 800b2e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ec:	4798      	blx	r3
 800b2ee:	3601      	adds	r6, #1
 800b2f0:	e7ee      	b.n	800b2d0 <__libc_init_array+0xc>
 800b2f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2f6:	4798      	blx	r3
 800b2f8:	3601      	adds	r6, #1
 800b2fa:	e7f2      	b.n	800b2e2 <__libc_init_array+0x1e>
 800b2fc:	0800cb68 	.word	0x0800cb68
 800b300:	0800cb68 	.word	0x0800cb68
 800b304:	0800cb68 	.word	0x0800cb68
 800b308:	0800cb6c 	.word	0x0800cb6c

0800b30c <malloc>:
 800b30c:	4b02      	ldr	r3, [pc, #8]	; (800b318 <malloc+0xc>)
 800b30e:	4601      	mov	r1, r0
 800b310:	6818      	ldr	r0, [r3, #0]
 800b312:	f000 b88d 	b.w	800b430 <_malloc_r>
 800b316:	bf00      	nop
 800b318:	20000110 	.word	0x20000110

0800b31c <free>:
 800b31c:	4b02      	ldr	r3, [pc, #8]	; (800b328 <free+0xc>)
 800b31e:	4601      	mov	r1, r0
 800b320:	6818      	ldr	r0, [r3, #0]
 800b322:	f000 b819 	b.w	800b358 <_free_r>
 800b326:	bf00      	nop
 800b328:	20000110 	.word	0x20000110

0800b32c <memcpy>:
 800b32c:	440a      	add	r2, r1
 800b32e:	4291      	cmp	r1, r2
 800b330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b334:	d100      	bne.n	800b338 <memcpy+0xc>
 800b336:	4770      	bx	lr
 800b338:	b510      	push	{r4, lr}
 800b33a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b33e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b342:	4291      	cmp	r1, r2
 800b344:	d1f9      	bne.n	800b33a <memcpy+0xe>
 800b346:	bd10      	pop	{r4, pc}

0800b348 <memset>:
 800b348:	4402      	add	r2, r0
 800b34a:	4603      	mov	r3, r0
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d100      	bne.n	800b352 <memset+0xa>
 800b350:	4770      	bx	lr
 800b352:	f803 1b01 	strb.w	r1, [r3], #1
 800b356:	e7f9      	b.n	800b34c <memset+0x4>

0800b358 <_free_r>:
 800b358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b35a:	2900      	cmp	r1, #0
 800b35c:	d044      	beq.n	800b3e8 <_free_r+0x90>
 800b35e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b362:	9001      	str	r0, [sp, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f1a1 0404 	sub.w	r4, r1, #4
 800b36a:	bfb8      	it	lt
 800b36c:	18e4      	addlt	r4, r4, r3
 800b36e:	f000 f903 	bl	800b578 <__malloc_lock>
 800b372:	4a1e      	ldr	r2, [pc, #120]	; (800b3ec <_free_r+0x94>)
 800b374:	9801      	ldr	r0, [sp, #4]
 800b376:	6813      	ldr	r3, [r2, #0]
 800b378:	b933      	cbnz	r3, 800b388 <_free_r+0x30>
 800b37a:	6063      	str	r3, [r4, #4]
 800b37c:	6014      	str	r4, [r2, #0]
 800b37e:	b003      	add	sp, #12
 800b380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b384:	f000 b8fe 	b.w	800b584 <__malloc_unlock>
 800b388:	42a3      	cmp	r3, r4
 800b38a:	d908      	bls.n	800b39e <_free_r+0x46>
 800b38c:	6825      	ldr	r5, [r4, #0]
 800b38e:	1961      	adds	r1, r4, r5
 800b390:	428b      	cmp	r3, r1
 800b392:	bf01      	itttt	eq
 800b394:	6819      	ldreq	r1, [r3, #0]
 800b396:	685b      	ldreq	r3, [r3, #4]
 800b398:	1949      	addeq	r1, r1, r5
 800b39a:	6021      	streq	r1, [r4, #0]
 800b39c:	e7ed      	b.n	800b37a <_free_r+0x22>
 800b39e:	461a      	mov	r2, r3
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	b10b      	cbz	r3, 800b3a8 <_free_r+0x50>
 800b3a4:	42a3      	cmp	r3, r4
 800b3a6:	d9fa      	bls.n	800b39e <_free_r+0x46>
 800b3a8:	6811      	ldr	r1, [r2, #0]
 800b3aa:	1855      	adds	r5, r2, r1
 800b3ac:	42a5      	cmp	r5, r4
 800b3ae:	d10b      	bne.n	800b3c8 <_free_r+0x70>
 800b3b0:	6824      	ldr	r4, [r4, #0]
 800b3b2:	4421      	add	r1, r4
 800b3b4:	1854      	adds	r4, r2, r1
 800b3b6:	42a3      	cmp	r3, r4
 800b3b8:	6011      	str	r1, [r2, #0]
 800b3ba:	d1e0      	bne.n	800b37e <_free_r+0x26>
 800b3bc:	681c      	ldr	r4, [r3, #0]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	6053      	str	r3, [r2, #4]
 800b3c2:	4421      	add	r1, r4
 800b3c4:	6011      	str	r1, [r2, #0]
 800b3c6:	e7da      	b.n	800b37e <_free_r+0x26>
 800b3c8:	d902      	bls.n	800b3d0 <_free_r+0x78>
 800b3ca:	230c      	movs	r3, #12
 800b3cc:	6003      	str	r3, [r0, #0]
 800b3ce:	e7d6      	b.n	800b37e <_free_r+0x26>
 800b3d0:	6825      	ldr	r5, [r4, #0]
 800b3d2:	1961      	adds	r1, r4, r5
 800b3d4:	428b      	cmp	r3, r1
 800b3d6:	bf04      	itt	eq
 800b3d8:	6819      	ldreq	r1, [r3, #0]
 800b3da:	685b      	ldreq	r3, [r3, #4]
 800b3dc:	6063      	str	r3, [r4, #4]
 800b3de:	bf04      	itt	eq
 800b3e0:	1949      	addeq	r1, r1, r5
 800b3e2:	6021      	streq	r1, [r4, #0]
 800b3e4:	6054      	str	r4, [r2, #4]
 800b3e6:	e7ca      	b.n	800b37e <_free_r+0x26>
 800b3e8:	b003      	add	sp, #12
 800b3ea:	bd30      	pop	{r4, r5, pc}
 800b3ec:	2000193c 	.word	0x2000193c

0800b3f0 <sbrk_aligned>:
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	4e0e      	ldr	r6, [pc, #56]	; (800b42c <sbrk_aligned+0x3c>)
 800b3f4:	460c      	mov	r4, r1
 800b3f6:	6831      	ldr	r1, [r6, #0]
 800b3f8:	4605      	mov	r5, r0
 800b3fa:	b911      	cbnz	r1, 800b402 <sbrk_aligned+0x12>
 800b3fc:	f000 f88c 	bl	800b518 <_sbrk_r>
 800b400:	6030      	str	r0, [r6, #0]
 800b402:	4621      	mov	r1, r4
 800b404:	4628      	mov	r0, r5
 800b406:	f000 f887 	bl	800b518 <_sbrk_r>
 800b40a:	1c43      	adds	r3, r0, #1
 800b40c:	d00a      	beq.n	800b424 <sbrk_aligned+0x34>
 800b40e:	1cc4      	adds	r4, r0, #3
 800b410:	f024 0403 	bic.w	r4, r4, #3
 800b414:	42a0      	cmp	r0, r4
 800b416:	d007      	beq.n	800b428 <sbrk_aligned+0x38>
 800b418:	1a21      	subs	r1, r4, r0
 800b41a:	4628      	mov	r0, r5
 800b41c:	f000 f87c 	bl	800b518 <_sbrk_r>
 800b420:	3001      	adds	r0, #1
 800b422:	d101      	bne.n	800b428 <sbrk_aligned+0x38>
 800b424:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b428:	4620      	mov	r0, r4
 800b42a:	bd70      	pop	{r4, r5, r6, pc}
 800b42c:	20001940 	.word	0x20001940

0800b430 <_malloc_r>:
 800b430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b434:	1ccd      	adds	r5, r1, #3
 800b436:	f025 0503 	bic.w	r5, r5, #3
 800b43a:	3508      	adds	r5, #8
 800b43c:	2d0c      	cmp	r5, #12
 800b43e:	bf38      	it	cc
 800b440:	250c      	movcc	r5, #12
 800b442:	2d00      	cmp	r5, #0
 800b444:	4607      	mov	r7, r0
 800b446:	db01      	blt.n	800b44c <_malloc_r+0x1c>
 800b448:	42a9      	cmp	r1, r5
 800b44a:	d905      	bls.n	800b458 <_malloc_r+0x28>
 800b44c:	230c      	movs	r3, #12
 800b44e:	603b      	str	r3, [r7, #0]
 800b450:	2600      	movs	r6, #0
 800b452:	4630      	mov	r0, r6
 800b454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b458:	4e2e      	ldr	r6, [pc, #184]	; (800b514 <_malloc_r+0xe4>)
 800b45a:	f000 f88d 	bl	800b578 <__malloc_lock>
 800b45e:	6833      	ldr	r3, [r6, #0]
 800b460:	461c      	mov	r4, r3
 800b462:	bb34      	cbnz	r4, 800b4b2 <_malloc_r+0x82>
 800b464:	4629      	mov	r1, r5
 800b466:	4638      	mov	r0, r7
 800b468:	f7ff ffc2 	bl	800b3f0 <sbrk_aligned>
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	4604      	mov	r4, r0
 800b470:	d14d      	bne.n	800b50e <_malloc_r+0xde>
 800b472:	6834      	ldr	r4, [r6, #0]
 800b474:	4626      	mov	r6, r4
 800b476:	2e00      	cmp	r6, #0
 800b478:	d140      	bne.n	800b4fc <_malloc_r+0xcc>
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	4631      	mov	r1, r6
 800b47e:	4638      	mov	r0, r7
 800b480:	eb04 0803 	add.w	r8, r4, r3
 800b484:	f000 f848 	bl	800b518 <_sbrk_r>
 800b488:	4580      	cmp	r8, r0
 800b48a:	d13a      	bne.n	800b502 <_malloc_r+0xd2>
 800b48c:	6821      	ldr	r1, [r4, #0]
 800b48e:	3503      	adds	r5, #3
 800b490:	1a6d      	subs	r5, r5, r1
 800b492:	f025 0503 	bic.w	r5, r5, #3
 800b496:	3508      	adds	r5, #8
 800b498:	2d0c      	cmp	r5, #12
 800b49a:	bf38      	it	cc
 800b49c:	250c      	movcc	r5, #12
 800b49e:	4629      	mov	r1, r5
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	f7ff ffa5 	bl	800b3f0 <sbrk_aligned>
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	d02b      	beq.n	800b502 <_malloc_r+0xd2>
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	442b      	add	r3, r5
 800b4ae:	6023      	str	r3, [r4, #0]
 800b4b0:	e00e      	b.n	800b4d0 <_malloc_r+0xa0>
 800b4b2:	6822      	ldr	r2, [r4, #0]
 800b4b4:	1b52      	subs	r2, r2, r5
 800b4b6:	d41e      	bmi.n	800b4f6 <_malloc_r+0xc6>
 800b4b8:	2a0b      	cmp	r2, #11
 800b4ba:	d916      	bls.n	800b4ea <_malloc_r+0xba>
 800b4bc:	1961      	adds	r1, r4, r5
 800b4be:	42a3      	cmp	r3, r4
 800b4c0:	6025      	str	r5, [r4, #0]
 800b4c2:	bf18      	it	ne
 800b4c4:	6059      	strne	r1, [r3, #4]
 800b4c6:	6863      	ldr	r3, [r4, #4]
 800b4c8:	bf08      	it	eq
 800b4ca:	6031      	streq	r1, [r6, #0]
 800b4cc:	5162      	str	r2, [r4, r5]
 800b4ce:	604b      	str	r3, [r1, #4]
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	f104 060b 	add.w	r6, r4, #11
 800b4d6:	f000 f855 	bl	800b584 <__malloc_unlock>
 800b4da:	f026 0607 	bic.w	r6, r6, #7
 800b4de:	1d23      	adds	r3, r4, #4
 800b4e0:	1af2      	subs	r2, r6, r3
 800b4e2:	d0b6      	beq.n	800b452 <_malloc_r+0x22>
 800b4e4:	1b9b      	subs	r3, r3, r6
 800b4e6:	50a3      	str	r3, [r4, r2]
 800b4e8:	e7b3      	b.n	800b452 <_malloc_r+0x22>
 800b4ea:	6862      	ldr	r2, [r4, #4]
 800b4ec:	42a3      	cmp	r3, r4
 800b4ee:	bf0c      	ite	eq
 800b4f0:	6032      	streq	r2, [r6, #0]
 800b4f2:	605a      	strne	r2, [r3, #4]
 800b4f4:	e7ec      	b.n	800b4d0 <_malloc_r+0xa0>
 800b4f6:	4623      	mov	r3, r4
 800b4f8:	6864      	ldr	r4, [r4, #4]
 800b4fa:	e7b2      	b.n	800b462 <_malloc_r+0x32>
 800b4fc:	4634      	mov	r4, r6
 800b4fe:	6876      	ldr	r6, [r6, #4]
 800b500:	e7b9      	b.n	800b476 <_malloc_r+0x46>
 800b502:	230c      	movs	r3, #12
 800b504:	603b      	str	r3, [r7, #0]
 800b506:	4638      	mov	r0, r7
 800b508:	f000 f83c 	bl	800b584 <__malloc_unlock>
 800b50c:	e7a1      	b.n	800b452 <_malloc_r+0x22>
 800b50e:	6025      	str	r5, [r4, #0]
 800b510:	e7de      	b.n	800b4d0 <_malloc_r+0xa0>
 800b512:	bf00      	nop
 800b514:	2000193c 	.word	0x2000193c

0800b518 <_sbrk_r>:
 800b518:	b538      	push	{r3, r4, r5, lr}
 800b51a:	4d06      	ldr	r5, [pc, #24]	; (800b534 <_sbrk_r+0x1c>)
 800b51c:	2300      	movs	r3, #0
 800b51e:	4604      	mov	r4, r0
 800b520:	4608      	mov	r0, r1
 800b522:	602b      	str	r3, [r5, #0]
 800b524:	f7f6 fe1c 	bl	8002160 <_sbrk>
 800b528:	1c43      	adds	r3, r0, #1
 800b52a:	d102      	bne.n	800b532 <_sbrk_r+0x1a>
 800b52c:	682b      	ldr	r3, [r5, #0]
 800b52e:	b103      	cbz	r3, 800b532 <_sbrk_r+0x1a>
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	bd38      	pop	{r3, r4, r5, pc}
 800b534:	20001944 	.word	0x20001944

0800b538 <siprintf>:
 800b538:	b40e      	push	{r1, r2, r3}
 800b53a:	b500      	push	{lr}
 800b53c:	b09c      	sub	sp, #112	; 0x70
 800b53e:	ab1d      	add	r3, sp, #116	; 0x74
 800b540:	9002      	str	r0, [sp, #8]
 800b542:	9006      	str	r0, [sp, #24]
 800b544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b548:	4809      	ldr	r0, [pc, #36]	; (800b570 <siprintf+0x38>)
 800b54a:	9107      	str	r1, [sp, #28]
 800b54c:	9104      	str	r1, [sp, #16]
 800b54e:	4909      	ldr	r1, [pc, #36]	; (800b574 <siprintf+0x3c>)
 800b550:	f853 2b04 	ldr.w	r2, [r3], #4
 800b554:	9105      	str	r1, [sp, #20]
 800b556:	6800      	ldr	r0, [r0, #0]
 800b558:	9301      	str	r3, [sp, #4]
 800b55a:	a902      	add	r1, sp, #8
 800b55c:	f000 f874 	bl	800b648 <_svfiprintf_r>
 800b560:	9b02      	ldr	r3, [sp, #8]
 800b562:	2200      	movs	r2, #0
 800b564:	701a      	strb	r2, [r3, #0]
 800b566:	b01c      	add	sp, #112	; 0x70
 800b568:	f85d eb04 	ldr.w	lr, [sp], #4
 800b56c:	b003      	add	sp, #12
 800b56e:	4770      	bx	lr
 800b570:	20000110 	.word	0x20000110
 800b574:	ffff0208 	.word	0xffff0208

0800b578 <__malloc_lock>:
 800b578:	4801      	ldr	r0, [pc, #4]	; (800b580 <__malloc_lock+0x8>)
 800b57a:	f000 baf9 	b.w	800bb70 <__retarget_lock_acquire_recursive>
 800b57e:	bf00      	nop
 800b580:	20001948 	.word	0x20001948

0800b584 <__malloc_unlock>:
 800b584:	4801      	ldr	r0, [pc, #4]	; (800b58c <__malloc_unlock+0x8>)
 800b586:	f000 baf4 	b.w	800bb72 <__retarget_lock_release_recursive>
 800b58a:	bf00      	nop
 800b58c:	20001948 	.word	0x20001948

0800b590 <__ssputs_r>:
 800b590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b594:	688e      	ldr	r6, [r1, #8]
 800b596:	429e      	cmp	r6, r3
 800b598:	4682      	mov	sl, r0
 800b59a:	460c      	mov	r4, r1
 800b59c:	4690      	mov	r8, r2
 800b59e:	461f      	mov	r7, r3
 800b5a0:	d838      	bhi.n	800b614 <__ssputs_r+0x84>
 800b5a2:	898a      	ldrh	r2, [r1, #12]
 800b5a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5a8:	d032      	beq.n	800b610 <__ssputs_r+0x80>
 800b5aa:	6825      	ldr	r5, [r4, #0]
 800b5ac:	6909      	ldr	r1, [r1, #16]
 800b5ae:	eba5 0901 	sub.w	r9, r5, r1
 800b5b2:	6965      	ldr	r5, [r4, #20]
 800b5b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5bc:	3301      	adds	r3, #1
 800b5be:	444b      	add	r3, r9
 800b5c0:	106d      	asrs	r5, r5, #1
 800b5c2:	429d      	cmp	r5, r3
 800b5c4:	bf38      	it	cc
 800b5c6:	461d      	movcc	r5, r3
 800b5c8:	0553      	lsls	r3, r2, #21
 800b5ca:	d531      	bpl.n	800b630 <__ssputs_r+0xa0>
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	f7ff ff2f 	bl	800b430 <_malloc_r>
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	b950      	cbnz	r0, 800b5ec <__ssputs_r+0x5c>
 800b5d6:	230c      	movs	r3, #12
 800b5d8:	f8ca 3000 	str.w	r3, [sl]
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e2:	81a3      	strh	r3, [r4, #12]
 800b5e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ec:	6921      	ldr	r1, [r4, #16]
 800b5ee:	464a      	mov	r2, r9
 800b5f0:	f7ff fe9c 	bl	800b32c <memcpy>
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5fe:	81a3      	strh	r3, [r4, #12]
 800b600:	6126      	str	r6, [r4, #16]
 800b602:	6165      	str	r5, [r4, #20]
 800b604:	444e      	add	r6, r9
 800b606:	eba5 0509 	sub.w	r5, r5, r9
 800b60a:	6026      	str	r6, [r4, #0]
 800b60c:	60a5      	str	r5, [r4, #8]
 800b60e:	463e      	mov	r6, r7
 800b610:	42be      	cmp	r6, r7
 800b612:	d900      	bls.n	800b616 <__ssputs_r+0x86>
 800b614:	463e      	mov	r6, r7
 800b616:	6820      	ldr	r0, [r4, #0]
 800b618:	4632      	mov	r2, r6
 800b61a:	4641      	mov	r1, r8
 800b61c:	f000 faaa 	bl	800bb74 <memmove>
 800b620:	68a3      	ldr	r3, [r4, #8]
 800b622:	1b9b      	subs	r3, r3, r6
 800b624:	60a3      	str	r3, [r4, #8]
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	4433      	add	r3, r6
 800b62a:	6023      	str	r3, [r4, #0]
 800b62c:	2000      	movs	r0, #0
 800b62e:	e7db      	b.n	800b5e8 <__ssputs_r+0x58>
 800b630:	462a      	mov	r2, r5
 800b632:	f000 fab9 	bl	800bba8 <_realloc_r>
 800b636:	4606      	mov	r6, r0
 800b638:	2800      	cmp	r0, #0
 800b63a:	d1e1      	bne.n	800b600 <__ssputs_r+0x70>
 800b63c:	6921      	ldr	r1, [r4, #16]
 800b63e:	4650      	mov	r0, sl
 800b640:	f7ff fe8a 	bl	800b358 <_free_r>
 800b644:	e7c7      	b.n	800b5d6 <__ssputs_r+0x46>
	...

0800b648 <_svfiprintf_r>:
 800b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	4698      	mov	r8, r3
 800b64e:	898b      	ldrh	r3, [r1, #12]
 800b650:	061b      	lsls	r3, r3, #24
 800b652:	b09d      	sub	sp, #116	; 0x74
 800b654:	4607      	mov	r7, r0
 800b656:	460d      	mov	r5, r1
 800b658:	4614      	mov	r4, r2
 800b65a:	d50e      	bpl.n	800b67a <_svfiprintf_r+0x32>
 800b65c:	690b      	ldr	r3, [r1, #16]
 800b65e:	b963      	cbnz	r3, 800b67a <_svfiprintf_r+0x32>
 800b660:	2140      	movs	r1, #64	; 0x40
 800b662:	f7ff fee5 	bl	800b430 <_malloc_r>
 800b666:	6028      	str	r0, [r5, #0]
 800b668:	6128      	str	r0, [r5, #16]
 800b66a:	b920      	cbnz	r0, 800b676 <_svfiprintf_r+0x2e>
 800b66c:	230c      	movs	r3, #12
 800b66e:	603b      	str	r3, [r7, #0]
 800b670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b674:	e0d1      	b.n	800b81a <_svfiprintf_r+0x1d2>
 800b676:	2340      	movs	r3, #64	; 0x40
 800b678:	616b      	str	r3, [r5, #20]
 800b67a:	2300      	movs	r3, #0
 800b67c:	9309      	str	r3, [sp, #36]	; 0x24
 800b67e:	2320      	movs	r3, #32
 800b680:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b684:	f8cd 800c 	str.w	r8, [sp, #12]
 800b688:	2330      	movs	r3, #48	; 0x30
 800b68a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b834 <_svfiprintf_r+0x1ec>
 800b68e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b692:	f04f 0901 	mov.w	r9, #1
 800b696:	4623      	mov	r3, r4
 800b698:	469a      	mov	sl, r3
 800b69a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b69e:	b10a      	cbz	r2, 800b6a4 <_svfiprintf_r+0x5c>
 800b6a0:	2a25      	cmp	r2, #37	; 0x25
 800b6a2:	d1f9      	bne.n	800b698 <_svfiprintf_r+0x50>
 800b6a4:	ebba 0b04 	subs.w	fp, sl, r4
 800b6a8:	d00b      	beq.n	800b6c2 <_svfiprintf_r+0x7a>
 800b6aa:	465b      	mov	r3, fp
 800b6ac:	4622      	mov	r2, r4
 800b6ae:	4629      	mov	r1, r5
 800b6b0:	4638      	mov	r0, r7
 800b6b2:	f7ff ff6d 	bl	800b590 <__ssputs_r>
 800b6b6:	3001      	adds	r0, #1
 800b6b8:	f000 80aa 	beq.w	800b810 <_svfiprintf_r+0x1c8>
 800b6bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6be:	445a      	add	r2, fp
 800b6c0:	9209      	str	r2, [sp, #36]	; 0x24
 800b6c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f000 80a2 	beq.w	800b810 <_svfiprintf_r+0x1c8>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6d6:	f10a 0a01 	add.w	sl, sl, #1
 800b6da:	9304      	str	r3, [sp, #16]
 800b6dc:	9307      	str	r3, [sp, #28]
 800b6de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6e2:	931a      	str	r3, [sp, #104]	; 0x68
 800b6e4:	4654      	mov	r4, sl
 800b6e6:	2205      	movs	r2, #5
 800b6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ec:	4851      	ldr	r0, [pc, #324]	; (800b834 <_svfiprintf_r+0x1ec>)
 800b6ee:	f7f4 fd77 	bl	80001e0 <memchr>
 800b6f2:	9a04      	ldr	r2, [sp, #16]
 800b6f4:	b9d8      	cbnz	r0, 800b72e <_svfiprintf_r+0xe6>
 800b6f6:	06d0      	lsls	r0, r2, #27
 800b6f8:	bf44      	itt	mi
 800b6fa:	2320      	movmi	r3, #32
 800b6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b700:	0711      	lsls	r1, r2, #28
 800b702:	bf44      	itt	mi
 800b704:	232b      	movmi	r3, #43	; 0x2b
 800b706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b70a:	f89a 3000 	ldrb.w	r3, [sl]
 800b70e:	2b2a      	cmp	r3, #42	; 0x2a
 800b710:	d015      	beq.n	800b73e <_svfiprintf_r+0xf6>
 800b712:	9a07      	ldr	r2, [sp, #28]
 800b714:	4654      	mov	r4, sl
 800b716:	2000      	movs	r0, #0
 800b718:	f04f 0c0a 	mov.w	ip, #10
 800b71c:	4621      	mov	r1, r4
 800b71e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b722:	3b30      	subs	r3, #48	; 0x30
 800b724:	2b09      	cmp	r3, #9
 800b726:	d94e      	bls.n	800b7c6 <_svfiprintf_r+0x17e>
 800b728:	b1b0      	cbz	r0, 800b758 <_svfiprintf_r+0x110>
 800b72a:	9207      	str	r2, [sp, #28]
 800b72c:	e014      	b.n	800b758 <_svfiprintf_r+0x110>
 800b72e:	eba0 0308 	sub.w	r3, r0, r8
 800b732:	fa09 f303 	lsl.w	r3, r9, r3
 800b736:	4313      	orrs	r3, r2
 800b738:	9304      	str	r3, [sp, #16]
 800b73a:	46a2      	mov	sl, r4
 800b73c:	e7d2      	b.n	800b6e4 <_svfiprintf_r+0x9c>
 800b73e:	9b03      	ldr	r3, [sp, #12]
 800b740:	1d19      	adds	r1, r3, #4
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	9103      	str	r1, [sp, #12]
 800b746:	2b00      	cmp	r3, #0
 800b748:	bfbb      	ittet	lt
 800b74a:	425b      	neglt	r3, r3
 800b74c:	f042 0202 	orrlt.w	r2, r2, #2
 800b750:	9307      	strge	r3, [sp, #28]
 800b752:	9307      	strlt	r3, [sp, #28]
 800b754:	bfb8      	it	lt
 800b756:	9204      	strlt	r2, [sp, #16]
 800b758:	7823      	ldrb	r3, [r4, #0]
 800b75a:	2b2e      	cmp	r3, #46	; 0x2e
 800b75c:	d10c      	bne.n	800b778 <_svfiprintf_r+0x130>
 800b75e:	7863      	ldrb	r3, [r4, #1]
 800b760:	2b2a      	cmp	r3, #42	; 0x2a
 800b762:	d135      	bne.n	800b7d0 <_svfiprintf_r+0x188>
 800b764:	9b03      	ldr	r3, [sp, #12]
 800b766:	1d1a      	adds	r2, r3, #4
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	9203      	str	r2, [sp, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	bfb8      	it	lt
 800b770:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b774:	3402      	adds	r4, #2
 800b776:	9305      	str	r3, [sp, #20]
 800b778:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b844 <_svfiprintf_r+0x1fc>
 800b77c:	7821      	ldrb	r1, [r4, #0]
 800b77e:	2203      	movs	r2, #3
 800b780:	4650      	mov	r0, sl
 800b782:	f7f4 fd2d 	bl	80001e0 <memchr>
 800b786:	b140      	cbz	r0, 800b79a <_svfiprintf_r+0x152>
 800b788:	2340      	movs	r3, #64	; 0x40
 800b78a:	eba0 000a 	sub.w	r0, r0, sl
 800b78e:	fa03 f000 	lsl.w	r0, r3, r0
 800b792:	9b04      	ldr	r3, [sp, #16]
 800b794:	4303      	orrs	r3, r0
 800b796:	3401      	adds	r4, #1
 800b798:	9304      	str	r3, [sp, #16]
 800b79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79e:	4826      	ldr	r0, [pc, #152]	; (800b838 <_svfiprintf_r+0x1f0>)
 800b7a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7a4:	2206      	movs	r2, #6
 800b7a6:	f7f4 fd1b 	bl	80001e0 <memchr>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d038      	beq.n	800b820 <_svfiprintf_r+0x1d8>
 800b7ae:	4b23      	ldr	r3, [pc, #140]	; (800b83c <_svfiprintf_r+0x1f4>)
 800b7b0:	bb1b      	cbnz	r3, 800b7fa <_svfiprintf_r+0x1b2>
 800b7b2:	9b03      	ldr	r3, [sp, #12]
 800b7b4:	3307      	adds	r3, #7
 800b7b6:	f023 0307 	bic.w	r3, r3, #7
 800b7ba:	3308      	adds	r3, #8
 800b7bc:	9303      	str	r3, [sp, #12]
 800b7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c0:	4433      	add	r3, r6
 800b7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c4:	e767      	b.n	800b696 <_svfiprintf_r+0x4e>
 800b7c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	2001      	movs	r0, #1
 800b7ce:	e7a5      	b.n	800b71c <_svfiprintf_r+0xd4>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	3401      	adds	r4, #1
 800b7d4:	9305      	str	r3, [sp, #20]
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	f04f 0c0a 	mov.w	ip, #10
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7e2:	3a30      	subs	r2, #48	; 0x30
 800b7e4:	2a09      	cmp	r2, #9
 800b7e6:	d903      	bls.n	800b7f0 <_svfiprintf_r+0x1a8>
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d0c5      	beq.n	800b778 <_svfiprintf_r+0x130>
 800b7ec:	9105      	str	r1, [sp, #20]
 800b7ee:	e7c3      	b.n	800b778 <_svfiprintf_r+0x130>
 800b7f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e7f0      	b.n	800b7dc <_svfiprintf_r+0x194>
 800b7fa:	ab03      	add	r3, sp, #12
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	462a      	mov	r2, r5
 800b800:	4b0f      	ldr	r3, [pc, #60]	; (800b840 <_svfiprintf_r+0x1f8>)
 800b802:	a904      	add	r1, sp, #16
 800b804:	4638      	mov	r0, r7
 800b806:	f3af 8000 	nop.w
 800b80a:	1c42      	adds	r2, r0, #1
 800b80c:	4606      	mov	r6, r0
 800b80e:	d1d6      	bne.n	800b7be <_svfiprintf_r+0x176>
 800b810:	89ab      	ldrh	r3, [r5, #12]
 800b812:	065b      	lsls	r3, r3, #25
 800b814:	f53f af2c 	bmi.w	800b670 <_svfiprintf_r+0x28>
 800b818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b81a:	b01d      	add	sp, #116	; 0x74
 800b81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b820:	ab03      	add	r3, sp, #12
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	462a      	mov	r2, r5
 800b826:	4b06      	ldr	r3, [pc, #24]	; (800b840 <_svfiprintf_r+0x1f8>)
 800b828:	a904      	add	r1, sp, #16
 800b82a:	4638      	mov	r0, r7
 800b82c:	f000 f87a 	bl	800b924 <_printf_i>
 800b830:	e7eb      	b.n	800b80a <_svfiprintf_r+0x1c2>
 800b832:	bf00      	nop
 800b834:	0800cafc 	.word	0x0800cafc
 800b838:	0800cb06 	.word	0x0800cb06
 800b83c:	00000000 	.word	0x00000000
 800b840:	0800b591 	.word	0x0800b591
 800b844:	0800cb02 	.word	0x0800cb02

0800b848 <_printf_common>:
 800b848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b84c:	4616      	mov	r6, r2
 800b84e:	4699      	mov	r9, r3
 800b850:	688a      	ldr	r2, [r1, #8]
 800b852:	690b      	ldr	r3, [r1, #16]
 800b854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b858:	4293      	cmp	r3, r2
 800b85a:	bfb8      	it	lt
 800b85c:	4613      	movlt	r3, r2
 800b85e:	6033      	str	r3, [r6, #0]
 800b860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b864:	4607      	mov	r7, r0
 800b866:	460c      	mov	r4, r1
 800b868:	b10a      	cbz	r2, 800b86e <_printf_common+0x26>
 800b86a:	3301      	adds	r3, #1
 800b86c:	6033      	str	r3, [r6, #0]
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	0699      	lsls	r1, r3, #26
 800b872:	bf42      	ittt	mi
 800b874:	6833      	ldrmi	r3, [r6, #0]
 800b876:	3302      	addmi	r3, #2
 800b878:	6033      	strmi	r3, [r6, #0]
 800b87a:	6825      	ldr	r5, [r4, #0]
 800b87c:	f015 0506 	ands.w	r5, r5, #6
 800b880:	d106      	bne.n	800b890 <_printf_common+0x48>
 800b882:	f104 0a19 	add.w	sl, r4, #25
 800b886:	68e3      	ldr	r3, [r4, #12]
 800b888:	6832      	ldr	r2, [r6, #0]
 800b88a:	1a9b      	subs	r3, r3, r2
 800b88c:	42ab      	cmp	r3, r5
 800b88e:	dc26      	bgt.n	800b8de <_printf_common+0x96>
 800b890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b894:	1e13      	subs	r3, r2, #0
 800b896:	6822      	ldr	r2, [r4, #0]
 800b898:	bf18      	it	ne
 800b89a:	2301      	movne	r3, #1
 800b89c:	0692      	lsls	r2, r2, #26
 800b89e:	d42b      	bmi.n	800b8f8 <_printf_common+0xb0>
 800b8a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8a4:	4649      	mov	r1, r9
 800b8a6:	4638      	mov	r0, r7
 800b8a8:	47c0      	blx	r8
 800b8aa:	3001      	adds	r0, #1
 800b8ac:	d01e      	beq.n	800b8ec <_printf_common+0xa4>
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	68e5      	ldr	r5, [r4, #12]
 800b8b2:	6832      	ldr	r2, [r6, #0]
 800b8b4:	f003 0306 	and.w	r3, r3, #6
 800b8b8:	2b04      	cmp	r3, #4
 800b8ba:	bf08      	it	eq
 800b8bc:	1aad      	subeq	r5, r5, r2
 800b8be:	68a3      	ldr	r3, [r4, #8]
 800b8c0:	6922      	ldr	r2, [r4, #16]
 800b8c2:	bf0c      	ite	eq
 800b8c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8c8:	2500      	movne	r5, #0
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	bfc4      	itt	gt
 800b8ce:	1a9b      	subgt	r3, r3, r2
 800b8d0:	18ed      	addgt	r5, r5, r3
 800b8d2:	2600      	movs	r6, #0
 800b8d4:	341a      	adds	r4, #26
 800b8d6:	42b5      	cmp	r5, r6
 800b8d8:	d11a      	bne.n	800b910 <_printf_common+0xc8>
 800b8da:	2000      	movs	r0, #0
 800b8dc:	e008      	b.n	800b8f0 <_printf_common+0xa8>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	4652      	mov	r2, sl
 800b8e2:	4649      	mov	r1, r9
 800b8e4:	4638      	mov	r0, r7
 800b8e6:	47c0      	blx	r8
 800b8e8:	3001      	adds	r0, #1
 800b8ea:	d103      	bne.n	800b8f4 <_printf_common+0xac>
 800b8ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f4:	3501      	adds	r5, #1
 800b8f6:	e7c6      	b.n	800b886 <_printf_common+0x3e>
 800b8f8:	18e1      	adds	r1, r4, r3
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	2030      	movs	r0, #48	; 0x30
 800b8fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b902:	4422      	add	r2, r4
 800b904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b90c:	3302      	adds	r3, #2
 800b90e:	e7c7      	b.n	800b8a0 <_printf_common+0x58>
 800b910:	2301      	movs	r3, #1
 800b912:	4622      	mov	r2, r4
 800b914:	4649      	mov	r1, r9
 800b916:	4638      	mov	r0, r7
 800b918:	47c0      	blx	r8
 800b91a:	3001      	adds	r0, #1
 800b91c:	d0e6      	beq.n	800b8ec <_printf_common+0xa4>
 800b91e:	3601      	adds	r6, #1
 800b920:	e7d9      	b.n	800b8d6 <_printf_common+0x8e>
	...

0800b924 <_printf_i>:
 800b924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b928:	7e0f      	ldrb	r7, [r1, #24]
 800b92a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b92c:	2f78      	cmp	r7, #120	; 0x78
 800b92e:	4691      	mov	r9, r2
 800b930:	4680      	mov	r8, r0
 800b932:	460c      	mov	r4, r1
 800b934:	469a      	mov	sl, r3
 800b936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b93a:	d807      	bhi.n	800b94c <_printf_i+0x28>
 800b93c:	2f62      	cmp	r7, #98	; 0x62
 800b93e:	d80a      	bhi.n	800b956 <_printf_i+0x32>
 800b940:	2f00      	cmp	r7, #0
 800b942:	f000 80d8 	beq.w	800baf6 <_printf_i+0x1d2>
 800b946:	2f58      	cmp	r7, #88	; 0x58
 800b948:	f000 80a3 	beq.w	800ba92 <_printf_i+0x16e>
 800b94c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b954:	e03a      	b.n	800b9cc <_printf_i+0xa8>
 800b956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b95a:	2b15      	cmp	r3, #21
 800b95c:	d8f6      	bhi.n	800b94c <_printf_i+0x28>
 800b95e:	a101      	add	r1, pc, #4	; (adr r1, 800b964 <_printf_i+0x40>)
 800b960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b964:	0800b9bd 	.word	0x0800b9bd
 800b968:	0800b9d1 	.word	0x0800b9d1
 800b96c:	0800b94d 	.word	0x0800b94d
 800b970:	0800b94d 	.word	0x0800b94d
 800b974:	0800b94d 	.word	0x0800b94d
 800b978:	0800b94d 	.word	0x0800b94d
 800b97c:	0800b9d1 	.word	0x0800b9d1
 800b980:	0800b94d 	.word	0x0800b94d
 800b984:	0800b94d 	.word	0x0800b94d
 800b988:	0800b94d 	.word	0x0800b94d
 800b98c:	0800b94d 	.word	0x0800b94d
 800b990:	0800badd 	.word	0x0800badd
 800b994:	0800ba01 	.word	0x0800ba01
 800b998:	0800babf 	.word	0x0800babf
 800b99c:	0800b94d 	.word	0x0800b94d
 800b9a0:	0800b94d 	.word	0x0800b94d
 800b9a4:	0800baff 	.word	0x0800baff
 800b9a8:	0800b94d 	.word	0x0800b94d
 800b9ac:	0800ba01 	.word	0x0800ba01
 800b9b0:	0800b94d 	.word	0x0800b94d
 800b9b4:	0800b94d 	.word	0x0800b94d
 800b9b8:	0800bac7 	.word	0x0800bac7
 800b9bc:	682b      	ldr	r3, [r5, #0]
 800b9be:	1d1a      	adds	r2, r3, #4
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	602a      	str	r2, [r5, #0]
 800b9c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e0a3      	b.n	800bb18 <_printf_i+0x1f4>
 800b9d0:	6820      	ldr	r0, [r4, #0]
 800b9d2:	6829      	ldr	r1, [r5, #0]
 800b9d4:	0606      	lsls	r6, r0, #24
 800b9d6:	f101 0304 	add.w	r3, r1, #4
 800b9da:	d50a      	bpl.n	800b9f2 <_printf_i+0xce>
 800b9dc:	680e      	ldr	r6, [r1, #0]
 800b9de:	602b      	str	r3, [r5, #0]
 800b9e0:	2e00      	cmp	r6, #0
 800b9e2:	da03      	bge.n	800b9ec <_printf_i+0xc8>
 800b9e4:	232d      	movs	r3, #45	; 0x2d
 800b9e6:	4276      	negs	r6, r6
 800b9e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9ec:	485e      	ldr	r0, [pc, #376]	; (800bb68 <_printf_i+0x244>)
 800b9ee:	230a      	movs	r3, #10
 800b9f0:	e019      	b.n	800ba26 <_printf_i+0x102>
 800b9f2:	680e      	ldr	r6, [r1, #0]
 800b9f4:	602b      	str	r3, [r5, #0]
 800b9f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b9fa:	bf18      	it	ne
 800b9fc:	b236      	sxthne	r6, r6
 800b9fe:	e7ef      	b.n	800b9e0 <_printf_i+0xbc>
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	6820      	ldr	r0, [r4, #0]
 800ba04:	1d19      	adds	r1, r3, #4
 800ba06:	6029      	str	r1, [r5, #0]
 800ba08:	0601      	lsls	r1, r0, #24
 800ba0a:	d501      	bpl.n	800ba10 <_printf_i+0xec>
 800ba0c:	681e      	ldr	r6, [r3, #0]
 800ba0e:	e002      	b.n	800ba16 <_printf_i+0xf2>
 800ba10:	0646      	lsls	r6, r0, #25
 800ba12:	d5fb      	bpl.n	800ba0c <_printf_i+0xe8>
 800ba14:	881e      	ldrh	r6, [r3, #0]
 800ba16:	4854      	ldr	r0, [pc, #336]	; (800bb68 <_printf_i+0x244>)
 800ba18:	2f6f      	cmp	r7, #111	; 0x6f
 800ba1a:	bf0c      	ite	eq
 800ba1c:	2308      	moveq	r3, #8
 800ba1e:	230a      	movne	r3, #10
 800ba20:	2100      	movs	r1, #0
 800ba22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba26:	6865      	ldr	r5, [r4, #4]
 800ba28:	60a5      	str	r5, [r4, #8]
 800ba2a:	2d00      	cmp	r5, #0
 800ba2c:	bfa2      	ittt	ge
 800ba2e:	6821      	ldrge	r1, [r4, #0]
 800ba30:	f021 0104 	bicge.w	r1, r1, #4
 800ba34:	6021      	strge	r1, [r4, #0]
 800ba36:	b90e      	cbnz	r6, 800ba3c <_printf_i+0x118>
 800ba38:	2d00      	cmp	r5, #0
 800ba3a:	d04d      	beq.n	800bad8 <_printf_i+0x1b4>
 800ba3c:	4615      	mov	r5, r2
 800ba3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba42:	fb03 6711 	mls	r7, r3, r1, r6
 800ba46:	5dc7      	ldrb	r7, [r0, r7]
 800ba48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba4c:	4637      	mov	r7, r6
 800ba4e:	42bb      	cmp	r3, r7
 800ba50:	460e      	mov	r6, r1
 800ba52:	d9f4      	bls.n	800ba3e <_printf_i+0x11a>
 800ba54:	2b08      	cmp	r3, #8
 800ba56:	d10b      	bne.n	800ba70 <_printf_i+0x14c>
 800ba58:	6823      	ldr	r3, [r4, #0]
 800ba5a:	07de      	lsls	r6, r3, #31
 800ba5c:	d508      	bpl.n	800ba70 <_printf_i+0x14c>
 800ba5e:	6923      	ldr	r3, [r4, #16]
 800ba60:	6861      	ldr	r1, [r4, #4]
 800ba62:	4299      	cmp	r1, r3
 800ba64:	bfde      	ittt	le
 800ba66:	2330      	movle	r3, #48	; 0x30
 800ba68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ba70:	1b52      	subs	r2, r2, r5
 800ba72:	6122      	str	r2, [r4, #16]
 800ba74:	f8cd a000 	str.w	sl, [sp]
 800ba78:	464b      	mov	r3, r9
 800ba7a:	aa03      	add	r2, sp, #12
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	4640      	mov	r0, r8
 800ba80:	f7ff fee2 	bl	800b848 <_printf_common>
 800ba84:	3001      	adds	r0, #1
 800ba86:	d14c      	bne.n	800bb22 <_printf_i+0x1fe>
 800ba88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba8c:	b004      	add	sp, #16
 800ba8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba92:	4835      	ldr	r0, [pc, #212]	; (800bb68 <_printf_i+0x244>)
 800ba94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ba98:	6829      	ldr	r1, [r5, #0]
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	f851 6b04 	ldr.w	r6, [r1], #4
 800baa0:	6029      	str	r1, [r5, #0]
 800baa2:	061d      	lsls	r5, r3, #24
 800baa4:	d514      	bpl.n	800bad0 <_printf_i+0x1ac>
 800baa6:	07df      	lsls	r7, r3, #31
 800baa8:	bf44      	itt	mi
 800baaa:	f043 0320 	orrmi.w	r3, r3, #32
 800baae:	6023      	strmi	r3, [r4, #0]
 800bab0:	b91e      	cbnz	r6, 800baba <_printf_i+0x196>
 800bab2:	6823      	ldr	r3, [r4, #0]
 800bab4:	f023 0320 	bic.w	r3, r3, #32
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	2310      	movs	r3, #16
 800babc:	e7b0      	b.n	800ba20 <_printf_i+0xfc>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	f043 0320 	orr.w	r3, r3, #32
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	2378      	movs	r3, #120	; 0x78
 800bac8:	4828      	ldr	r0, [pc, #160]	; (800bb6c <_printf_i+0x248>)
 800baca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bace:	e7e3      	b.n	800ba98 <_printf_i+0x174>
 800bad0:	0659      	lsls	r1, r3, #25
 800bad2:	bf48      	it	mi
 800bad4:	b2b6      	uxthmi	r6, r6
 800bad6:	e7e6      	b.n	800baa6 <_printf_i+0x182>
 800bad8:	4615      	mov	r5, r2
 800bada:	e7bb      	b.n	800ba54 <_printf_i+0x130>
 800badc:	682b      	ldr	r3, [r5, #0]
 800bade:	6826      	ldr	r6, [r4, #0]
 800bae0:	6961      	ldr	r1, [r4, #20]
 800bae2:	1d18      	adds	r0, r3, #4
 800bae4:	6028      	str	r0, [r5, #0]
 800bae6:	0635      	lsls	r5, r6, #24
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	d501      	bpl.n	800baf0 <_printf_i+0x1cc>
 800baec:	6019      	str	r1, [r3, #0]
 800baee:	e002      	b.n	800baf6 <_printf_i+0x1d2>
 800baf0:	0670      	lsls	r0, r6, #25
 800baf2:	d5fb      	bpl.n	800baec <_printf_i+0x1c8>
 800baf4:	8019      	strh	r1, [r3, #0]
 800baf6:	2300      	movs	r3, #0
 800baf8:	6123      	str	r3, [r4, #16]
 800bafa:	4615      	mov	r5, r2
 800bafc:	e7ba      	b.n	800ba74 <_printf_i+0x150>
 800bafe:	682b      	ldr	r3, [r5, #0]
 800bb00:	1d1a      	adds	r2, r3, #4
 800bb02:	602a      	str	r2, [r5, #0]
 800bb04:	681d      	ldr	r5, [r3, #0]
 800bb06:	6862      	ldr	r2, [r4, #4]
 800bb08:	2100      	movs	r1, #0
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	f7f4 fb68 	bl	80001e0 <memchr>
 800bb10:	b108      	cbz	r0, 800bb16 <_printf_i+0x1f2>
 800bb12:	1b40      	subs	r0, r0, r5
 800bb14:	6060      	str	r0, [r4, #4]
 800bb16:	6863      	ldr	r3, [r4, #4]
 800bb18:	6123      	str	r3, [r4, #16]
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb20:	e7a8      	b.n	800ba74 <_printf_i+0x150>
 800bb22:	6923      	ldr	r3, [r4, #16]
 800bb24:	462a      	mov	r2, r5
 800bb26:	4649      	mov	r1, r9
 800bb28:	4640      	mov	r0, r8
 800bb2a:	47d0      	blx	sl
 800bb2c:	3001      	adds	r0, #1
 800bb2e:	d0ab      	beq.n	800ba88 <_printf_i+0x164>
 800bb30:	6823      	ldr	r3, [r4, #0]
 800bb32:	079b      	lsls	r3, r3, #30
 800bb34:	d413      	bmi.n	800bb5e <_printf_i+0x23a>
 800bb36:	68e0      	ldr	r0, [r4, #12]
 800bb38:	9b03      	ldr	r3, [sp, #12]
 800bb3a:	4298      	cmp	r0, r3
 800bb3c:	bfb8      	it	lt
 800bb3e:	4618      	movlt	r0, r3
 800bb40:	e7a4      	b.n	800ba8c <_printf_i+0x168>
 800bb42:	2301      	movs	r3, #1
 800bb44:	4632      	mov	r2, r6
 800bb46:	4649      	mov	r1, r9
 800bb48:	4640      	mov	r0, r8
 800bb4a:	47d0      	blx	sl
 800bb4c:	3001      	adds	r0, #1
 800bb4e:	d09b      	beq.n	800ba88 <_printf_i+0x164>
 800bb50:	3501      	adds	r5, #1
 800bb52:	68e3      	ldr	r3, [r4, #12]
 800bb54:	9903      	ldr	r1, [sp, #12]
 800bb56:	1a5b      	subs	r3, r3, r1
 800bb58:	42ab      	cmp	r3, r5
 800bb5a:	dcf2      	bgt.n	800bb42 <_printf_i+0x21e>
 800bb5c:	e7eb      	b.n	800bb36 <_printf_i+0x212>
 800bb5e:	2500      	movs	r5, #0
 800bb60:	f104 0619 	add.w	r6, r4, #25
 800bb64:	e7f5      	b.n	800bb52 <_printf_i+0x22e>
 800bb66:	bf00      	nop
 800bb68:	0800cb0d 	.word	0x0800cb0d
 800bb6c:	0800cb1e 	.word	0x0800cb1e

0800bb70 <__retarget_lock_acquire_recursive>:
 800bb70:	4770      	bx	lr

0800bb72 <__retarget_lock_release_recursive>:
 800bb72:	4770      	bx	lr

0800bb74 <memmove>:
 800bb74:	4288      	cmp	r0, r1
 800bb76:	b510      	push	{r4, lr}
 800bb78:	eb01 0402 	add.w	r4, r1, r2
 800bb7c:	d902      	bls.n	800bb84 <memmove+0x10>
 800bb7e:	4284      	cmp	r4, r0
 800bb80:	4623      	mov	r3, r4
 800bb82:	d807      	bhi.n	800bb94 <memmove+0x20>
 800bb84:	1e43      	subs	r3, r0, #1
 800bb86:	42a1      	cmp	r1, r4
 800bb88:	d008      	beq.n	800bb9c <memmove+0x28>
 800bb8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb92:	e7f8      	b.n	800bb86 <memmove+0x12>
 800bb94:	4402      	add	r2, r0
 800bb96:	4601      	mov	r1, r0
 800bb98:	428a      	cmp	r2, r1
 800bb9a:	d100      	bne.n	800bb9e <memmove+0x2a>
 800bb9c:	bd10      	pop	{r4, pc}
 800bb9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bba6:	e7f7      	b.n	800bb98 <memmove+0x24>

0800bba8 <_realloc_r>:
 800bba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbac:	4680      	mov	r8, r0
 800bbae:	4614      	mov	r4, r2
 800bbb0:	460e      	mov	r6, r1
 800bbb2:	b921      	cbnz	r1, 800bbbe <_realloc_r+0x16>
 800bbb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb8:	4611      	mov	r1, r2
 800bbba:	f7ff bc39 	b.w	800b430 <_malloc_r>
 800bbbe:	b92a      	cbnz	r2, 800bbcc <_realloc_r+0x24>
 800bbc0:	f7ff fbca 	bl	800b358 <_free_r>
 800bbc4:	4625      	mov	r5, r4
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbcc:	f000 f81b 	bl	800bc06 <_malloc_usable_size_r>
 800bbd0:	4284      	cmp	r4, r0
 800bbd2:	4607      	mov	r7, r0
 800bbd4:	d802      	bhi.n	800bbdc <_realloc_r+0x34>
 800bbd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbda:	d812      	bhi.n	800bc02 <_realloc_r+0x5a>
 800bbdc:	4621      	mov	r1, r4
 800bbde:	4640      	mov	r0, r8
 800bbe0:	f7ff fc26 	bl	800b430 <_malloc_r>
 800bbe4:	4605      	mov	r5, r0
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d0ed      	beq.n	800bbc6 <_realloc_r+0x1e>
 800bbea:	42bc      	cmp	r4, r7
 800bbec:	4622      	mov	r2, r4
 800bbee:	4631      	mov	r1, r6
 800bbf0:	bf28      	it	cs
 800bbf2:	463a      	movcs	r2, r7
 800bbf4:	f7ff fb9a 	bl	800b32c <memcpy>
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	f7ff fbac 	bl	800b358 <_free_r>
 800bc00:	e7e1      	b.n	800bbc6 <_realloc_r+0x1e>
 800bc02:	4635      	mov	r5, r6
 800bc04:	e7df      	b.n	800bbc6 <_realloc_r+0x1e>

0800bc06 <_malloc_usable_size_r>:
 800bc06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc0a:	1f18      	subs	r0, r3, #4
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	bfbc      	itt	lt
 800bc10:	580b      	ldrlt	r3, [r1, r0]
 800bc12:	18c0      	addlt	r0, r0, r3
 800bc14:	4770      	bx	lr
	...

0800bc18 <pow>:
 800bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1a:	ed2d 8b02 	vpush	{d8}
 800bc1e:	eeb0 8a40 	vmov.f32	s16, s0
 800bc22:	eef0 8a60 	vmov.f32	s17, s1
 800bc26:	ec55 4b11 	vmov	r4, r5, d1
 800bc2a:	f000 f865 	bl	800bcf8 <__ieee754_pow>
 800bc2e:	4622      	mov	r2, r4
 800bc30:	462b      	mov	r3, r5
 800bc32:	4620      	mov	r0, r4
 800bc34:	4629      	mov	r1, r5
 800bc36:	ec57 6b10 	vmov	r6, r7, d0
 800bc3a:	f7f4 ff77 	bl	8000b2c <__aeabi_dcmpun>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d13b      	bne.n	800bcba <pow+0xa2>
 800bc42:	ec51 0b18 	vmov	r0, r1, d8
 800bc46:	2200      	movs	r2, #0
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f7f4 ff3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc4e:	b1b8      	cbz	r0, 800bc80 <pow+0x68>
 800bc50:	2200      	movs	r2, #0
 800bc52:	2300      	movs	r3, #0
 800bc54:	4620      	mov	r0, r4
 800bc56:	4629      	mov	r1, r5
 800bc58:	f7f4 ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	d146      	bne.n	800bcee <pow+0xd6>
 800bc60:	ec45 4b10 	vmov	d0, r4, r5
 800bc64:	f000 fe61 	bl	800c92a <finite>
 800bc68:	b338      	cbz	r0, 800bcba <pow+0xa2>
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4620      	mov	r0, r4
 800bc70:	4629      	mov	r1, r5
 800bc72:	f7f4 ff33 	bl	8000adc <__aeabi_dcmplt>
 800bc76:	b300      	cbz	r0, 800bcba <pow+0xa2>
 800bc78:	f7ff fb1e 	bl	800b2b8 <__errno>
 800bc7c:	2322      	movs	r3, #34	; 0x22
 800bc7e:	e01b      	b.n	800bcb8 <pow+0xa0>
 800bc80:	ec47 6b10 	vmov	d0, r6, r7
 800bc84:	f000 fe51 	bl	800c92a <finite>
 800bc88:	b9e0      	cbnz	r0, 800bcc4 <pow+0xac>
 800bc8a:	eeb0 0a48 	vmov.f32	s0, s16
 800bc8e:	eef0 0a68 	vmov.f32	s1, s17
 800bc92:	f000 fe4a 	bl	800c92a <finite>
 800bc96:	b1a8      	cbz	r0, 800bcc4 <pow+0xac>
 800bc98:	ec45 4b10 	vmov	d0, r4, r5
 800bc9c:	f000 fe45 	bl	800c92a <finite>
 800bca0:	b180      	cbz	r0, 800bcc4 <pow+0xac>
 800bca2:	4632      	mov	r2, r6
 800bca4:	463b      	mov	r3, r7
 800bca6:	4630      	mov	r0, r6
 800bca8:	4639      	mov	r1, r7
 800bcaa:	f7f4 ff3f 	bl	8000b2c <__aeabi_dcmpun>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d0e2      	beq.n	800bc78 <pow+0x60>
 800bcb2:	f7ff fb01 	bl	800b2b8 <__errno>
 800bcb6:	2321      	movs	r3, #33	; 0x21
 800bcb8:	6003      	str	r3, [r0, #0]
 800bcba:	ecbd 8b02 	vpop	{d8}
 800bcbe:	ec47 6b10 	vmov	d0, r6, r7
 800bcc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	4630      	mov	r0, r6
 800bcca:	4639      	mov	r1, r7
 800bccc:	f7f4 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d0f2      	beq.n	800bcba <pow+0xa2>
 800bcd4:	eeb0 0a48 	vmov.f32	s0, s16
 800bcd8:	eef0 0a68 	vmov.f32	s1, s17
 800bcdc:	f000 fe25 	bl	800c92a <finite>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d0ea      	beq.n	800bcba <pow+0xa2>
 800bce4:	ec45 4b10 	vmov	d0, r4, r5
 800bce8:	f000 fe1f 	bl	800c92a <finite>
 800bcec:	e7c3      	b.n	800bc76 <pow+0x5e>
 800bcee:	4f01      	ldr	r7, [pc, #4]	; (800bcf4 <pow+0xdc>)
 800bcf0:	2600      	movs	r6, #0
 800bcf2:	e7e2      	b.n	800bcba <pow+0xa2>
 800bcf4:	3ff00000 	.word	0x3ff00000

0800bcf8 <__ieee754_pow>:
 800bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfc:	ed2d 8b06 	vpush	{d8-d10}
 800bd00:	b089      	sub	sp, #36	; 0x24
 800bd02:	ed8d 1b00 	vstr	d1, [sp]
 800bd06:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bd0a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bd0e:	ea58 0102 	orrs.w	r1, r8, r2
 800bd12:	ec57 6b10 	vmov	r6, r7, d0
 800bd16:	d115      	bne.n	800bd44 <__ieee754_pow+0x4c>
 800bd18:	19b3      	adds	r3, r6, r6
 800bd1a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bd1e:	4152      	adcs	r2, r2
 800bd20:	4299      	cmp	r1, r3
 800bd22:	4b89      	ldr	r3, [pc, #548]	; (800bf48 <__ieee754_pow+0x250>)
 800bd24:	4193      	sbcs	r3, r2
 800bd26:	f080 84d2 	bcs.w	800c6ce <__ieee754_pow+0x9d6>
 800bd2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd2e:	4630      	mov	r0, r6
 800bd30:	4639      	mov	r1, r7
 800bd32:	f7f4 faab 	bl	800028c <__adddf3>
 800bd36:	ec41 0b10 	vmov	d0, r0, r1
 800bd3a:	b009      	add	sp, #36	; 0x24
 800bd3c:	ecbd 8b06 	vpop	{d8-d10}
 800bd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd44:	4b81      	ldr	r3, [pc, #516]	; (800bf4c <__ieee754_pow+0x254>)
 800bd46:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bd4a:	429c      	cmp	r4, r3
 800bd4c:	ee10 aa10 	vmov	sl, s0
 800bd50:	463d      	mov	r5, r7
 800bd52:	dc06      	bgt.n	800bd62 <__ieee754_pow+0x6a>
 800bd54:	d101      	bne.n	800bd5a <__ieee754_pow+0x62>
 800bd56:	2e00      	cmp	r6, #0
 800bd58:	d1e7      	bne.n	800bd2a <__ieee754_pow+0x32>
 800bd5a:	4598      	cmp	r8, r3
 800bd5c:	dc01      	bgt.n	800bd62 <__ieee754_pow+0x6a>
 800bd5e:	d10f      	bne.n	800bd80 <__ieee754_pow+0x88>
 800bd60:	b172      	cbz	r2, 800bd80 <__ieee754_pow+0x88>
 800bd62:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bd66:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bd6a:	ea55 050a 	orrs.w	r5, r5, sl
 800bd6e:	d1dc      	bne.n	800bd2a <__ieee754_pow+0x32>
 800bd70:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bd74:	18db      	adds	r3, r3, r3
 800bd76:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bd7a:	4152      	adcs	r2, r2
 800bd7c:	429d      	cmp	r5, r3
 800bd7e:	e7d0      	b.n	800bd22 <__ieee754_pow+0x2a>
 800bd80:	2d00      	cmp	r5, #0
 800bd82:	da3b      	bge.n	800bdfc <__ieee754_pow+0x104>
 800bd84:	4b72      	ldr	r3, [pc, #456]	; (800bf50 <__ieee754_pow+0x258>)
 800bd86:	4598      	cmp	r8, r3
 800bd88:	dc51      	bgt.n	800be2e <__ieee754_pow+0x136>
 800bd8a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bd8e:	4598      	cmp	r8, r3
 800bd90:	f340 84ac 	ble.w	800c6ec <__ieee754_pow+0x9f4>
 800bd94:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bd98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bd9c:	2b14      	cmp	r3, #20
 800bd9e:	dd0f      	ble.n	800bdc0 <__ieee754_pow+0xc8>
 800bda0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bda4:	fa22 f103 	lsr.w	r1, r2, r3
 800bda8:	fa01 f303 	lsl.w	r3, r1, r3
 800bdac:	4293      	cmp	r3, r2
 800bdae:	f040 849d 	bne.w	800c6ec <__ieee754_pow+0x9f4>
 800bdb2:	f001 0101 	and.w	r1, r1, #1
 800bdb6:	f1c1 0302 	rsb	r3, r1, #2
 800bdba:	9304      	str	r3, [sp, #16]
 800bdbc:	b182      	cbz	r2, 800bde0 <__ieee754_pow+0xe8>
 800bdbe:	e05f      	b.n	800be80 <__ieee754_pow+0x188>
 800bdc0:	2a00      	cmp	r2, #0
 800bdc2:	d15b      	bne.n	800be7c <__ieee754_pow+0x184>
 800bdc4:	f1c3 0314 	rsb	r3, r3, #20
 800bdc8:	fa48 f103 	asr.w	r1, r8, r3
 800bdcc:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd0:	4543      	cmp	r3, r8
 800bdd2:	f040 8488 	bne.w	800c6e6 <__ieee754_pow+0x9ee>
 800bdd6:	f001 0101 	and.w	r1, r1, #1
 800bdda:	f1c1 0302 	rsb	r3, r1, #2
 800bdde:	9304      	str	r3, [sp, #16]
 800bde0:	4b5c      	ldr	r3, [pc, #368]	; (800bf54 <__ieee754_pow+0x25c>)
 800bde2:	4598      	cmp	r8, r3
 800bde4:	d132      	bne.n	800be4c <__ieee754_pow+0x154>
 800bde6:	f1b9 0f00 	cmp.w	r9, #0
 800bdea:	f280 8478 	bge.w	800c6de <__ieee754_pow+0x9e6>
 800bdee:	4959      	ldr	r1, [pc, #356]	; (800bf54 <__ieee754_pow+0x25c>)
 800bdf0:	4632      	mov	r2, r6
 800bdf2:	463b      	mov	r3, r7
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	f7f4 fd29 	bl	800084c <__aeabi_ddiv>
 800bdfa:	e79c      	b.n	800bd36 <__ieee754_pow+0x3e>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	9304      	str	r3, [sp, #16]
 800be00:	2a00      	cmp	r2, #0
 800be02:	d13d      	bne.n	800be80 <__ieee754_pow+0x188>
 800be04:	4b51      	ldr	r3, [pc, #324]	; (800bf4c <__ieee754_pow+0x254>)
 800be06:	4598      	cmp	r8, r3
 800be08:	d1ea      	bne.n	800bde0 <__ieee754_pow+0xe8>
 800be0a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800be0e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800be12:	ea53 030a 	orrs.w	r3, r3, sl
 800be16:	f000 845a 	beq.w	800c6ce <__ieee754_pow+0x9d6>
 800be1a:	4b4f      	ldr	r3, [pc, #316]	; (800bf58 <__ieee754_pow+0x260>)
 800be1c:	429c      	cmp	r4, r3
 800be1e:	dd08      	ble.n	800be32 <__ieee754_pow+0x13a>
 800be20:	f1b9 0f00 	cmp.w	r9, #0
 800be24:	f2c0 8457 	blt.w	800c6d6 <__ieee754_pow+0x9de>
 800be28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be2c:	e783      	b.n	800bd36 <__ieee754_pow+0x3e>
 800be2e:	2302      	movs	r3, #2
 800be30:	e7e5      	b.n	800bdfe <__ieee754_pow+0x106>
 800be32:	f1b9 0f00 	cmp.w	r9, #0
 800be36:	f04f 0000 	mov.w	r0, #0
 800be3a:	f04f 0100 	mov.w	r1, #0
 800be3e:	f6bf af7a 	bge.w	800bd36 <__ieee754_pow+0x3e>
 800be42:	e9dd 0300 	ldrd	r0, r3, [sp]
 800be46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800be4a:	e774      	b.n	800bd36 <__ieee754_pow+0x3e>
 800be4c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800be50:	d106      	bne.n	800be60 <__ieee754_pow+0x168>
 800be52:	4632      	mov	r2, r6
 800be54:	463b      	mov	r3, r7
 800be56:	4630      	mov	r0, r6
 800be58:	4639      	mov	r1, r7
 800be5a:	f7f4 fbcd 	bl	80005f8 <__aeabi_dmul>
 800be5e:	e76a      	b.n	800bd36 <__ieee754_pow+0x3e>
 800be60:	4b3e      	ldr	r3, [pc, #248]	; (800bf5c <__ieee754_pow+0x264>)
 800be62:	4599      	cmp	r9, r3
 800be64:	d10c      	bne.n	800be80 <__ieee754_pow+0x188>
 800be66:	2d00      	cmp	r5, #0
 800be68:	db0a      	blt.n	800be80 <__ieee754_pow+0x188>
 800be6a:	ec47 6b10 	vmov	d0, r6, r7
 800be6e:	b009      	add	sp, #36	; 0x24
 800be70:	ecbd 8b06 	vpop	{d8-d10}
 800be74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be78:	f000 bc6c 	b.w	800c754 <__ieee754_sqrt>
 800be7c:	2300      	movs	r3, #0
 800be7e:	9304      	str	r3, [sp, #16]
 800be80:	ec47 6b10 	vmov	d0, r6, r7
 800be84:	f000 fd48 	bl	800c918 <fabs>
 800be88:	ec51 0b10 	vmov	r0, r1, d0
 800be8c:	f1ba 0f00 	cmp.w	sl, #0
 800be90:	d129      	bne.n	800bee6 <__ieee754_pow+0x1ee>
 800be92:	b124      	cbz	r4, 800be9e <__ieee754_pow+0x1a6>
 800be94:	4b2f      	ldr	r3, [pc, #188]	; (800bf54 <__ieee754_pow+0x25c>)
 800be96:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d123      	bne.n	800bee6 <__ieee754_pow+0x1ee>
 800be9e:	f1b9 0f00 	cmp.w	r9, #0
 800bea2:	da05      	bge.n	800beb0 <__ieee754_pow+0x1b8>
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	2000      	movs	r0, #0
 800beaa:	492a      	ldr	r1, [pc, #168]	; (800bf54 <__ieee754_pow+0x25c>)
 800beac:	f7f4 fcce 	bl	800084c <__aeabi_ddiv>
 800beb0:	2d00      	cmp	r5, #0
 800beb2:	f6bf af40 	bge.w	800bd36 <__ieee754_pow+0x3e>
 800beb6:	9b04      	ldr	r3, [sp, #16]
 800beb8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bebc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bec0:	4323      	orrs	r3, r4
 800bec2:	d108      	bne.n	800bed6 <__ieee754_pow+0x1de>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4610      	mov	r0, r2
 800beca:	4619      	mov	r1, r3
 800becc:	f7f4 f9dc 	bl	8000288 <__aeabi_dsub>
 800bed0:	4602      	mov	r2, r0
 800bed2:	460b      	mov	r3, r1
 800bed4:	e78f      	b.n	800bdf6 <__ieee754_pow+0xfe>
 800bed6:	9b04      	ldr	r3, [sp, #16]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	f47f af2c 	bne.w	800bd36 <__ieee754_pow+0x3e>
 800bede:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bee2:	4619      	mov	r1, r3
 800bee4:	e727      	b.n	800bd36 <__ieee754_pow+0x3e>
 800bee6:	0feb      	lsrs	r3, r5, #31
 800bee8:	3b01      	subs	r3, #1
 800beea:	9306      	str	r3, [sp, #24]
 800beec:	9a06      	ldr	r2, [sp, #24]
 800beee:	9b04      	ldr	r3, [sp, #16]
 800bef0:	4313      	orrs	r3, r2
 800bef2:	d102      	bne.n	800befa <__ieee754_pow+0x202>
 800bef4:	4632      	mov	r2, r6
 800bef6:	463b      	mov	r3, r7
 800bef8:	e7e6      	b.n	800bec8 <__ieee754_pow+0x1d0>
 800befa:	4b19      	ldr	r3, [pc, #100]	; (800bf60 <__ieee754_pow+0x268>)
 800befc:	4598      	cmp	r8, r3
 800befe:	f340 80fb 	ble.w	800c0f8 <__ieee754_pow+0x400>
 800bf02:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bf06:	4598      	cmp	r8, r3
 800bf08:	4b13      	ldr	r3, [pc, #76]	; (800bf58 <__ieee754_pow+0x260>)
 800bf0a:	dd0c      	ble.n	800bf26 <__ieee754_pow+0x22e>
 800bf0c:	429c      	cmp	r4, r3
 800bf0e:	dc0f      	bgt.n	800bf30 <__ieee754_pow+0x238>
 800bf10:	f1b9 0f00 	cmp.w	r9, #0
 800bf14:	da0f      	bge.n	800bf36 <__ieee754_pow+0x23e>
 800bf16:	2000      	movs	r0, #0
 800bf18:	b009      	add	sp, #36	; 0x24
 800bf1a:	ecbd 8b06 	vpop	{d8-d10}
 800bf1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf22:	f000 bcf0 	b.w	800c906 <__math_oflow>
 800bf26:	429c      	cmp	r4, r3
 800bf28:	dbf2      	blt.n	800bf10 <__ieee754_pow+0x218>
 800bf2a:	4b0a      	ldr	r3, [pc, #40]	; (800bf54 <__ieee754_pow+0x25c>)
 800bf2c:	429c      	cmp	r4, r3
 800bf2e:	dd19      	ble.n	800bf64 <__ieee754_pow+0x26c>
 800bf30:	f1b9 0f00 	cmp.w	r9, #0
 800bf34:	dcef      	bgt.n	800bf16 <__ieee754_pow+0x21e>
 800bf36:	2000      	movs	r0, #0
 800bf38:	b009      	add	sp, #36	; 0x24
 800bf3a:	ecbd 8b06 	vpop	{d8-d10}
 800bf3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf42:	f000 bcd7 	b.w	800c8f4 <__math_uflow>
 800bf46:	bf00      	nop
 800bf48:	fff00000 	.word	0xfff00000
 800bf4c:	7ff00000 	.word	0x7ff00000
 800bf50:	433fffff 	.word	0x433fffff
 800bf54:	3ff00000 	.word	0x3ff00000
 800bf58:	3fefffff 	.word	0x3fefffff
 800bf5c:	3fe00000 	.word	0x3fe00000
 800bf60:	41e00000 	.word	0x41e00000
 800bf64:	4b60      	ldr	r3, [pc, #384]	; (800c0e8 <__ieee754_pow+0x3f0>)
 800bf66:	2200      	movs	r2, #0
 800bf68:	f7f4 f98e 	bl	8000288 <__aeabi_dsub>
 800bf6c:	a354      	add	r3, pc, #336	; (adr r3, 800c0c0 <__ieee754_pow+0x3c8>)
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	4604      	mov	r4, r0
 800bf74:	460d      	mov	r5, r1
 800bf76:	f7f4 fb3f 	bl	80005f8 <__aeabi_dmul>
 800bf7a:	a353      	add	r3, pc, #332	; (adr r3, 800c0c8 <__ieee754_pow+0x3d0>)
 800bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf80:	4606      	mov	r6, r0
 800bf82:	460f      	mov	r7, r1
 800bf84:	4620      	mov	r0, r4
 800bf86:	4629      	mov	r1, r5
 800bf88:	f7f4 fb36 	bl	80005f8 <__aeabi_dmul>
 800bf8c:	4b57      	ldr	r3, [pc, #348]	; (800c0ec <__ieee754_pow+0x3f4>)
 800bf8e:	4682      	mov	sl, r0
 800bf90:	468b      	mov	fp, r1
 800bf92:	2200      	movs	r2, #0
 800bf94:	4620      	mov	r0, r4
 800bf96:	4629      	mov	r1, r5
 800bf98:	f7f4 fb2e 	bl	80005f8 <__aeabi_dmul>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	a14b      	add	r1, pc, #300	; (adr r1, 800c0d0 <__ieee754_pow+0x3d8>)
 800bfa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfa6:	f7f4 f96f 	bl	8000288 <__aeabi_dsub>
 800bfaa:	4622      	mov	r2, r4
 800bfac:	462b      	mov	r3, r5
 800bfae:	f7f4 fb23 	bl	80005f8 <__aeabi_dmul>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	494d      	ldr	r1, [pc, #308]	; (800c0f0 <__ieee754_pow+0x3f8>)
 800bfba:	f7f4 f965 	bl	8000288 <__aeabi_dsub>
 800bfbe:	4622      	mov	r2, r4
 800bfc0:	4680      	mov	r8, r0
 800bfc2:	4689      	mov	r9, r1
 800bfc4:	462b      	mov	r3, r5
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	4629      	mov	r1, r5
 800bfca:	f7f4 fb15 	bl	80005f8 <__aeabi_dmul>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	4640      	mov	r0, r8
 800bfd4:	4649      	mov	r1, r9
 800bfd6:	f7f4 fb0f 	bl	80005f8 <__aeabi_dmul>
 800bfda:	a33f      	add	r3, pc, #252	; (adr r3, 800c0d8 <__ieee754_pow+0x3e0>)
 800bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe0:	f7f4 fb0a 	bl	80005f8 <__aeabi_dmul>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	4650      	mov	r0, sl
 800bfea:	4659      	mov	r1, fp
 800bfec:	f7f4 f94c 	bl	8000288 <__aeabi_dsub>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4680      	mov	r8, r0
 800bff6:	4689      	mov	r9, r1
 800bff8:	4630      	mov	r0, r6
 800bffa:	4639      	mov	r1, r7
 800bffc:	f7f4 f946 	bl	800028c <__adddf3>
 800c000:	2000      	movs	r0, #0
 800c002:	4632      	mov	r2, r6
 800c004:	463b      	mov	r3, r7
 800c006:	4604      	mov	r4, r0
 800c008:	460d      	mov	r5, r1
 800c00a:	f7f4 f93d 	bl	8000288 <__aeabi_dsub>
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	4640      	mov	r0, r8
 800c014:	4649      	mov	r1, r9
 800c016:	f7f4 f937 	bl	8000288 <__aeabi_dsub>
 800c01a:	9b04      	ldr	r3, [sp, #16]
 800c01c:	9a06      	ldr	r2, [sp, #24]
 800c01e:	3b01      	subs	r3, #1
 800c020:	4313      	orrs	r3, r2
 800c022:	4682      	mov	sl, r0
 800c024:	468b      	mov	fp, r1
 800c026:	f040 81e7 	bne.w	800c3f8 <__ieee754_pow+0x700>
 800c02a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c0e0 <__ieee754_pow+0x3e8>
 800c02e:	eeb0 8a47 	vmov.f32	s16, s14
 800c032:	eef0 8a67 	vmov.f32	s17, s15
 800c036:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c03a:	2600      	movs	r6, #0
 800c03c:	4632      	mov	r2, r6
 800c03e:	463b      	mov	r3, r7
 800c040:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c044:	f7f4 f920 	bl	8000288 <__aeabi_dsub>
 800c048:	4622      	mov	r2, r4
 800c04a:	462b      	mov	r3, r5
 800c04c:	f7f4 fad4 	bl	80005f8 <__aeabi_dmul>
 800c050:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c054:	4680      	mov	r8, r0
 800c056:	4689      	mov	r9, r1
 800c058:	4650      	mov	r0, sl
 800c05a:	4659      	mov	r1, fp
 800c05c:	f7f4 facc 	bl	80005f8 <__aeabi_dmul>
 800c060:	4602      	mov	r2, r0
 800c062:	460b      	mov	r3, r1
 800c064:	4640      	mov	r0, r8
 800c066:	4649      	mov	r1, r9
 800c068:	f7f4 f910 	bl	800028c <__adddf3>
 800c06c:	4632      	mov	r2, r6
 800c06e:	463b      	mov	r3, r7
 800c070:	4680      	mov	r8, r0
 800c072:	4689      	mov	r9, r1
 800c074:	4620      	mov	r0, r4
 800c076:	4629      	mov	r1, r5
 800c078:	f7f4 fabe 	bl	80005f8 <__aeabi_dmul>
 800c07c:	460b      	mov	r3, r1
 800c07e:	4604      	mov	r4, r0
 800c080:	460d      	mov	r5, r1
 800c082:	4602      	mov	r2, r0
 800c084:	4649      	mov	r1, r9
 800c086:	4640      	mov	r0, r8
 800c088:	f7f4 f900 	bl	800028c <__adddf3>
 800c08c:	4b19      	ldr	r3, [pc, #100]	; (800c0f4 <__ieee754_pow+0x3fc>)
 800c08e:	4299      	cmp	r1, r3
 800c090:	ec45 4b19 	vmov	d9, r4, r5
 800c094:	4606      	mov	r6, r0
 800c096:	460f      	mov	r7, r1
 800c098:	468b      	mov	fp, r1
 800c09a:	f340 82f1 	ble.w	800c680 <__ieee754_pow+0x988>
 800c09e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c0a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c0a6:	4303      	orrs	r3, r0
 800c0a8:	f000 81e4 	beq.w	800c474 <__ieee754_pow+0x77c>
 800c0ac:	ec51 0b18 	vmov	r0, r1, d8
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f7f4 fd12 	bl	8000adc <__aeabi_dcmplt>
 800c0b8:	3800      	subs	r0, #0
 800c0ba:	bf18      	it	ne
 800c0bc:	2001      	movne	r0, #1
 800c0be:	e72b      	b.n	800bf18 <__ieee754_pow+0x220>
 800c0c0:	60000000 	.word	0x60000000
 800c0c4:	3ff71547 	.word	0x3ff71547
 800c0c8:	f85ddf44 	.word	0xf85ddf44
 800c0cc:	3e54ae0b 	.word	0x3e54ae0b
 800c0d0:	55555555 	.word	0x55555555
 800c0d4:	3fd55555 	.word	0x3fd55555
 800c0d8:	652b82fe 	.word	0x652b82fe
 800c0dc:	3ff71547 	.word	0x3ff71547
 800c0e0:	00000000 	.word	0x00000000
 800c0e4:	bff00000 	.word	0xbff00000
 800c0e8:	3ff00000 	.word	0x3ff00000
 800c0ec:	3fd00000 	.word	0x3fd00000
 800c0f0:	3fe00000 	.word	0x3fe00000
 800c0f4:	408fffff 	.word	0x408fffff
 800c0f8:	4bd5      	ldr	r3, [pc, #852]	; (800c450 <__ieee754_pow+0x758>)
 800c0fa:	402b      	ands	r3, r5
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	b92b      	cbnz	r3, 800c10c <__ieee754_pow+0x414>
 800c100:	4bd4      	ldr	r3, [pc, #848]	; (800c454 <__ieee754_pow+0x75c>)
 800c102:	f7f4 fa79 	bl	80005f8 <__aeabi_dmul>
 800c106:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c10a:	460c      	mov	r4, r1
 800c10c:	1523      	asrs	r3, r4, #20
 800c10e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c112:	4413      	add	r3, r2
 800c114:	9305      	str	r3, [sp, #20]
 800c116:	4bd0      	ldr	r3, [pc, #832]	; (800c458 <__ieee754_pow+0x760>)
 800c118:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c11c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c120:	429c      	cmp	r4, r3
 800c122:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c126:	dd08      	ble.n	800c13a <__ieee754_pow+0x442>
 800c128:	4bcc      	ldr	r3, [pc, #816]	; (800c45c <__ieee754_pow+0x764>)
 800c12a:	429c      	cmp	r4, r3
 800c12c:	f340 8162 	ble.w	800c3f4 <__ieee754_pow+0x6fc>
 800c130:	9b05      	ldr	r3, [sp, #20]
 800c132:	3301      	adds	r3, #1
 800c134:	9305      	str	r3, [sp, #20]
 800c136:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c13a:	2400      	movs	r4, #0
 800c13c:	00e3      	lsls	r3, r4, #3
 800c13e:	9307      	str	r3, [sp, #28]
 800c140:	4bc7      	ldr	r3, [pc, #796]	; (800c460 <__ieee754_pow+0x768>)
 800c142:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c146:	ed93 7b00 	vldr	d7, [r3]
 800c14a:	4629      	mov	r1, r5
 800c14c:	ec53 2b17 	vmov	r2, r3, d7
 800c150:	eeb0 9a47 	vmov.f32	s18, s14
 800c154:	eef0 9a67 	vmov.f32	s19, s15
 800c158:	4682      	mov	sl, r0
 800c15a:	f7f4 f895 	bl	8000288 <__aeabi_dsub>
 800c15e:	4652      	mov	r2, sl
 800c160:	4606      	mov	r6, r0
 800c162:	460f      	mov	r7, r1
 800c164:	462b      	mov	r3, r5
 800c166:	ec51 0b19 	vmov	r0, r1, d9
 800c16a:	f7f4 f88f 	bl	800028c <__adddf3>
 800c16e:	4602      	mov	r2, r0
 800c170:	460b      	mov	r3, r1
 800c172:	2000      	movs	r0, #0
 800c174:	49bb      	ldr	r1, [pc, #748]	; (800c464 <__ieee754_pow+0x76c>)
 800c176:	f7f4 fb69 	bl	800084c <__aeabi_ddiv>
 800c17a:	ec41 0b1a 	vmov	d10, r0, r1
 800c17e:	4602      	mov	r2, r0
 800c180:	460b      	mov	r3, r1
 800c182:	4630      	mov	r0, r6
 800c184:	4639      	mov	r1, r7
 800c186:	f7f4 fa37 	bl	80005f8 <__aeabi_dmul>
 800c18a:	2300      	movs	r3, #0
 800c18c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c190:	9302      	str	r3, [sp, #8]
 800c192:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c196:	46ab      	mov	fp, r5
 800c198:	106d      	asrs	r5, r5, #1
 800c19a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c19e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c1a2:	ec41 0b18 	vmov	d8, r0, r1
 800c1a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	4640      	mov	r0, r8
 800c1ae:	4649      	mov	r1, r9
 800c1b0:	4614      	mov	r4, r2
 800c1b2:	461d      	mov	r5, r3
 800c1b4:	f7f4 fa20 	bl	80005f8 <__aeabi_dmul>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4630      	mov	r0, r6
 800c1be:	4639      	mov	r1, r7
 800c1c0:	f7f4 f862 	bl	8000288 <__aeabi_dsub>
 800c1c4:	ec53 2b19 	vmov	r2, r3, d9
 800c1c8:	4606      	mov	r6, r0
 800c1ca:	460f      	mov	r7, r1
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	f7f4 f85a 	bl	8000288 <__aeabi_dsub>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	4650      	mov	r0, sl
 800c1da:	4659      	mov	r1, fp
 800c1dc:	f7f4 f854 	bl	8000288 <__aeabi_dsub>
 800c1e0:	4642      	mov	r2, r8
 800c1e2:	464b      	mov	r3, r9
 800c1e4:	f7f4 fa08 	bl	80005f8 <__aeabi_dmul>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	4639      	mov	r1, r7
 800c1f0:	f7f4 f84a 	bl	8000288 <__aeabi_dsub>
 800c1f4:	ec53 2b1a 	vmov	r2, r3, d10
 800c1f8:	f7f4 f9fe 	bl	80005f8 <__aeabi_dmul>
 800c1fc:	ec53 2b18 	vmov	r2, r3, d8
 800c200:	ec41 0b19 	vmov	d9, r0, r1
 800c204:	ec51 0b18 	vmov	r0, r1, d8
 800c208:	f7f4 f9f6 	bl	80005f8 <__aeabi_dmul>
 800c20c:	a37c      	add	r3, pc, #496	; (adr r3, 800c400 <__ieee754_pow+0x708>)
 800c20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c212:	4604      	mov	r4, r0
 800c214:	460d      	mov	r5, r1
 800c216:	f7f4 f9ef 	bl	80005f8 <__aeabi_dmul>
 800c21a:	a37b      	add	r3, pc, #492	; (adr r3, 800c408 <__ieee754_pow+0x710>)
 800c21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c220:	f7f4 f834 	bl	800028c <__adddf3>
 800c224:	4622      	mov	r2, r4
 800c226:	462b      	mov	r3, r5
 800c228:	f7f4 f9e6 	bl	80005f8 <__aeabi_dmul>
 800c22c:	a378      	add	r3, pc, #480	; (adr r3, 800c410 <__ieee754_pow+0x718>)
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	f7f4 f82b 	bl	800028c <__adddf3>
 800c236:	4622      	mov	r2, r4
 800c238:	462b      	mov	r3, r5
 800c23a:	f7f4 f9dd 	bl	80005f8 <__aeabi_dmul>
 800c23e:	a376      	add	r3, pc, #472	; (adr r3, 800c418 <__ieee754_pow+0x720>)
 800c240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c244:	f7f4 f822 	bl	800028c <__adddf3>
 800c248:	4622      	mov	r2, r4
 800c24a:	462b      	mov	r3, r5
 800c24c:	f7f4 f9d4 	bl	80005f8 <__aeabi_dmul>
 800c250:	a373      	add	r3, pc, #460	; (adr r3, 800c420 <__ieee754_pow+0x728>)
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	f7f4 f819 	bl	800028c <__adddf3>
 800c25a:	4622      	mov	r2, r4
 800c25c:	462b      	mov	r3, r5
 800c25e:	f7f4 f9cb 	bl	80005f8 <__aeabi_dmul>
 800c262:	a371      	add	r3, pc, #452	; (adr r3, 800c428 <__ieee754_pow+0x730>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	f7f4 f810 	bl	800028c <__adddf3>
 800c26c:	4622      	mov	r2, r4
 800c26e:	4606      	mov	r6, r0
 800c270:	460f      	mov	r7, r1
 800c272:	462b      	mov	r3, r5
 800c274:	4620      	mov	r0, r4
 800c276:	4629      	mov	r1, r5
 800c278:	f7f4 f9be 	bl	80005f8 <__aeabi_dmul>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	4630      	mov	r0, r6
 800c282:	4639      	mov	r1, r7
 800c284:	f7f4 f9b8 	bl	80005f8 <__aeabi_dmul>
 800c288:	4642      	mov	r2, r8
 800c28a:	4604      	mov	r4, r0
 800c28c:	460d      	mov	r5, r1
 800c28e:	464b      	mov	r3, r9
 800c290:	ec51 0b18 	vmov	r0, r1, d8
 800c294:	f7f3 fffa 	bl	800028c <__adddf3>
 800c298:	ec53 2b19 	vmov	r2, r3, d9
 800c29c:	f7f4 f9ac 	bl	80005f8 <__aeabi_dmul>
 800c2a0:	4622      	mov	r2, r4
 800c2a2:	462b      	mov	r3, r5
 800c2a4:	f7f3 fff2 	bl	800028c <__adddf3>
 800c2a8:	4642      	mov	r2, r8
 800c2aa:	4682      	mov	sl, r0
 800c2ac:	468b      	mov	fp, r1
 800c2ae:	464b      	mov	r3, r9
 800c2b0:	4640      	mov	r0, r8
 800c2b2:	4649      	mov	r1, r9
 800c2b4:	f7f4 f9a0 	bl	80005f8 <__aeabi_dmul>
 800c2b8:	4b6b      	ldr	r3, [pc, #428]	; (800c468 <__ieee754_pow+0x770>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	4606      	mov	r6, r0
 800c2be:	460f      	mov	r7, r1
 800c2c0:	f7f3 ffe4 	bl	800028c <__adddf3>
 800c2c4:	4652      	mov	r2, sl
 800c2c6:	465b      	mov	r3, fp
 800c2c8:	f7f3 ffe0 	bl	800028c <__adddf3>
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	460d      	mov	r5, r1
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	4640      	mov	r0, r8
 800c2d8:	4649      	mov	r1, r9
 800c2da:	f7f4 f98d 	bl	80005f8 <__aeabi_dmul>
 800c2de:	4b62      	ldr	r3, [pc, #392]	; (800c468 <__ieee754_pow+0x770>)
 800c2e0:	4680      	mov	r8, r0
 800c2e2:	4689      	mov	r9, r1
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	f7f3 ffcd 	bl	8000288 <__aeabi_dsub>
 800c2ee:	4632      	mov	r2, r6
 800c2f0:	463b      	mov	r3, r7
 800c2f2:	f7f3 ffc9 	bl	8000288 <__aeabi_dsub>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	4650      	mov	r0, sl
 800c2fc:	4659      	mov	r1, fp
 800c2fe:	f7f3 ffc3 	bl	8000288 <__aeabi_dsub>
 800c302:	ec53 2b18 	vmov	r2, r3, d8
 800c306:	f7f4 f977 	bl	80005f8 <__aeabi_dmul>
 800c30a:	4622      	mov	r2, r4
 800c30c:	4606      	mov	r6, r0
 800c30e:	460f      	mov	r7, r1
 800c310:	462b      	mov	r3, r5
 800c312:	ec51 0b19 	vmov	r0, r1, d9
 800c316:	f7f4 f96f 	bl	80005f8 <__aeabi_dmul>
 800c31a:	4602      	mov	r2, r0
 800c31c:	460b      	mov	r3, r1
 800c31e:	4630      	mov	r0, r6
 800c320:	4639      	mov	r1, r7
 800c322:	f7f3 ffb3 	bl	800028c <__adddf3>
 800c326:	4606      	mov	r6, r0
 800c328:	460f      	mov	r7, r1
 800c32a:	4602      	mov	r2, r0
 800c32c:	460b      	mov	r3, r1
 800c32e:	4640      	mov	r0, r8
 800c330:	4649      	mov	r1, r9
 800c332:	f7f3 ffab 	bl	800028c <__adddf3>
 800c336:	a33e      	add	r3, pc, #248	; (adr r3, 800c430 <__ieee754_pow+0x738>)
 800c338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33c:	2000      	movs	r0, #0
 800c33e:	4604      	mov	r4, r0
 800c340:	460d      	mov	r5, r1
 800c342:	f7f4 f959 	bl	80005f8 <__aeabi_dmul>
 800c346:	4642      	mov	r2, r8
 800c348:	ec41 0b18 	vmov	d8, r0, r1
 800c34c:	464b      	mov	r3, r9
 800c34e:	4620      	mov	r0, r4
 800c350:	4629      	mov	r1, r5
 800c352:	f7f3 ff99 	bl	8000288 <__aeabi_dsub>
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	4630      	mov	r0, r6
 800c35c:	4639      	mov	r1, r7
 800c35e:	f7f3 ff93 	bl	8000288 <__aeabi_dsub>
 800c362:	a335      	add	r3, pc, #212	; (adr r3, 800c438 <__ieee754_pow+0x740>)
 800c364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c368:	f7f4 f946 	bl	80005f8 <__aeabi_dmul>
 800c36c:	a334      	add	r3, pc, #208	; (adr r3, 800c440 <__ieee754_pow+0x748>)
 800c36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c372:	4606      	mov	r6, r0
 800c374:	460f      	mov	r7, r1
 800c376:	4620      	mov	r0, r4
 800c378:	4629      	mov	r1, r5
 800c37a:	f7f4 f93d 	bl	80005f8 <__aeabi_dmul>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	4630      	mov	r0, r6
 800c384:	4639      	mov	r1, r7
 800c386:	f7f3 ff81 	bl	800028c <__adddf3>
 800c38a:	9a07      	ldr	r2, [sp, #28]
 800c38c:	4b37      	ldr	r3, [pc, #220]	; (800c46c <__ieee754_pow+0x774>)
 800c38e:	4413      	add	r3, r2
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f7f3 ff7a 	bl	800028c <__adddf3>
 800c398:	4682      	mov	sl, r0
 800c39a:	9805      	ldr	r0, [sp, #20]
 800c39c:	468b      	mov	fp, r1
 800c39e:	f7f4 f8c1 	bl	8000524 <__aeabi_i2d>
 800c3a2:	9a07      	ldr	r2, [sp, #28]
 800c3a4:	4b32      	ldr	r3, [pc, #200]	; (800c470 <__ieee754_pow+0x778>)
 800c3a6:	4413      	add	r3, r2
 800c3a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3ac:	4606      	mov	r6, r0
 800c3ae:	460f      	mov	r7, r1
 800c3b0:	4652      	mov	r2, sl
 800c3b2:	465b      	mov	r3, fp
 800c3b4:	ec51 0b18 	vmov	r0, r1, d8
 800c3b8:	f7f3 ff68 	bl	800028c <__adddf3>
 800c3bc:	4642      	mov	r2, r8
 800c3be:	464b      	mov	r3, r9
 800c3c0:	f7f3 ff64 	bl	800028c <__adddf3>
 800c3c4:	4632      	mov	r2, r6
 800c3c6:	463b      	mov	r3, r7
 800c3c8:	f7f3 ff60 	bl	800028c <__adddf3>
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	4632      	mov	r2, r6
 800c3d0:	463b      	mov	r3, r7
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	460d      	mov	r5, r1
 800c3d6:	f7f3 ff57 	bl	8000288 <__aeabi_dsub>
 800c3da:	4642      	mov	r2, r8
 800c3dc:	464b      	mov	r3, r9
 800c3de:	f7f3 ff53 	bl	8000288 <__aeabi_dsub>
 800c3e2:	ec53 2b18 	vmov	r2, r3, d8
 800c3e6:	f7f3 ff4f 	bl	8000288 <__aeabi_dsub>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	4650      	mov	r0, sl
 800c3f0:	4659      	mov	r1, fp
 800c3f2:	e610      	b.n	800c016 <__ieee754_pow+0x31e>
 800c3f4:	2401      	movs	r4, #1
 800c3f6:	e6a1      	b.n	800c13c <__ieee754_pow+0x444>
 800c3f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c448 <__ieee754_pow+0x750>
 800c3fc:	e617      	b.n	800c02e <__ieee754_pow+0x336>
 800c3fe:	bf00      	nop
 800c400:	4a454eef 	.word	0x4a454eef
 800c404:	3fca7e28 	.word	0x3fca7e28
 800c408:	93c9db65 	.word	0x93c9db65
 800c40c:	3fcd864a 	.word	0x3fcd864a
 800c410:	a91d4101 	.word	0xa91d4101
 800c414:	3fd17460 	.word	0x3fd17460
 800c418:	518f264d 	.word	0x518f264d
 800c41c:	3fd55555 	.word	0x3fd55555
 800c420:	db6fabff 	.word	0xdb6fabff
 800c424:	3fdb6db6 	.word	0x3fdb6db6
 800c428:	33333303 	.word	0x33333303
 800c42c:	3fe33333 	.word	0x3fe33333
 800c430:	e0000000 	.word	0xe0000000
 800c434:	3feec709 	.word	0x3feec709
 800c438:	dc3a03fd 	.word	0xdc3a03fd
 800c43c:	3feec709 	.word	0x3feec709
 800c440:	145b01f5 	.word	0x145b01f5
 800c444:	be3e2fe0 	.word	0xbe3e2fe0
 800c448:	00000000 	.word	0x00000000
 800c44c:	3ff00000 	.word	0x3ff00000
 800c450:	7ff00000 	.word	0x7ff00000
 800c454:	43400000 	.word	0x43400000
 800c458:	0003988e 	.word	0x0003988e
 800c45c:	000bb679 	.word	0x000bb679
 800c460:	0800cb30 	.word	0x0800cb30
 800c464:	3ff00000 	.word	0x3ff00000
 800c468:	40080000 	.word	0x40080000
 800c46c:	0800cb50 	.word	0x0800cb50
 800c470:	0800cb40 	.word	0x0800cb40
 800c474:	a3b5      	add	r3, pc, #724	; (adr r3, 800c74c <__ieee754_pow+0xa54>)
 800c476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47a:	4640      	mov	r0, r8
 800c47c:	4649      	mov	r1, r9
 800c47e:	f7f3 ff05 	bl	800028c <__adddf3>
 800c482:	4622      	mov	r2, r4
 800c484:	ec41 0b1a 	vmov	d10, r0, r1
 800c488:	462b      	mov	r3, r5
 800c48a:	4630      	mov	r0, r6
 800c48c:	4639      	mov	r1, r7
 800c48e:	f7f3 fefb 	bl	8000288 <__aeabi_dsub>
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	ec51 0b1a 	vmov	r0, r1, d10
 800c49a:	f7f4 fb3d 	bl	8000b18 <__aeabi_dcmpgt>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	f47f ae04 	bne.w	800c0ac <__ieee754_pow+0x3b4>
 800c4a4:	4aa4      	ldr	r2, [pc, #656]	; (800c738 <__ieee754_pow+0xa40>)
 800c4a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	f340 8108 	ble.w	800c6c0 <__ieee754_pow+0x9c8>
 800c4b0:	151b      	asrs	r3, r3, #20
 800c4b2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c4b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c4ba:	fa4a f303 	asr.w	r3, sl, r3
 800c4be:	445b      	add	r3, fp
 800c4c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c4c4:	4e9d      	ldr	r6, [pc, #628]	; (800c73c <__ieee754_pow+0xa44>)
 800c4c6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c4ca:	4116      	asrs	r6, r2
 800c4cc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	ea23 0106 	bic.w	r1, r3, r6
 800c4d6:	f1c2 0214 	rsb	r2, r2, #20
 800c4da:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c4de:	fa4a fa02 	asr.w	sl, sl, r2
 800c4e2:	f1bb 0f00 	cmp.w	fp, #0
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	bfb8      	it	lt
 800c4f0:	f1ca 0a00 	rsblt	sl, sl, #0
 800c4f4:	f7f3 fec8 	bl	8000288 <__aeabi_dsub>
 800c4f8:	ec41 0b19 	vmov	d9, r0, r1
 800c4fc:	4642      	mov	r2, r8
 800c4fe:	464b      	mov	r3, r9
 800c500:	ec51 0b19 	vmov	r0, r1, d9
 800c504:	f7f3 fec2 	bl	800028c <__adddf3>
 800c508:	a37b      	add	r3, pc, #492	; (adr r3, 800c6f8 <__ieee754_pow+0xa00>)
 800c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50e:	2000      	movs	r0, #0
 800c510:	4604      	mov	r4, r0
 800c512:	460d      	mov	r5, r1
 800c514:	f7f4 f870 	bl	80005f8 <__aeabi_dmul>
 800c518:	ec53 2b19 	vmov	r2, r3, d9
 800c51c:	4606      	mov	r6, r0
 800c51e:	460f      	mov	r7, r1
 800c520:	4620      	mov	r0, r4
 800c522:	4629      	mov	r1, r5
 800c524:	f7f3 feb0 	bl	8000288 <__aeabi_dsub>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4640      	mov	r0, r8
 800c52e:	4649      	mov	r1, r9
 800c530:	f7f3 feaa 	bl	8000288 <__aeabi_dsub>
 800c534:	a372      	add	r3, pc, #456	; (adr r3, 800c700 <__ieee754_pow+0xa08>)
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	f7f4 f85d 	bl	80005f8 <__aeabi_dmul>
 800c53e:	a372      	add	r3, pc, #456	; (adr r3, 800c708 <__ieee754_pow+0xa10>)
 800c540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c544:	4680      	mov	r8, r0
 800c546:	4689      	mov	r9, r1
 800c548:	4620      	mov	r0, r4
 800c54a:	4629      	mov	r1, r5
 800c54c:	f7f4 f854 	bl	80005f8 <__aeabi_dmul>
 800c550:	4602      	mov	r2, r0
 800c552:	460b      	mov	r3, r1
 800c554:	4640      	mov	r0, r8
 800c556:	4649      	mov	r1, r9
 800c558:	f7f3 fe98 	bl	800028c <__adddf3>
 800c55c:	4604      	mov	r4, r0
 800c55e:	460d      	mov	r5, r1
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	4630      	mov	r0, r6
 800c566:	4639      	mov	r1, r7
 800c568:	f7f3 fe90 	bl	800028c <__adddf3>
 800c56c:	4632      	mov	r2, r6
 800c56e:	463b      	mov	r3, r7
 800c570:	4680      	mov	r8, r0
 800c572:	4689      	mov	r9, r1
 800c574:	f7f3 fe88 	bl	8000288 <__aeabi_dsub>
 800c578:	4602      	mov	r2, r0
 800c57a:	460b      	mov	r3, r1
 800c57c:	4620      	mov	r0, r4
 800c57e:	4629      	mov	r1, r5
 800c580:	f7f3 fe82 	bl	8000288 <__aeabi_dsub>
 800c584:	4642      	mov	r2, r8
 800c586:	4606      	mov	r6, r0
 800c588:	460f      	mov	r7, r1
 800c58a:	464b      	mov	r3, r9
 800c58c:	4640      	mov	r0, r8
 800c58e:	4649      	mov	r1, r9
 800c590:	f7f4 f832 	bl	80005f8 <__aeabi_dmul>
 800c594:	a35e      	add	r3, pc, #376	; (adr r3, 800c710 <__ieee754_pow+0xa18>)
 800c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59a:	4604      	mov	r4, r0
 800c59c:	460d      	mov	r5, r1
 800c59e:	f7f4 f82b 	bl	80005f8 <__aeabi_dmul>
 800c5a2:	a35d      	add	r3, pc, #372	; (adr r3, 800c718 <__ieee754_pow+0xa20>)
 800c5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a8:	f7f3 fe6e 	bl	8000288 <__aeabi_dsub>
 800c5ac:	4622      	mov	r2, r4
 800c5ae:	462b      	mov	r3, r5
 800c5b0:	f7f4 f822 	bl	80005f8 <__aeabi_dmul>
 800c5b4:	a35a      	add	r3, pc, #360	; (adr r3, 800c720 <__ieee754_pow+0xa28>)
 800c5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ba:	f7f3 fe67 	bl	800028c <__adddf3>
 800c5be:	4622      	mov	r2, r4
 800c5c0:	462b      	mov	r3, r5
 800c5c2:	f7f4 f819 	bl	80005f8 <__aeabi_dmul>
 800c5c6:	a358      	add	r3, pc, #352	; (adr r3, 800c728 <__ieee754_pow+0xa30>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	f7f3 fe5c 	bl	8000288 <__aeabi_dsub>
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	462b      	mov	r3, r5
 800c5d4:	f7f4 f810 	bl	80005f8 <__aeabi_dmul>
 800c5d8:	a355      	add	r3, pc, #340	; (adr r3, 800c730 <__ieee754_pow+0xa38>)
 800c5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5de:	f7f3 fe55 	bl	800028c <__adddf3>
 800c5e2:	4622      	mov	r2, r4
 800c5e4:	462b      	mov	r3, r5
 800c5e6:	f7f4 f807 	bl	80005f8 <__aeabi_dmul>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	4640      	mov	r0, r8
 800c5f0:	4649      	mov	r1, r9
 800c5f2:	f7f3 fe49 	bl	8000288 <__aeabi_dsub>
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	460d      	mov	r5, r1
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4640      	mov	r0, r8
 800c600:	4649      	mov	r1, r9
 800c602:	f7f3 fff9 	bl	80005f8 <__aeabi_dmul>
 800c606:	2200      	movs	r2, #0
 800c608:	ec41 0b19 	vmov	d9, r0, r1
 800c60c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c610:	4620      	mov	r0, r4
 800c612:	4629      	mov	r1, r5
 800c614:	f7f3 fe38 	bl	8000288 <__aeabi_dsub>
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	ec51 0b19 	vmov	r0, r1, d9
 800c620:	f7f4 f914 	bl	800084c <__aeabi_ddiv>
 800c624:	4632      	mov	r2, r6
 800c626:	4604      	mov	r4, r0
 800c628:	460d      	mov	r5, r1
 800c62a:	463b      	mov	r3, r7
 800c62c:	4640      	mov	r0, r8
 800c62e:	4649      	mov	r1, r9
 800c630:	f7f3 ffe2 	bl	80005f8 <__aeabi_dmul>
 800c634:	4632      	mov	r2, r6
 800c636:	463b      	mov	r3, r7
 800c638:	f7f3 fe28 	bl	800028c <__adddf3>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	4620      	mov	r0, r4
 800c642:	4629      	mov	r1, r5
 800c644:	f7f3 fe20 	bl	8000288 <__aeabi_dsub>
 800c648:	4642      	mov	r2, r8
 800c64a:	464b      	mov	r3, r9
 800c64c:	f7f3 fe1c 	bl	8000288 <__aeabi_dsub>
 800c650:	460b      	mov	r3, r1
 800c652:	4602      	mov	r2, r0
 800c654:	493a      	ldr	r1, [pc, #232]	; (800c740 <__ieee754_pow+0xa48>)
 800c656:	2000      	movs	r0, #0
 800c658:	f7f3 fe16 	bl	8000288 <__aeabi_dsub>
 800c65c:	ec41 0b10 	vmov	d0, r0, r1
 800c660:	ee10 3a90 	vmov	r3, s1
 800c664:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c66c:	da2b      	bge.n	800c6c6 <__ieee754_pow+0x9ce>
 800c66e:	4650      	mov	r0, sl
 800c670:	f000 f966 	bl	800c940 <scalbn>
 800c674:	ec51 0b10 	vmov	r0, r1, d0
 800c678:	ec53 2b18 	vmov	r2, r3, d8
 800c67c:	f7ff bbed 	b.w	800be5a <__ieee754_pow+0x162>
 800c680:	4b30      	ldr	r3, [pc, #192]	; (800c744 <__ieee754_pow+0xa4c>)
 800c682:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c686:	429e      	cmp	r6, r3
 800c688:	f77f af0c 	ble.w	800c4a4 <__ieee754_pow+0x7ac>
 800c68c:	4b2e      	ldr	r3, [pc, #184]	; (800c748 <__ieee754_pow+0xa50>)
 800c68e:	440b      	add	r3, r1
 800c690:	4303      	orrs	r3, r0
 800c692:	d009      	beq.n	800c6a8 <__ieee754_pow+0x9b0>
 800c694:	ec51 0b18 	vmov	r0, r1, d8
 800c698:	2200      	movs	r2, #0
 800c69a:	2300      	movs	r3, #0
 800c69c:	f7f4 fa1e 	bl	8000adc <__aeabi_dcmplt>
 800c6a0:	3800      	subs	r0, #0
 800c6a2:	bf18      	it	ne
 800c6a4:	2001      	movne	r0, #1
 800c6a6:	e447      	b.n	800bf38 <__ieee754_pow+0x240>
 800c6a8:	4622      	mov	r2, r4
 800c6aa:	462b      	mov	r3, r5
 800c6ac:	f7f3 fdec 	bl	8000288 <__aeabi_dsub>
 800c6b0:	4642      	mov	r2, r8
 800c6b2:	464b      	mov	r3, r9
 800c6b4:	f7f4 fa26 	bl	8000b04 <__aeabi_dcmpge>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	f43f aef3 	beq.w	800c4a4 <__ieee754_pow+0x7ac>
 800c6be:	e7e9      	b.n	800c694 <__ieee754_pow+0x99c>
 800c6c0:	f04f 0a00 	mov.w	sl, #0
 800c6c4:	e71a      	b.n	800c4fc <__ieee754_pow+0x804>
 800c6c6:	ec51 0b10 	vmov	r0, r1, d0
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	e7d4      	b.n	800c678 <__ieee754_pow+0x980>
 800c6ce:	491c      	ldr	r1, [pc, #112]	; (800c740 <__ieee754_pow+0xa48>)
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	f7ff bb30 	b.w	800bd36 <__ieee754_pow+0x3e>
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	2100      	movs	r1, #0
 800c6da:	f7ff bb2c 	b.w	800bd36 <__ieee754_pow+0x3e>
 800c6de:	4630      	mov	r0, r6
 800c6e0:	4639      	mov	r1, r7
 800c6e2:	f7ff bb28 	b.w	800bd36 <__ieee754_pow+0x3e>
 800c6e6:	9204      	str	r2, [sp, #16]
 800c6e8:	f7ff bb7a 	b.w	800bde0 <__ieee754_pow+0xe8>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f7ff bb64 	b.w	800bdba <__ieee754_pow+0xc2>
 800c6f2:	bf00      	nop
 800c6f4:	f3af 8000 	nop.w
 800c6f8:	00000000 	.word	0x00000000
 800c6fc:	3fe62e43 	.word	0x3fe62e43
 800c700:	fefa39ef 	.word	0xfefa39ef
 800c704:	3fe62e42 	.word	0x3fe62e42
 800c708:	0ca86c39 	.word	0x0ca86c39
 800c70c:	be205c61 	.word	0xbe205c61
 800c710:	72bea4d0 	.word	0x72bea4d0
 800c714:	3e663769 	.word	0x3e663769
 800c718:	c5d26bf1 	.word	0xc5d26bf1
 800c71c:	3ebbbd41 	.word	0x3ebbbd41
 800c720:	af25de2c 	.word	0xaf25de2c
 800c724:	3f11566a 	.word	0x3f11566a
 800c728:	16bebd93 	.word	0x16bebd93
 800c72c:	3f66c16c 	.word	0x3f66c16c
 800c730:	5555553e 	.word	0x5555553e
 800c734:	3fc55555 	.word	0x3fc55555
 800c738:	3fe00000 	.word	0x3fe00000
 800c73c:	000fffff 	.word	0x000fffff
 800c740:	3ff00000 	.word	0x3ff00000
 800c744:	4090cbff 	.word	0x4090cbff
 800c748:	3f6f3400 	.word	0x3f6f3400
 800c74c:	652b82fe 	.word	0x652b82fe
 800c750:	3c971547 	.word	0x3c971547

0800c754 <__ieee754_sqrt>:
 800c754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c758:	ec55 4b10 	vmov	r4, r5, d0
 800c75c:	4e55      	ldr	r6, [pc, #340]	; (800c8b4 <__ieee754_sqrt+0x160>)
 800c75e:	43ae      	bics	r6, r5
 800c760:	ee10 0a10 	vmov	r0, s0
 800c764:	ee10 3a10 	vmov	r3, s0
 800c768:	462a      	mov	r2, r5
 800c76a:	4629      	mov	r1, r5
 800c76c:	d110      	bne.n	800c790 <__ieee754_sqrt+0x3c>
 800c76e:	ee10 2a10 	vmov	r2, s0
 800c772:	462b      	mov	r3, r5
 800c774:	f7f3 ff40 	bl	80005f8 <__aeabi_dmul>
 800c778:	4602      	mov	r2, r0
 800c77a:	460b      	mov	r3, r1
 800c77c:	4620      	mov	r0, r4
 800c77e:	4629      	mov	r1, r5
 800c780:	f7f3 fd84 	bl	800028c <__adddf3>
 800c784:	4604      	mov	r4, r0
 800c786:	460d      	mov	r5, r1
 800c788:	ec45 4b10 	vmov	d0, r4, r5
 800c78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c790:	2d00      	cmp	r5, #0
 800c792:	dc10      	bgt.n	800c7b6 <__ieee754_sqrt+0x62>
 800c794:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c798:	4330      	orrs	r0, r6
 800c79a:	d0f5      	beq.n	800c788 <__ieee754_sqrt+0x34>
 800c79c:	b15d      	cbz	r5, 800c7b6 <__ieee754_sqrt+0x62>
 800c79e:	ee10 2a10 	vmov	r2, s0
 800c7a2:	462b      	mov	r3, r5
 800c7a4:	ee10 0a10 	vmov	r0, s0
 800c7a8:	f7f3 fd6e 	bl	8000288 <__aeabi_dsub>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	f7f4 f84c 	bl	800084c <__aeabi_ddiv>
 800c7b4:	e7e6      	b.n	800c784 <__ieee754_sqrt+0x30>
 800c7b6:	1512      	asrs	r2, r2, #20
 800c7b8:	d074      	beq.n	800c8a4 <__ieee754_sqrt+0x150>
 800c7ba:	07d4      	lsls	r4, r2, #31
 800c7bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c7c0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c7c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c7c8:	bf5e      	ittt	pl
 800c7ca:	0fda      	lsrpl	r2, r3, #31
 800c7cc:	005b      	lslpl	r3, r3, #1
 800c7ce:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c7d2:	2400      	movs	r4, #0
 800c7d4:	0fda      	lsrs	r2, r3, #31
 800c7d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c7da:	107f      	asrs	r7, r7, #1
 800c7dc:	005b      	lsls	r3, r3, #1
 800c7de:	2516      	movs	r5, #22
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c7e6:	1886      	adds	r6, r0, r2
 800c7e8:	428e      	cmp	r6, r1
 800c7ea:	bfde      	ittt	le
 800c7ec:	1b89      	suble	r1, r1, r6
 800c7ee:	18b0      	addle	r0, r6, r2
 800c7f0:	18a4      	addle	r4, r4, r2
 800c7f2:	0049      	lsls	r1, r1, #1
 800c7f4:	3d01      	subs	r5, #1
 800c7f6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c7fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c7fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c802:	d1f0      	bne.n	800c7e6 <__ieee754_sqrt+0x92>
 800c804:	462a      	mov	r2, r5
 800c806:	f04f 0e20 	mov.w	lr, #32
 800c80a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c80e:	4281      	cmp	r1, r0
 800c810:	eb06 0c05 	add.w	ip, r6, r5
 800c814:	dc02      	bgt.n	800c81c <__ieee754_sqrt+0xc8>
 800c816:	d113      	bne.n	800c840 <__ieee754_sqrt+0xec>
 800c818:	459c      	cmp	ip, r3
 800c81a:	d811      	bhi.n	800c840 <__ieee754_sqrt+0xec>
 800c81c:	f1bc 0f00 	cmp.w	ip, #0
 800c820:	eb0c 0506 	add.w	r5, ip, r6
 800c824:	da43      	bge.n	800c8ae <__ieee754_sqrt+0x15a>
 800c826:	2d00      	cmp	r5, #0
 800c828:	db41      	blt.n	800c8ae <__ieee754_sqrt+0x15a>
 800c82a:	f100 0801 	add.w	r8, r0, #1
 800c82e:	1a09      	subs	r1, r1, r0
 800c830:	459c      	cmp	ip, r3
 800c832:	bf88      	it	hi
 800c834:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800c838:	eba3 030c 	sub.w	r3, r3, ip
 800c83c:	4432      	add	r2, r6
 800c83e:	4640      	mov	r0, r8
 800c840:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c844:	f1be 0e01 	subs.w	lr, lr, #1
 800c848:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c84c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c850:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c854:	d1db      	bne.n	800c80e <__ieee754_sqrt+0xba>
 800c856:	430b      	orrs	r3, r1
 800c858:	d006      	beq.n	800c868 <__ieee754_sqrt+0x114>
 800c85a:	1c50      	adds	r0, r2, #1
 800c85c:	bf13      	iteet	ne
 800c85e:	3201      	addne	r2, #1
 800c860:	3401      	addeq	r4, #1
 800c862:	4672      	moveq	r2, lr
 800c864:	f022 0201 	bicne.w	r2, r2, #1
 800c868:	1063      	asrs	r3, r4, #1
 800c86a:	0852      	lsrs	r2, r2, #1
 800c86c:	07e1      	lsls	r1, r4, #31
 800c86e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c872:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c876:	bf48      	it	mi
 800c878:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c87c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c880:	4614      	mov	r4, r2
 800c882:	e781      	b.n	800c788 <__ieee754_sqrt+0x34>
 800c884:	0ad9      	lsrs	r1, r3, #11
 800c886:	3815      	subs	r0, #21
 800c888:	055b      	lsls	r3, r3, #21
 800c88a:	2900      	cmp	r1, #0
 800c88c:	d0fa      	beq.n	800c884 <__ieee754_sqrt+0x130>
 800c88e:	02cd      	lsls	r5, r1, #11
 800c890:	d50a      	bpl.n	800c8a8 <__ieee754_sqrt+0x154>
 800c892:	f1c2 0420 	rsb	r4, r2, #32
 800c896:	fa23 f404 	lsr.w	r4, r3, r4
 800c89a:	1e55      	subs	r5, r2, #1
 800c89c:	4093      	lsls	r3, r2
 800c89e:	4321      	orrs	r1, r4
 800c8a0:	1b42      	subs	r2, r0, r5
 800c8a2:	e78a      	b.n	800c7ba <__ieee754_sqrt+0x66>
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	e7f0      	b.n	800c88a <__ieee754_sqrt+0x136>
 800c8a8:	0049      	lsls	r1, r1, #1
 800c8aa:	3201      	adds	r2, #1
 800c8ac:	e7ef      	b.n	800c88e <__ieee754_sqrt+0x13a>
 800c8ae:	4680      	mov	r8, r0
 800c8b0:	e7bd      	b.n	800c82e <__ieee754_sqrt+0xda>
 800c8b2:	bf00      	nop
 800c8b4:	7ff00000 	.word	0x7ff00000

0800c8b8 <with_errno>:
 800c8b8:	b570      	push	{r4, r5, r6, lr}
 800c8ba:	4604      	mov	r4, r0
 800c8bc:	460d      	mov	r5, r1
 800c8be:	4616      	mov	r6, r2
 800c8c0:	f7fe fcfa 	bl	800b2b8 <__errno>
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	6006      	str	r6, [r0, #0]
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	bd70      	pop	{r4, r5, r6, pc}

0800c8cc <xflow>:
 800c8cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8ce:	4614      	mov	r4, r2
 800c8d0:	461d      	mov	r5, r3
 800c8d2:	b108      	cbz	r0, 800c8d8 <xflow+0xc>
 800c8d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c8d8:	e9cd 2300 	strd	r2, r3, [sp]
 800c8dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	4629      	mov	r1, r5
 800c8e4:	f7f3 fe88 	bl	80005f8 <__aeabi_dmul>
 800c8e8:	2222      	movs	r2, #34	; 0x22
 800c8ea:	b003      	add	sp, #12
 800c8ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8f0:	f7ff bfe2 	b.w	800c8b8 <with_errno>

0800c8f4 <__math_uflow>:
 800c8f4:	b508      	push	{r3, lr}
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c8fc:	f7ff ffe6 	bl	800c8cc <xflow>
 800c900:	ec41 0b10 	vmov	d0, r0, r1
 800c904:	bd08      	pop	{r3, pc}

0800c906 <__math_oflow>:
 800c906:	b508      	push	{r3, lr}
 800c908:	2200      	movs	r2, #0
 800c90a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c90e:	f7ff ffdd 	bl	800c8cc <xflow>
 800c912:	ec41 0b10 	vmov	d0, r0, r1
 800c916:	bd08      	pop	{r3, pc}

0800c918 <fabs>:
 800c918:	ec51 0b10 	vmov	r0, r1, d0
 800c91c:	ee10 2a10 	vmov	r2, s0
 800c920:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c924:	ec43 2b10 	vmov	d0, r2, r3
 800c928:	4770      	bx	lr

0800c92a <finite>:
 800c92a:	b082      	sub	sp, #8
 800c92c:	ed8d 0b00 	vstr	d0, [sp]
 800c930:	9801      	ldr	r0, [sp, #4]
 800c932:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c936:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c93a:	0fc0      	lsrs	r0, r0, #31
 800c93c:	b002      	add	sp, #8
 800c93e:	4770      	bx	lr

0800c940 <scalbn>:
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	ec55 4b10 	vmov	r4, r5, d0
 800c946:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c94a:	4606      	mov	r6, r0
 800c94c:	462b      	mov	r3, r5
 800c94e:	b99a      	cbnz	r2, 800c978 <scalbn+0x38>
 800c950:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c954:	4323      	orrs	r3, r4
 800c956:	d036      	beq.n	800c9c6 <scalbn+0x86>
 800c958:	4b39      	ldr	r3, [pc, #228]	; (800ca40 <scalbn+0x100>)
 800c95a:	4629      	mov	r1, r5
 800c95c:	ee10 0a10 	vmov	r0, s0
 800c960:	2200      	movs	r2, #0
 800c962:	f7f3 fe49 	bl	80005f8 <__aeabi_dmul>
 800c966:	4b37      	ldr	r3, [pc, #220]	; (800ca44 <scalbn+0x104>)
 800c968:	429e      	cmp	r6, r3
 800c96a:	4604      	mov	r4, r0
 800c96c:	460d      	mov	r5, r1
 800c96e:	da10      	bge.n	800c992 <scalbn+0x52>
 800c970:	a32b      	add	r3, pc, #172	; (adr r3, 800ca20 <scalbn+0xe0>)
 800c972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c976:	e03a      	b.n	800c9ee <scalbn+0xae>
 800c978:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c97c:	428a      	cmp	r2, r1
 800c97e:	d10c      	bne.n	800c99a <scalbn+0x5a>
 800c980:	ee10 2a10 	vmov	r2, s0
 800c984:	4620      	mov	r0, r4
 800c986:	4629      	mov	r1, r5
 800c988:	f7f3 fc80 	bl	800028c <__adddf3>
 800c98c:	4604      	mov	r4, r0
 800c98e:	460d      	mov	r5, r1
 800c990:	e019      	b.n	800c9c6 <scalbn+0x86>
 800c992:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c996:	460b      	mov	r3, r1
 800c998:	3a36      	subs	r2, #54	; 0x36
 800c99a:	4432      	add	r2, r6
 800c99c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c9a0:	428a      	cmp	r2, r1
 800c9a2:	dd08      	ble.n	800c9b6 <scalbn+0x76>
 800c9a4:	2d00      	cmp	r5, #0
 800c9a6:	a120      	add	r1, pc, #128	; (adr r1, 800ca28 <scalbn+0xe8>)
 800c9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ac:	da1c      	bge.n	800c9e8 <scalbn+0xa8>
 800c9ae:	a120      	add	r1, pc, #128	; (adr r1, 800ca30 <scalbn+0xf0>)
 800c9b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9b4:	e018      	b.n	800c9e8 <scalbn+0xa8>
 800c9b6:	2a00      	cmp	r2, #0
 800c9b8:	dd08      	ble.n	800c9cc <scalbn+0x8c>
 800c9ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c9be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c9c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c9c6:	ec45 4b10 	vmov	d0, r4, r5
 800c9ca:	bd70      	pop	{r4, r5, r6, pc}
 800c9cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c9d0:	da19      	bge.n	800ca06 <scalbn+0xc6>
 800c9d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c9d6:	429e      	cmp	r6, r3
 800c9d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c9dc:	dd0a      	ble.n	800c9f4 <scalbn+0xb4>
 800c9de:	a112      	add	r1, pc, #72	; (adr r1, 800ca28 <scalbn+0xe8>)
 800c9e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1e2      	bne.n	800c9ae <scalbn+0x6e>
 800c9e8:	a30f      	add	r3, pc, #60	; (adr r3, 800ca28 <scalbn+0xe8>)
 800c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ee:	f7f3 fe03 	bl	80005f8 <__aeabi_dmul>
 800c9f2:	e7cb      	b.n	800c98c <scalbn+0x4c>
 800c9f4:	a10a      	add	r1, pc, #40	; (adr r1, 800ca20 <scalbn+0xe0>)
 800c9f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d0b8      	beq.n	800c970 <scalbn+0x30>
 800c9fe:	a10e      	add	r1, pc, #56	; (adr r1, 800ca38 <scalbn+0xf8>)
 800ca00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca04:	e7b4      	b.n	800c970 <scalbn+0x30>
 800ca06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca0a:	3236      	adds	r2, #54	; 0x36
 800ca0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ca10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ca14:	4620      	mov	r0, r4
 800ca16:	4b0c      	ldr	r3, [pc, #48]	; (800ca48 <scalbn+0x108>)
 800ca18:	2200      	movs	r2, #0
 800ca1a:	e7e8      	b.n	800c9ee <scalbn+0xae>
 800ca1c:	f3af 8000 	nop.w
 800ca20:	c2f8f359 	.word	0xc2f8f359
 800ca24:	01a56e1f 	.word	0x01a56e1f
 800ca28:	8800759c 	.word	0x8800759c
 800ca2c:	7e37e43c 	.word	0x7e37e43c
 800ca30:	8800759c 	.word	0x8800759c
 800ca34:	fe37e43c 	.word	0xfe37e43c
 800ca38:	c2f8f359 	.word	0xc2f8f359
 800ca3c:	81a56e1f 	.word	0x81a56e1f
 800ca40:	43500000 	.word	0x43500000
 800ca44:	ffff3cb0 	.word	0xffff3cb0
 800ca48:	3c900000 	.word	0x3c900000

0800ca4c <_init>:
 800ca4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4e:	bf00      	nop
 800ca50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca52:	bc08      	pop	{r3}
 800ca54:	469e      	mov	lr, r3
 800ca56:	4770      	bx	lr

0800ca58 <_fini>:
 800ca58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5a:	bf00      	nop
 800ca5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca5e:	bc08      	pop	{r3}
 800ca60:	469e      	mov	lr, r3
 800ca62:	4770      	bx	lr
